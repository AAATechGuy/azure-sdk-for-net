# This Yaml Document has been converted by ESAI Yaml Pipeline Conversion Tool.
# Please make sure to check all the converted content, it is your team's responsibility to make sure that the pipeline is still valid and functions as expected.
parameters:
- name: AdditionalParameters
  type: object
- name: DependsOn
  type: object
  default: null
- name: CloudConfig
  type: object
  default: {}
- name: MatrixConfigs
  type: object
  default: []
- name: MatrixFilters
  type: object
  default: []
- name: MatrixReplace
  type: object
  default: {}
- name: JobTemplatePath
  type: string
- name: SparseCheckout
  type: boolean
  default: true
- name: SparseCheckoutPaths
  type: object
  default: []
- name: Pool
  type: string
  default: azsdk-pool-mms-ubuntu-2204-general
- name: OsVmImage
  type: string
  default: ubuntu-22.04
- name: GenerateJobName
  type: string
  default: 'generate_job_matrix'
- name: PreGenerationSteps
  type: stepList
  default: []
jobs:
- job: ${{ parameters.GenerateJobName }}
  variables:
    skipComponentGovernanceDetection: true
    displayNameFilter: $[ coalesce(variables.jobMatrixFilter, '.*') ]
  ${{ if parameters.DependsOn }}:
    dependsOn: ${{ parameters.DependsOn }}
  steps:
  - ${{ if and(parameters.SparseCheckout, not(contains(variables['Build.DefinitionName'], '-pr - '))) }}:
    - template: /eng/common/pipelines/templates/steps/sparse-checkout.yml@self
      parameters:
        ${{ if ne(length(parameters.SparseCheckoutPaths), 0) }}:
          Paths: ${{ parameters.SparseCheckoutPaths }}
        ${{ if and(eq(length(parameters.SparseCheckoutPaths), 0), ne(parameters.AdditionalParameters.ServiceDirectory, '')) }}:
          Paths:
          - "sdk/${{ parameters.AdditionalParameters.ServiceDirectory }}"
  - ${{ parameters.PreGenerationSteps }}
  - ${{ each config in parameters.MatrixConfigs }}:
    - ${{ if eq(config.GenerateVMJobs, 'true') }}:
      - task: Powershell@2
        inputs:
          pwsh: true
          filePath: eng/common/scripts/job-matrix/Create-JobMatrix.ps1
          arguments: >
            -ConfigPath ${{ config.Path }} -Selection ${{ config.Selection }} -DisplayNameFilter '$(displayNameFilter)' -Filters '${{ join(''',''', parameters.MatrixFilters) }}','container=^$','SupportedClouds=^$|${{ parameters.CloudConfig.Cloud }}' -Replace '${{ join(''',''', parameters.MatrixReplace) }}' -NonSparseParameters '${{ join(''',''', config.NonSparseParameters) }}'
        displayName: Generate VM Job Matrix ${{ config.Name }}
        name: generate_vm_job_matrix_${{ config.Name }}
    - ${{ if eq(config.GenerateContainerJobs, 'true') }}:
      - task: Powershell@2
        inputs:
          pwsh: true
          filePath: eng/common/scripts/job-matrix/Create-JobMatrix.ps1
          arguments: >
            -ConfigPath ${{ config.Path }} -Selection ${{ config.Selection }} -DisplayNameFilter '$(displayNameFilter)' -Filters '${{ join(''',''', parameters.MatrixFilters) }}', 'container=.*', 'SupportedClouds=^$|${{ parameters.CloudConfig.Cloud }}' -NonSparseParameters '${{ join(''',''', config.NonSparseParameters) }}'
        displayName: Generate Container Job Matrix
        name: generate_container_job_matrix_${{ config.Name }}
- ${{ each config in parameters.MatrixConfigs }}:
  - ${{ if eq(config.GenerateVMJobs, 'true') }}:
    - template: ${{ parameters.JobTemplatePath }}
      parameters:
        UsePlatformContainer: false
        Matrix: dependencies.${{ parameters.GenerateJobName }}.outputs['generate_vm_job_matrix_${{ config.Name }}.matrix']
        DependsOn: ${{ parameters.GenerateJobName }}
        CloudConfig: ${{ parameters.CloudConfig }}
        ${{ each param in parameters.AdditionalParameters }}:
          ${{ param.key }}: ${{ param.value }}
  - ${{ if eq(config.GenerateContainerJobs, 'true') }}:
    - template: ${{ parameters.JobTemplatePath }}
      parameters:
        UsePlatformContainer: true
        Matrix: dependencies.${{ parameters.GenerateJobName }}.outputs['generate_container_job_matrix_${{ config.Name }}.matrix']
        DependsOn: ${{ parameters.GenerateJobName }}
        CloudConfig: ${{ parameters.CloudConfig }}
        ${{ each param in parameters.AdditionalParameters }}:
          ${{ param.key }}: ${{ param.value }}