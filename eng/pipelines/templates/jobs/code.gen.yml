parameters:
- name: SDKType
  type: string
  default: all
- name: TestSetupSteps
  type: stepList
  default: []
- name: TestTimeoutInMinutes
  type: number
- name: Matrix
  type: string
- name: DependsOn
  type: string
  default: ''
- name: UsePlatformContainer
  type: boolean
  default: false
- name: CloudConfig
  type: object
  default: {}
- name: ProjectListOverrideFilePropertyName
  type: string
  default: ''
- name: ServiceDirectory
  type: string
  default: ''

jobs:
  - job:
    displayName: "Code Generation"
    dependsOn: ${{ parameters.DependsOn }}
    timeoutInMinutes: ${{ parameters.TestTimeoutInMinutes }}
    condition: and(succeededOrFailed(), ne(variables['Skip.CodeGen'], true), ne(${{ parameters.Matrix }}, '{}'), ne(${{ parameters.ProjectListOverrideFilePropertyName }}, ''))
    strategy:
      matrix: $[ ${{ parameters.Matrix }} ]
    pool:
      vmImage: $(OSVmImage)
      name: $(Pool)
    ${{ if eq(parameters.UsePlatformContainer, 'true') }}:
      # Add a default so the job doesn't fail when the matrix is empty
      container: $[ variables['Container'] ]
    steps:
      - ${{ if not(contains(variables['Build.DefinitionName'], '-pr - ')) }}:
        - template: /eng/common/pipelines/templates/steps/sparse-checkout.yml
          parameters:
            Paths:
            - "/*"
            - "!SessionRecords"
            - "/sdk/*/**/SessionRecords"
      - task: DownloadPipelineArtifact@2
        inputs:
          artifact: DependencyTestProjectReferences
          patterns: "**/$(${{ parameters.ProjectListOverrideFilePropertyName }})"
          path: $(Build.SourcesDirectory)
        
      - template: /eng/pipelines/templates/steps/install-dotnet.yml    
        parameters:
          EnableNuGetCache: false
      - pwsh: |
          dotnet build /t:GenerateCode ./eng/service.proj `
            /p:SDKType=${{ parameters.SDKType }} `
            /p:ProjectListOverrideFile=$(${{ parameters.ProjectListOverrideFilePropertyName }})
        displayName: "Validate code generation"
      - pwsh: |
          Write-Host "git diff"
          # prevent warning related to EOL differences which triggers an exception for some reason
          & git -c core.safecrlf=false diff --ignore-space-at-eol --exit-code
          if ($LastExitCode -ne 0) {
              $status = git status -s | Out-String
              $status = $status -replace "`n","`n    "
              LogError `
                "Generated code is not up to date.`
                    You may need to rebase on the latest main, `
                    run 'dotnet build /t:GenerateCode' to update the generated code.`
                To reproduce this error locally, run 'eng\scripts\CodeChecks.ps1 -ServiceDirectory $ServiceDirectory'.`
                Read $ServiceDirectory from the git diff/status."
          }
        displayName: "Validate diff changes from code generation"