// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.HybridCompute;
using Azure.ResourceManager.HybridCompute.Models;

namespace Azure.ResourceManager.HybridCompute.Mocking
{
    /// <summary> A class to add extension methods to TenantResource. </summary>
    public partial class MockableHybridComputeTenantResource : ArmResource
    {
        private ClientDiagnostics _agentVersionClientDiagnostics;
        private AgentVersionRestOperations _agentVersionRestClient;

        /// <summary> Initializes a new instance of the <see cref="MockableHybridComputeTenantResource"/> class for mocking. </summary>
        protected MockableHybridComputeTenantResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableHybridComputeTenantResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableHybridComputeTenantResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics AgentVersionClientDiagnostics => _agentVersionClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.HybridCompute", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private AgentVersionRestOperations AgentVersionRestClient => _agentVersionRestClient ??= new AgentVersionRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Gets all Agent Versions along with the download link currently present.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.HybridCompute/osType/{osType}/agentVersions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AgentVersion_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="osType"> Defines the os type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="osType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="osType"/> is null. </exception>
        /// <returns> An async collection of <see cref="HybridComputeAgentVersion"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<HybridComputeAgentVersion> GetAgentVersionsAsync(string osType, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(osType, nameof(osType));

            HttpMessage FirstPageRequest(int? pageSizeHint) => AgentVersionRestClient.CreateListRequest(osType);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, null, HybridComputeAgentVersion.DeserializeHybridComputeAgentVersion, AgentVersionClientDiagnostics, Pipeline, "MockableHybridComputeTenantResource.GetAgentVersions", "value", null, cancellationToken);
        }

        /// <summary>
        /// Gets all Agent Versions along with the download link currently present.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.HybridCompute/osType/{osType}/agentVersions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AgentVersion_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="osType"> Defines the os type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="osType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="osType"/> is null. </exception>
        /// <returns> A collection of <see cref="HybridComputeAgentVersion"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<HybridComputeAgentVersion> GetAgentVersions(string osType, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(osType, nameof(osType));

            HttpMessage FirstPageRequest(int? pageSizeHint) => AgentVersionRestClient.CreateListRequest(osType);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, null, HybridComputeAgentVersion.DeserializeHybridComputeAgentVersion, AgentVersionClientDiagnostics, Pipeline, "MockableHybridComputeTenantResource.GetAgentVersions", "value", null, cancellationToken);
        }

        /// <summary>
        /// Gets an Agent Version along with the download link currently present.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.HybridCompute/osType/{osType}/agentVersions/{version}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AgentVersion_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="osType"> Defines the os type. </param>
        /// <param name="version"> Defines the agent version. To get latest, use latest or else a specific agent version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="osType"/> or <paramref name="version"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="osType"/> or <paramref name="version"/> is null. </exception>
        public virtual async Task<Response<HybridComputeAgentVersion>> GetAgentVersionAsync(string osType, string version, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(osType, nameof(osType));
            Argument.AssertNotNullOrEmpty(version, nameof(version));

            using var scope = AgentVersionClientDiagnostics.CreateScope("MockableHybridComputeTenantResource.GetAgentVersion");
            scope.Start();
            try
            {
                var response = await AgentVersionRestClient.GetAsync(osType, version, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets an Agent Version along with the download link currently present.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.HybridCompute/osType/{osType}/agentVersions/{version}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AgentVersion_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="osType"> Defines the os type. </param>
        /// <param name="version"> Defines the agent version. To get latest, use latest or else a specific agent version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="osType"/> or <paramref name="version"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="osType"/> or <paramref name="version"/> is null. </exception>
        public virtual Response<HybridComputeAgentVersion> GetAgentVersion(string osType, string version, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(osType, nameof(osType));
            Argument.AssertNotNullOrEmpty(version, nameof(version));

            using var scope = AgentVersionClientDiagnostics.CreateScope("MockableHybridComputeTenantResource.GetAgentVersion");
            scope.Start();
            try
            {
                var response = AgentVersionRestClient.Get(osType, version, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
