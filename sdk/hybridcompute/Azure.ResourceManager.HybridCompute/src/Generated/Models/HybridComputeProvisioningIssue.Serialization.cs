// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.HybridCompute.Models
{
    public partial class HybridComputeProvisioningIssue
    {
        internal static HybridComputeProvisioningIssue DeserializeHybridComputeProvisioningIssue(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> name = default;
            Optional<HybridComputeProvisioningIssueType> issueType = default;
            Optional<HybridComputeProvisioningIssueSeverity> severity = default;
            Optional<string> description = default;
            Optional<IReadOnlyList<ResourceIdentifier>> suggestedResourceIds = default;
            Optional<IReadOnlyList<HybridComputeAccessRule>> suggestedAccessRules = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("issueType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            issueType = new HybridComputeProvisioningIssueType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("severity"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            severity = new HybridComputeProvisioningIssueSeverity(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("description"u8))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("suggestedResourceIds"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<ResourceIdentifier> array = new List<ResourceIdentifier>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                if (item.ValueKind == JsonValueKind.Null)
                                {
                                    array.Add(null);
                                }
                                else
                                {
                                    array.Add(new ResourceIdentifier(item.GetString()));
                                }
                            }
                            suggestedResourceIds = array;
                            continue;
                        }
                        if (property0.NameEquals("suggestedAccessRules"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<HybridComputeAccessRule> array = new List<HybridComputeAccessRule>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(HybridComputeAccessRule.DeserializeHybridComputeAccessRule(item));
                            }
                            suggestedAccessRules = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new HybridComputeProvisioningIssue(name.Value, Optional.ToNullable(issueType), Optional.ToNullable(severity), description.Value, Optional.ToList(suggestedResourceIds), Optional.ToList(suggestedAccessRules));
        }
    }
}
