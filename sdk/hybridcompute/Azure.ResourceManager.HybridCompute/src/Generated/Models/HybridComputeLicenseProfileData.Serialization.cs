// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.HybridCompute.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.HybridCompute
{
    public partial class HybridComputeLicenseProfileData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("location"u8);
            writer.WriteStringValue(Location);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            writer.WritePropertyName("productProfile"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(SubscriptionStatus))
            {
                writer.WritePropertyName("subscriptionStatus"u8);
                writer.WriteStringValue(SubscriptionStatus.Value.ToString());
            }
            if (Optional.IsDefined(ProductType))
            {
                writer.WritePropertyName("productType"u8);
                writer.WriteStringValue(ProductType.Value.ToString());
            }
            if (Optional.IsCollectionDefined(ProductFeatures))
            {
                writer.WritePropertyName("productFeatures"u8);
                writer.WriteStartArray();
                foreach (var item in ProductFeatures)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            writer.WritePropertyName("esuProfile"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(AssignedLicense))
            {
                writer.WritePropertyName("assignedLicense"u8);
                writer.WriteStringValue(AssignedLicense);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("softwareAssurance"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(SoftwareAssuranceCustomer))
            {
                writer.WritePropertyName("softwareAssuranceCustomer"u8);
                writer.WriteBooleanValue(SoftwareAssuranceCustomer.Value);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static HybridComputeLicenseProfileData DeserializeHybridComputeLicenseProfileData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IDictionary<string, string>> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<HybridComputeProvisioningState> provisioningState = default;
            Optional<LicenseProfileSubscriptionStatus> subscriptionStatus = default;
            Optional<LicenseProfileProductType> productType = default;
            Optional<DateTimeOffset> billingStartDate = default;
            Optional<DateTimeOffset> enrollmentDate = default;
            Optional<DateTimeOffset> disenrollmentDate = default;
            Optional<IList<HybridComputeProductFeature>> productFeatures = default;
            Optional<Guid> assignedLicenseImmutableId = default;
            Optional<IReadOnlyList<EsuKey>> esuKeys = default;
            Optional<EsuServerType> serverType = default;
            Optional<EsuEligibility> esuEligibility = default;
            Optional<EsuKeyState> esuKeyState = default;
            Optional<string> assignedLicense = default;
            Optional<bool> softwareAssuranceCustomer = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new HybridComputeProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("productProfile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                if (property1.NameEquals("subscriptionStatus"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    subscriptionStatus = new LicenseProfileSubscriptionStatus(property1.Value.GetString());
                                    continue;
                                }
                                if (property1.NameEquals("productType"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    productType = new LicenseProfileProductType(property1.Value.GetString());
                                    continue;
                                }
                                if (property1.NameEquals("billingStartDate"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    billingStartDate = property1.Value.GetDateTimeOffset("O");
                                    continue;
                                }
                                if (property1.NameEquals("enrollmentDate"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    enrollmentDate = property1.Value.GetDateTimeOffset("O");
                                    continue;
                                }
                                if (property1.NameEquals("disenrollmentDate"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    disenrollmentDate = property1.Value.GetDateTimeOffset("O");
                                    continue;
                                }
                                if (property1.NameEquals("productFeatures"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    List<HybridComputeProductFeature> array = new List<HybridComputeProductFeature>();
                                    foreach (var item in property1.Value.EnumerateArray())
                                    {
                                        array.Add(HybridComputeProductFeature.DeserializeHybridComputeProductFeature(item));
                                    }
                                    productFeatures = array;
                                    continue;
                                }
                            }
                            continue;
                        }
                        if (property0.NameEquals("esuProfile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                if (property1.NameEquals("assignedLicenseImmutableId"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    assignedLicenseImmutableId = property1.Value.GetGuid();
                                    continue;
                                }
                                if (property1.NameEquals("esuKeys"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    List<EsuKey> array = new List<EsuKey>();
                                    foreach (var item in property1.Value.EnumerateArray())
                                    {
                                        array.Add(EsuKey.DeserializeEsuKey(item));
                                    }
                                    esuKeys = array;
                                    continue;
                                }
                                if (property1.NameEquals("serverType"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    serverType = new EsuServerType(property1.Value.GetString());
                                    continue;
                                }
                                if (property1.NameEquals("esuEligibility"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    esuEligibility = new EsuEligibility(property1.Value.GetString());
                                    continue;
                                }
                                if (property1.NameEquals("esuKeyState"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    esuKeyState = new EsuKeyState(property1.Value.GetString());
                                    continue;
                                }
                                if (property1.NameEquals("assignedLicense"u8))
                                {
                                    assignedLicense = property1.Value.GetString();
                                    continue;
                                }
                            }
                            continue;
                        }
                        if (property0.NameEquals("softwareAssurance"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                if (property1.NameEquals("softwareAssuranceCustomer"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    softwareAssuranceCustomer = property1.Value.GetBoolean();
                                    continue;
                                }
                            }
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new HybridComputeLicenseProfileData(id, name, type, systemData.Value, Optional.ToDictionary(tags), location, Optional.ToNullable(provisioningState), Optional.ToNullable(subscriptionStatus), Optional.ToNullable(productType), Optional.ToNullable(billingStartDate), Optional.ToNullable(enrollmentDate), Optional.ToNullable(disenrollmentDate), Optional.ToList(productFeatures), Optional.ToNullable(assignedLicenseImmutableId), Optional.ToList(esuKeys), Optional.ToNullable(serverType), Optional.ToNullable(esuEligibility), Optional.ToNullable(esuKeyState), assignedLicense.Value, Optional.ToNullable(softwareAssuranceCustomer));
        }
    }
}
