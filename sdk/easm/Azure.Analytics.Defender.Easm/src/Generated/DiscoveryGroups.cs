// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Analytics.Defender.Easm.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Defender.Easm
{
    // Data plane generated sub-client.
    /// <summary> The DiscoveryGroups sub-client. </summary>
    public partial class DiscoveryGroups
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://easm.defender.microsoft.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _subscriptionId;
        private readonly string _resourceGroupName;
        private readonly string _workspaceName;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of DiscoveryGroups for mocking. </summary>
        protected DiscoveryGroups()
        {
        }

        /// <summary> Initializes a new instance of DiscoveryGroups. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="tokenCredential"> The token credential to copy. </param>
        /// <param name="endpoint"> The endpoint hosting the requested resource. For example, https://{region}.easm.defender.microsoft.com. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="resourceGroupName"> The name of the Resource Group. </param>
        /// <param name="workspaceName"> The name of the Workspace. </param>
        /// <param name="apiVersion"> The String to use. </param>
        internal DiscoveryGroups(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, TokenCredential tokenCredential, Uri endpoint, string subscriptionId, string resourceGroupName, string workspaceName, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _tokenCredential = tokenCredential;
            _endpoint = endpoint;
            _subscriptionId = subscriptionId;
            _resourceGroupName = resourceGroupName;
            _workspaceName = workspaceName;
            _apiVersion = apiVersion;
        }

        /// <summary> Retrieve a list of discovery group for the provided search parameters. </summary>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/DiscoveryGroups.xml" path="doc/members/member[@name='GetDiscoGroupsAsync(string,int?,int?,CancellationToken)']/*" />
        public virtual async Task<Response<DiscoGroupPageResponse>> GetDiscoGroupsAsync(string filter = null, int? skip = null, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetDiscoGroupsAsync(filter, skip, maxpagesize, context).ConfigureAwait(false);
            return Response.FromValue(DiscoGroupPageResponse.FromResponse(response), response);
        }

        /// <summary> Retrieve a list of discovery group for the provided search parameters. </summary>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/DiscoveryGroups.xml" path="doc/members/member[@name='GetDiscoGroups(string,int?,int?,CancellationToken)']/*" />
        public virtual Response<DiscoGroupPageResponse> GetDiscoGroups(string filter = null, int? skip = null, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetDiscoGroups(filter, skip, maxpagesize, context);
            return Response.FromValue(DiscoGroupPageResponse.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Retrieve a list of discovery group for the provided search parameters.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetDiscoGroupsAsync(string,int?,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DiscoveryGroups.xml" path="doc/members/member[@name='GetDiscoGroupsAsync(string,int?,int?,RequestContext)']/*" />
        public virtual async Task<Response> GetDiscoGroupsAsync(string filter, int? skip, int? maxpagesize, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("DiscoveryGroups.GetDiscoGroups");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDiscoGroupsRequest(filter, skip, maxpagesize, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Retrieve a list of discovery group for the provided search parameters.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetDiscoGroups(string,int?,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DiscoveryGroups.xml" path="doc/members/member[@name='GetDiscoGroups(string,int?,int?,RequestContext)']/*" />
        public virtual Response GetDiscoGroups(string filter, int? skip, int? maxpagesize, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("DiscoveryGroups.GetDiscoGroups");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDiscoGroupsRequest(filter, skip, maxpagesize, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Validate a discovery group with a given groupName. </summary>
        /// <param name="discoGroupData"> A request body used to create a discovery group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="discoGroupData"/> is null. </exception>
        /// <include file="Docs/DiscoveryGroups.xml" path="doc/members/member[@name='ValidateAsync(DiscoGroupData,CancellationToken)']/*" />
        public virtual async Task<Response<ValidateResponse>> ValidateAsync(DiscoGroupData discoGroupData, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(discoGroupData, nameof(discoGroupData));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await ValidateAsync(discoGroupData.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(ValidateResponse.FromResponse(response), response);
        }

        /// <summary> Validate a discovery group with a given groupName. </summary>
        /// <param name="discoGroupData"> A request body used to create a discovery group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="discoGroupData"/> is null. </exception>
        /// <include file="Docs/DiscoveryGroups.xml" path="doc/members/member[@name='Validate(DiscoGroupData,CancellationToken)']/*" />
        public virtual Response<ValidateResponse> Validate(DiscoGroupData discoGroupData, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(discoGroupData, nameof(discoGroupData));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = Validate(discoGroupData.ToRequestContent(), context);
            return Response.FromValue(ValidateResponse.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Validate a discovery group with a given groupName.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="ValidateAsync(DiscoGroupData,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DiscoveryGroups.xml" path="doc/members/member[@name='ValidateAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> ValidateAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("DiscoveryGroups.Validate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateValidateRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Validate a discovery group with a given groupName.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="Validate(DiscoGroupData,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DiscoveryGroups.xml" path="doc/members/member[@name='Validate(RequestContent,RequestContext)']/*" />
        public virtual Response Validate(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("DiscoveryGroups.Validate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateValidateRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieve a discovery group with a given groupName. </summary>
        /// <param name="groupName"> The caller provided unique name for the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DiscoveryGroups.xml" path="doc/members/member[@name='GetDiscoGroupAsync(string,CancellationToken)']/*" />
        public virtual async Task<Response<DiscoGroup>> GetDiscoGroupAsync(string groupName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(groupName, nameof(groupName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetDiscoGroupAsync(groupName, context).ConfigureAwait(false);
            return Response.FromValue(DiscoGroup.FromResponse(response), response);
        }

        /// <summary> Retrieve a discovery group with a given groupName. </summary>
        /// <param name="groupName"> The caller provided unique name for the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DiscoveryGroups.xml" path="doc/members/member[@name='GetDiscoGroup(string,CancellationToken)']/*" />
        public virtual Response<DiscoGroup> GetDiscoGroup(string groupName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(groupName, nameof(groupName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetDiscoGroup(groupName, context);
            return Response.FromValue(DiscoGroup.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Retrieve a discovery group with a given groupName.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetDiscoGroupAsync(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="groupName"> The caller provided unique name for the resource. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DiscoveryGroups.xml" path="doc/members/member[@name='GetDiscoGroupAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> GetDiscoGroupAsync(string groupName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(groupName, nameof(groupName));

            using var scope = ClientDiagnostics.CreateScope("DiscoveryGroups.GetDiscoGroup");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDiscoGroupRequest(groupName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Retrieve a discovery group with a given groupName.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetDiscoGroup(string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="groupName"> The caller provided unique name for the resource. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DiscoveryGroups.xml" path="doc/members/member[@name='GetDiscoGroup(string,RequestContext)']/*" />
        public virtual Response GetDiscoGroup(string groupName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(groupName, nameof(groupName));

            using var scope = ClientDiagnostics.CreateScope("DiscoveryGroups.GetDiscoGroup");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDiscoGroupRequest(groupName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a discovery group with a given groupName. </summary>
        /// <param name="groupName"> The caller provided unique name for the resource. </param>
        /// <param name="discoGroupData"> A request body used to create a discovery group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupName"/> or <paramref name="discoGroupData"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DiscoveryGroups.xml" path="doc/members/member[@name='PutAsync(string,DiscoGroupData,CancellationToken)']/*" />
        public virtual async Task<Response<DiscoGroup>> PutAsync(string groupName, DiscoGroupData discoGroupData, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(groupName, nameof(groupName));
            Argument.AssertNotNull(discoGroupData, nameof(discoGroupData));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await PutAsync(groupName, discoGroupData.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(DiscoGroup.FromResponse(response), response);
        }

        /// <summary> Create a discovery group with a given groupName. </summary>
        /// <param name="groupName"> The caller provided unique name for the resource. </param>
        /// <param name="discoGroupData"> A request body used to create a discovery group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupName"/> or <paramref name="discoGroupData"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DiscoveryGroups.xml" path="doc/members/member[@name='Put(string,DiscoGroupData,CancellationToken)']/*" />
        public virtual Response<DiscoGroup> Put(string groupName, DiscoGroupData discoGroupData, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(groupName, nameof(groupName));
            Argument.AssertNotNull(discoGroupData, nameof(discoGroupData));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = Put(groupName, discoGroupData.ToRequestContent(), context);
            return Response.FromValue(DiscoGroup.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Create a discovery group with a given groupName.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="PutAsync(string,DiscoGroupData,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="groupName"> The caller provided unique name for the resource. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DiscoveryGroups.xml" path="doc/members/member[@name='PutAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> PutAsync(string groupName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupName, nameof(groupName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("DiscoveryGroups.Put");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutRequest(groupName, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Create a discovery group with a given groupName.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="Put(string,DiscoGroupData,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="groupName"> The caller provided unique name for the resource. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DiscoveryGroups.xml" path="doc/members/member[@name='Put(string,RequestContent,RequestContext)']/*" />
        public virtual Response Put(string groupName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupName, nameof(groupName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("DiscoveryGroups.Put");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutRequest(groupName, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Run a discovery group with a given groupName.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="groupName"> The caller provided unique name for the resource. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DiscoveryGroups.xml" path="doc/members/member[@name='RunAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> RunAsync(string groupName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupName, nameof(groupName));

            using var scope = ClientDiagnostics.CreateScope("DiscoveryGroups.Run");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRunRequest(groupName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Run a discovery group with a given groupName.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="groupName"> The caller provided unique name for the resource. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DiscoveryGroups.xml" path="doc/members/member[@name='Run(string,RequestContext)']/*" />
        public virtual Response Run(string groupName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupName, nameof(groupName));

            using var scope = ClientDiagnostics.CreateScope("DiscoveryGroups.Run");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRunRequest(groupName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieve a collection of discovery run results for a discovery group with a given groupName. </summary>
        /// <param name="groupName"> The unique identifier for the discovery group. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DiscoveryGroups.xml" path="doc/members/member[@name='GetRunsAsync(string,string,int?,int?,CancellationToken)']/*" />
        public virtual async Task<Response<DiscoRunPageResponse>> GetRunsAsync(string groupName, string filter = null, int? skip = null, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(groupName, nameof(groupName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetRunsAsync(groupName, filter, skip, maxpagesize, context).ConfigureAwait(false);
            return Response.FromValue(DiscoRunPageResponse.FromResponse(response), response);
        }

        /// <summary> Retrieve a collection of discovery run results for a discovery group with a given groupName. </summary>
        /// <param name="groupName"> The unique identifier for the discovery group. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DiscoveryGroups.xml" path="doc/members/member[@name='GetRuns(string,string,int?,int?,CancellationToken)']/*" />
        public virtual Response<DiscoRunPageResponse> GetRuns(string groupName, string filter = null, int? skip = null, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(groupName, nameof(groupName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetRuns(groupName, filter, skip, maxpagesize, context);
            return Response.FromValue(DiscoRunPageResponse.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Retrieve a collection of discovery run results for a discovery group with a given groupName.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetRunsAsync(string,string,int?,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="groupName"> The unique identifier for the discovery group. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DiscoveryGroups.xml" path="doc/members/member[@name='GetRunsAsync(string,string,int?,int?,RequestContext)']/*" />
        public virtual async Task<Response> GetRunsAsync(string groupName, string filter, int? skip, int? maxpagesize, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(groupName, nameof(groupName));

            using var scope = ClientDiagnostics.CreateScope("DiscoveryGroups.GetRuns");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRunsRequest(groupName, filter, skip, maxpagesize, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Retrieve a collection of discovery run results for a discovery group with a given groupName.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetRuns(string,string,int?,int?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="groupName"> The unique identifier for the discovery group. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DiscoveryGroups.xml" path="doc/members/member[@name='GetRuns(string,string,int?,int?,RequestContext)']/*" />
        public virtual Response GetRuns(string groupName, string filter, int? skip, int? maxpagesize, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(groupName, nameof(groupName));

            using var scope = ClientDiagnostics.CreateScope("DiscoveryGroups.GetRuns");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRunsRequest(groupName, filter, skip, maxpagesize, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetDiscoGroupsRequest(string filter, int? skip, int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/subscriptions/", false);
            uri.AppendRaw(_subscriptionId, true);
            uri.AppendRaw("/resourceGroups/", false);
            uri.AppendRaw(_resourceGroupName, true);
            uri.AppendRaw("/workspaces/", false);
            uri.AppendRaw(_workspaceName, true);
            uri.AppendPath("/discoGroups", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (filter != null)
            {
                uri.AppendQuery("filter", filter, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, true);
            }
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateValidateRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/subscriptions/", false);
            uri.AppendRaw(_subscriptionId, true);
            uri.AppendRaw("/resourceGroups/", false);
            uri.AppendRaw(_resourceGroupName, true);
            uri.AppendRaw("/workspaces/", false);
            uri.AppendRaw(_workspaceName, true);
            uri.AppendPath("/discoGroups:validate", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetDiscoGroupRequest(string groupName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/subscriptions/", false);
            uri.AppendRaw(_subscriptionId, true);
            uri.AppendRaw("/resourceGroups/", false);
            uri.AppendRaw(_resourceGroupName, true);
            uri.AppendRaw("/workspaces/", false);
            uri.AppendRaw(_workspaceName, true);
            uri.AppendPath("/discoGroups/", false);
            uri.AppendPath(groupName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreatePutRequest(string groupName, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/subscriptions/", false);
            uri.AppendRaw(_subscriptionId, true);
            uri.AppendRaw("/resourceGroups/", false);
            uri.AppendRaw(_resourceGroupName, true);
            uri.AppendRaw("/workspaces/", false);
            uri.AppendRaw(_workspaceName, true);
            uri.AppendPath("/discoGroups/", false);
            uri.AppendPath(groupName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateRunRequest(string groupName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/subscriptions/", false);
            uri.AppendRaw(_subscriptionId, true);
            uri.AppendRaw("/resourceGroups/", false);
            uri.AppendRaw(_resourceGroupName, true);
            uri.AppendRaw("/workspaces/", false);
            uri.AppendRaw(_workspaceName, true);
            uri.AppendPath("/discoGroups/", false);
            uri.AppendPath(groupName, true);
            uri.AppendPath(":run", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetRunsRequest(string groupName, string filter, int? skip, int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/subscriptions/", false);
            uri.AppendRaw(_subscriptionId, true);
            uri.AppendRaw("/resourceGroups/", false);
            uri.AppendRaw(_resourceGroupName, true);
            uri.AppendRaw("/workspaces/", false);
            uri.AppendRaw(_workspaceName, true);
            uri.AppendPath("/discoGroups/", false);
            uri.AppendPath(groupName, true);
            uri.AppendPath("/runs", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (filter != null)
            {
                uri.AppendQuery("filter", filter, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, true);
            }
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
