// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.CodeSigning;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.CodeSigning.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmCodeSigningModelFactory
    {
        /// <summary> Initializes a new instance of CodeSigningAccountData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="accountUri"> The URI of the code signing account for performing operations on certificate profiles. This property is readonly. </param>
        /// <param name="provisioningState"> Provisioning state of the code signing account. </param>
        /// <returns> A new <see cref="CodeSigning.CodeSigningAccountData"/> instance for mocking. </returns>
        public static CodeSigningAccountData CodeSigningAccountData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, Uri accountUri = null, CodeSigningProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CodeSigningAccountData(id, name, resourceType, systemData, tags, location, accountUri, provisioningState);
        }

        /// <summary> Initializes a new instance of CodeSigningCertificateProfileData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="profileType"> Profile type of the certificate. </param>
        /// <param name="rotationPolicy"> Rotation policy of the certificate. </param>
        /// <param name="commonName"> Used as CN in the subject name of the certificate. </param>
        /// <param name="organization"> Used as O in the subject name of the certificate. </param>
        /// <param name="organizationUnit"> Used as OU in the subject name of the private trust certificate. </param>
        /// <param name="streetAddress"></param>
        /// <param name="doesIncludeStreetAddress"> Whether to include in the public trust certificate subject name. </param>
        /// <param name="state"></param>
        /// <param name="doesIncludeState"> Whether to include in the public trust or private trust certificate subject name. </param>
        /// <param name="city"></param>
        /// <param name="doesIncludeCity"> Whether to include in the public trust or private trust certificate subject name. </param>
        /// <param name="postalCode"></param>
        /// <param name="doesIncludePostalCode"> Whether to include in the public trust certificate subject name. </param>
        /// <param name="country"></param>
        /// <param name="doesIncludeCountry"> Whether to include in the public trust or private trust certificate subject name. </param>
        /// <param name="enhancedKeyUsage"> Enhanced key usage of the certificate. </param>
        /// <param name="identityValidationId"></param>
        /// <param name="provisioningState"> Provisioning state of the code signing account. </param>
        /// <param name="status"> Status of the certificate profiles. </param>
        /// <param name="certificates"></param>
        /// <returns> A new <see cref="CodeSigning.CodeSigningCertificateProfileData"/> instance for mocking. </returns>
        public static CodeSigningCertificateProfileData CodeSigningCertificateProfileData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, CertificateProfileType profileType = default, CertificateRotationPolicy rotationPolicy = default, string commonName = null, string organization = null, string organizationUnit = null, string streetAddress = null, bool? doesIncludeStreetAddress = null, string state = null, bool? doesIncludeState = null, string city = null, bool? doesIncludeCity = null, string postalCode = null, bool? doesIncludePostalCode = null, string country = null, bool? doesIncludeCountry = null, string enhancedKeyUsage = null, string identityValidationId = null, CodeSigningProvisioningState? provisioningState = null, CertificateProfileStatus? status = null, IEnumerable<CodeSigningCertificate> certificates = null)
        {
            certificates ??= new List<CodeSigningCertificate>();

            return new CodeSigningCertificateProfileData(id, name, resourceType, systemData, profileType, rotationPolicy, commonName, organization, organizationUnit, streetAddress, doesIncludeStreetAddress, state, doesIncludeState, city, doesIncludeCity, postalCode, doesIncludePostalCode, country, doesIncludeCountry, enhancedKeyUsage, identityValidationId, provisioningState, status, certificates?.ToList());
        }

        /// <summary> Initializes a new instance of CodeSigningNameAvailabilityResult. </summary>
        /// <param name="isNameAvailable"> A boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken or is invalid and cannot be used. </param>
        /// <param name="reason"> The reason that a code signing account name could not be used. The Reason element is only returned if nameAvailable is false. </param>
        /// <param name="message"> An error message explaining the Reason value in more detail. </param>
        /// <returns> A new <see cref="Models.CodeSigningNameAvailabilityResult"/> instance for mocking. </returns>
        public static CodeSigningNameAvailabilityResult CodeSigningNameAvailabilityResult(bool? isNameAvailable = null, CodeSigningNameUnavailableReason? reason = null, string message = null)
        {
            return new CodeSigningNameAvailabilityResult(isNameAvailable, reason, message);
        }
    }
}
