// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.CodeSigning.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.CodeSigning
{
    /// <summary>
    /// A class representing the CodeSigningCertificateProfile data model.
    /// Certificate profile resource
    /// </summary>
    public partial class CodeSigningCertificateProfileData : ResourceData
    {
        /// <summary> Initializes a new instance of CodeSigningCertificateProfileData. </summary>
        /// <param name="profileType"> Profile type of the certificate. </param>
        /// <param name="rotationPolicy"> Rotation policy of the certificate. </param>
        /// <param name="commonName"> Used as CN in the subject name of the certificate. </param>
        /// <param name="organization"> Used as O in the subject name of the certificate. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="commonName"/> or <paramref name="organization"/> is null. </exception>
        public CodeSigningCertificateProfileData(CertificateProfileType profileType, CertificateRotationPolicy rotationPolicy, string commonName, string organization)
        {
            Argument.AssertNotNull(commonName, nameof(commonName));
            Argument.AssertNotNull(organization, nameof(organization));

            ProfileType = profileType;
            RotationPolicy = rotationPolicy;
            CommonName = commonName;
            Organization = organization;
            Certificates = new ChangeTrackingList<CodeSigningCertificate>();
        }

        /// <summary> Initializes a new instance of CodeSigningCertificateProfileData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="profileType"> Profile type of the certificate. </param>
        /// <param name="rotationPolicy"> Rotation policy of the certificate. </param>
        /// <param name="commonName"> Used as CN in the subject name of the certificate. </param>
        /// <param name="organization"> Used as O in the subject name of the certificate. </param>
        /// <param name="organizationUnit"> Used as OU in the subject name of the private trust certificate. </param>
        /// <param name="streetAddress"></param>
        /// <param name="doesIncludeStreetAddress"> Whether to include in the public trust certificate subject name. </param>
        /// <param name="state"></param>
        /// <param name="doesIncludeState"> Whether to include in the public trust or private trust certificate subject name. </param>
        /// <param name="city"></param>
        /// <param name="doesIncludeCity"> Whether to include in the public trust or private trust certificate subject name. </param>
        /// <param name="postalCode"></param>
        /// <param name="doesIncludePostalCode"> Whether to include in the public trust certificate subject name. </param>
        /// <param name="country"></param>
        /// <param name="doesIncludeCountry"> Whether to include in the public trust or private trust certificate subject name. </param>
        /// <param name="enhancedKeyUsage"> Enhanced key usage of the certificate. </param>
        /// <param name="identityValidationId"></param>
        /// <param name="provisioningState"> Provisioning state of the code signing account. </param>
        /// <param name="status"> Status of the certificate profiles. </param>
        /// <param name="certificates"></param>
        internal CodeSigningCertificateProfileData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, CertificateProfileType profileType, CertificateRotationPolicy rotationPolicy, string commonName, string organization, string organizationUnit, string streetAddress, bool? doesIncludeStreetAddress, string state, bool? doesIncludeState, string city, bool? doesIncludeCity, string postalCode, bool? doesIncludePostalCode, string country, bool? doesIncludeCountry, string enhancedKeyUsage, string identityValidationId, CodeSigningProvisioningState? provisioningState, CertificateProfileStatus? status, IReadOnlyList<CodeSigningCertificate> certificates) : base(id, name, resourceType, systemData)
        {
            ProfileType = profileType;
            RotationPolicy = rotationPolicy;
            CommonName = commonName;
            Organization = organization;
            OrganizationUnit = organizationUnit;
            StreetAddress = streetAddress;
            DoesIncludeStreetAddress = doesIncludeStreetAddress;
            State = state;
            DoesIncludeState = doesIncludeState;
            City = city;
            DoesIncludeCity = doesIncludeCity;
            PostalCode = postalCode;
            DoesIncludePostalCode = doesIncludePostalCode;
            Country = country;
            DoesIncludeCountry = doesIncludeCountry;
            EnhancedKeyUsage = enhancedKeyUsage;
            IdentityValidationId = identityValidationId;
            ProvisioningState = provisioningState;
            Status = status;
            Certificates = certificates;
        }

        /// <summary> Profile type of the certificate. </summary>
        public CertificateProfileType ProfileType { get; set; }
        /// <summary> Rotation policy of the certificate. </summary>
        public CertificateRotationPolicy RotationPolicy { get; set; }
        /// <summary> Used as CN in the subject name of the certificate. </summary>
        public string CommonName { get; set; }
        /// <summary> Used as O in the subject name of the certificate. </summary>
        public string Organization { get; set; }
        /// <summary> Used as OU in the subject name of the private trust certificate. </summary>
        public string OrganizationUnit { get; set; }
        /// <summary> Gets the street address. </summary>
        public string StreetAddress { get; }
        /// <summary> Whether to include in the public trust certificate subject name. </summary>
        public bool? DoesIncludeStreetAddress { get; set; }
        /// <summary> Gets the state. </summary>
        public string State { get; }
        /// <summary> Whether to include in the public trust or private trust certificate subject name. </summary>
        public bool? DoesIncludeState { get; set; }
        /// <summary> Gets the city. </summary>
        public string City { get; }
        /// <summary> Whether to include in the public trust or private trust certificate subject name. </summary>
        public bool? DoesIncludeCity { get; set; }
        /// <summary> Gets the postal code. </summary>
        public string PostalCode { get; }
        /// <summary> Whether to include in the public trust certificate subject name. </summary>
        public bool? DoesIncludePostalCode { get; set; }
        /// <summary> Gets the country. </summary>
        public string Country { get; }
        /// <summary> Whether to include in the public trust or private trust certificate subject name. </summary>
        public bool? DoesIncludeCountry { get; set; }
        /// <summary> Enhanced key usage of the certificate. </summary>
        public string EnhancedKeyUsage { get; }
        /// <summary> Gets the identity validation id. </summary>
        public string IdentityValidationId { get; }
        /// <summary> Provisioning state of the code signing account. </summary>
        public CodeSigningProvisioningState? ProvisioningState { get; }
        /// <summary> Status of the certificate profiles. </summary>
        public CertificateProfileStatus? Status { get; }
        /// <summary> Gets the certificates. </summary>
        public IReadOnlyList<CodeSigningCertificate> Certificates { get; }
    }
}
