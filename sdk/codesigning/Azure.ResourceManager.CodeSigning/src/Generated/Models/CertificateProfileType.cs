// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.CodeSigning.Models
{
    /// <summary> Profile type of the certificate. </summary>
    public readonly partial struct CertificateProfileType : IEquatable<CertificateProfileType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CertificateProfileType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CertificateProfileType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PublicTrustValue = "PublicTrust";
        private const string PrivateTrustValue = "PrivateTrust";
        private const string PrivateTrustCIPolicyValue = "PrivateTrustCIPolicy";
        private const string VbsEnclaveValue = "VBSEnclave";
        private const string PublicTrustTestValue = "PublicTrustTest";

        /// <summary> PublicTrust. </summary>
        public static CertificateProfileType PublicTrust { get; } = new CertificateProfileType(PublicTrustValue);
        /// <summary> PrivateTrust. </summary>
        public static CertificateProfileType PrivateTrust { get; } = new CertificateProfileType(PrivateTrustValue);
        /// <summary> PrivateTrustCIPolicy. </summary>
        public static CertificateProfileType PrivateTrustCIPolicy { get; } = new CertificateProfileType(PrivateTrustCIPolicyValue);
        /// <summary> VBSEnclave. </summary>
        public static CertificateProfileType VbsEnclave { get; } = new CertificateProfileType(VbsEnclaveValue);
        /// <summary> PublicTrustTest. </summary>
        public static CertificateProfileType PublicTrustTest { get; } = new CertificateProfileType(PublicTrustTestValue);
        /// <summary> Determines if two <see cref="CertificateProfileType"/> values are the same. </summary>
        public static bool operator ==(CertificateProfileType left, CertificateProfileType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CertificateProfileType"/> values are not the same. </summary>
        public static bool operator !=(CertificateProfileType left, CertificateProfileType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CertificateProfileType"/>. </summary>
        public static implicit operator CertificateProfileType(string value) => new CertificateProfileType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CertificateProfileType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CertificateProfileType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
