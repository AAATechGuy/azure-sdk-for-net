// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Communication.CallingServer
{
    /// <summary> The Tone. </summary>
    public readonly partial struct Tone : IEquatable<Tone>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Tone"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Tone(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ZeroValue = "zero";
        private const string OneValue = "one";
        private const string TwoValue = "two";
        private const string ThreeValue = "three";
        private const string FourValue = "four";
        private const string FiveValue = "five";
        private const string SixValue = "six";
        private const string SevenValue = "seven";
        private const string EightValue = "eight";
        private const string NineValue = "nine";
        private const string AValue = "a";
        private const string BValue = "b";
        private const string CValue = "c";
        private const string DValue = "d";
        private const string PoundValue = "pound";
        private const string AsteriskValue = "asterisk";

        /// <summary> zero. </summary>
        public static Tone Zero { get; } = new Tone(ZeroValue);
        /// <summary> one. </summary>
        public static Tone One { get; } = new Tone(OneValue);
        /// <summary> two. </summary>
        public static Tone Two { get; } = new Tone(TwoValue);
        /// <summary> three. </summary>
        public static Tone Three { get; } = new Tone(ThreeValue);
        /// <summary> four. </summary>
        public static Tone Four { get; } = new Tone(FourValue);
        /// <summary> five. </summary>
        public static Tone Five { get; } = new Tone(FiveValue);
        /// <summary> six. </summary>
        public static Tone Six { get; } = new Tone(SixValue);
        /// <summary> seven. </summary>
        public static Tone Seven { get; } = new Tone(SevenValue);
        /// <summary> eight. </summary>
        public static Tone Eight { get; } = new Tone(EightValue);
        /// <summary> nine. </summary>
        public static Tone Nine { get; } = new Tone(NineValue);
        /// <summary> a. </summary>
        public static Tone A { get; } = new Tone(AValue);
        /// <summary> b. </summary>
        public static Tone B { get; } = new Tone(BValue);
        /// <summary> c. </summary>
        public static Tone C { get; } = new Tone(CValue);
        /// <summary> d. </summary>
        public static Tone D { get; } = new Tone(DValue);
        /// <summary> pound. </summary>
        public static Tone Pound { get; } = new Tone(PoundValue);
        /// <summary> asterisk. </summary>
        public static Tone Asterisk { get; } = new Tone(AsteriskValue);
        /// <summary> Determines if two <see cref="Tone"/> values are the same. </summary>
        public static bool operator ==(Tone left, Tone right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Tone"/> values are not the same. </summary>
        public static bool operator !=(Tone left, Tone right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Tone"/>. </summary>
        public static implicit operator Tone(string value) => new Tone(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Tone other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Tone other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
