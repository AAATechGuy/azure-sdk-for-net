// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Communication.JobRouter;
using Azure.Core;

namespace Azure.Communication.SkillsRegistry
{
    public partial class IntentParameter : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Type))
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(Type.Value.ToString());
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsCollectionDefined(Enum))
            {
                writer.WritePropertyName("enum"u8);
                writer.WriteStartArray();
                foreach (var item in Enum)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Required))
            {
                writer.WritePropertyName("required"u8);
                writer.WriteBooleanValue(Required.Value);
            }
            if (Optional.IsDefined(DefaultValue))
            {
                writer.WritePropertyName("defaultValue"u8);
                writer.WriteStringValue(DefaultValue);
            }
            if (Optional.IsDefined(EscalationOptions))
            {
                writer.WritePropertyName("escalationOptions"u8);
                writer.WriteObjectValue(EscalationOptions);
            }
            writer.WriteEndObject();
        }

        internal static IntentParameter DeserializeIntentParameter(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<RouterIntentParameterType> type = default;
            Optional<string> description = default;
            Optional<IList<string>> @enum = default;
            Optional<bool> required = default;
            Optional<string> defaultValue = default;
            Optional<EscalationOptions> escalationOptions = default;
            Optional<string> generatedDescription = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type = new RouterIntentParameterType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enum"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    @enum = array;
                    continue;
                }
                if (property.NameEquals("required"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    required = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("defaultValue"u8))
                {
                    defaultValue = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("escalationOptions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    escalationOptions = EscalationOptions.DeserializeEscalationOptions(property.Value);
                    continue;
                }
                if (property.NameEquals("generatedDescription"u8))
                {
                    generatedDescription = property.Value.GetString();
                    continue;
                }
            }
            return new IntentParameter(Optional.ToNullable(type), description.Value, Optional.ToList(@enum), Optional.ToNullable(required), defaultValue.Value, escalationOptions.Value, generatedDescription.Value);
        }
    }
}
