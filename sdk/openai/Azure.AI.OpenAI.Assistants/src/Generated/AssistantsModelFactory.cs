// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.OpenAI.Assistants
{
    /// <summary> Model factory for models. </summary>
    public static partial class AssistantsModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Assistants.RunError"/>. </summary>
        /// <param name="code"> The status for the error. </param>
        /// <param name="message"> The human-readable text associated with the error. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="code"/> or <paramref name="message"/> is null. </exception>
        /// <returns> A new <see cref="Assistants.RunError"/> instance for mocking. </returns>
        public static RunError RunError(string code = null, string message = null)
        {
            if (code == null)
            {
                throw new ArgumentNullException(nameof(code));
            }
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            return new RunError(code, message);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.RunStepError"/>. </summary>
        /// <param name="code"> The error code for this error. </param>
        /// <param name="message"> The human-readable text associated with this error. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="message"/> is null. </exception>
        /// <returns> A new <see cref="Assistants.RunStepError"/> instance for mocking. </returns>
        public static RunStepError RunStepError(RunStepErrorCode code = default, string message = null)
        {
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            return new RunStepError(code, message);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.ToolCall"/>. </summary>
        /// <param name="type"> The object type. </param>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <returns> A new <see cref="Assistants.ToolCall"/> instance for mocking. </returns>
        public static ToolCall ToolCall(string type = null, string id = null)
        {
            return new UnknownToolCall(type, id);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.RetrievalToolCall"/>. </summary>
        /// <param name="id"> The ID of the tool call. This ID must be referenced when you submit tool outputs. </param>
        /// <param name="retrieval"> The key/value pairs produced by the retrieval tool. </param>
        /// <returns> A new <see cref="Assistants.RetrievalToolCall"/> instance for mocking. </returns>
        public static RetrievalToolCall RetrievalToolCall(string id = null, IReadOnlyDictionary<string, string> retrieval = null)
        {
            retrieval ??= new Dictionary<string, string>();

            return new RetrievalToolCall("retrieval", id, retrieval);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.CodeInterpreterLogOutput"/>. </summary>
        /// <param name="logs"> The serialized log output emitted by the code interpreter. </param>
        /// <returns> A new <see cref="Assistants.CodeInterpreterLogOutput"/> instance for mocking. </returns>
        public static CodeInterpreterLogOutput CodeInterpreterLogOutput(string logs = null)
        {
            return new CodeInterpreterLogOutput("logs", logs);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.CodeInterpreterImageOutput"/>. </summary>
        /// <param name="image"> Referential information for the image associated with this output. </param>
        /// <returns> A new <see cref="Assistants.CodeInterpreterImageOutput"/> instance for mocking. </returns>
        public static CodeInterpreterImageOutput CodeInterpreterImageOutput(CodeInterpreterImageReference image = null)
        {
            return new CodeInterpreterImageOutput("image", image);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.CodeInterpreterImageReference"/>. </summary>
        /// <param name="fileId"> The ID of the file associated with this image. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fileId"/> is null. </exception>
        /// <returns> A new <see cref="Assistants.CodeInterpreterImageReference"/> instance for mocking. </returns>
        public static CodeInterpreterImageReference CodeInterpreterImageReference(string fileId = null)
        {
            if (fileId == null)
            {
                throw new ArgumentNullException(nameof(fileId));
            }

            return new CodeInterpreterImageReference(fileId);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.MessageTextAnnotation"/>. </summary>
        /// <param name="type"> The object type. </param>
        /// <param name="text"> The textual content associated with this text annotation item. </param>
        /// <param name="startIndex"> The first text index associated with this text annotation. </param>
        /// <param name="endIndex"> The last text index associated with this text annotation. </param>
        /// <returns> A new <see cref="Assistants.MessageTextAnnotation"/> instance for mocking. </returns>
        public static MessageTextAnnotation MessageTextAnnotation(string type = null, string text = null, int startIndex = default, int endIndex = default)
        {
            return new UnknownMessageTextAnnotation(type, text, startIndex, endIndex);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.RunStepMessageCreationDetails"/>. </summary>
        /// <param name="messageCreation"> Information about the message creation associated with this run step. </param>
        /// <returns> A new <see cref="Assistants.RunStepMessageCreationDetails"/> instance for mocking. </returns>
        public static RunStepMessageCreationDetails RunStepMessageCreationDetails(RunStepMessageCreationReference messageCreation = null)
        {
            return new RunStepMessageCreationDetails(RunStepType.MessageCreation, messageCreation);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.RunStepMessageCreationReference"/>. </summary>
        /// <param name="messageId"> The ID of the message created by this run step. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="messageId"/> is null. </exception>
        /// <returns> A new <see cref="Assistants.RunStepMessageCreationReference"/> instance for mocking. </returns>
        public static RunStepMessageCreationReference RunStepMessageCreationReference(string messageId = null)
        {
            if (messageId == null)
            {
                throw new ArgumentNullException(nameof(messageId));
            }

            return new RunStepMessageCreationReference(messageId);
        }

        /// <summary> Initializes a new instance of <see cref="Assistants.RunStepToolCallDetails"/>. </summary>
        /// <param name="toolCalls"> A list tool call details for this run step. </param>
        /// <returns> A new <see cref="Assistants.RunStepToolCallDetails"/> instance for mocking. </returns>
        public static RunStepToolCallDetails RunStepToolCallDetails(IEnumerable<ToolCall> toolCalls = null)
        {
            toolCalls ??= new List<ToolCall>();

            return new RunStepToolCallDetails(RunStepType.ToolCalls, toolCalls?.ToList());
        }
    }
}
