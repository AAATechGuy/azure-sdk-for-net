// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Developer.DevCenter.Models
{
    /// <summary> An environment definition. </summary>
    public partial class EnvironmentDefinition
    {
        /// <summary> Initializes a new instance of <see cref="EnvironmentDefinition"/>. </summary>
        /// <param name="id"> The ID of the environment definition. </param>
        /// <param name="name"> Name of the environment definition. </param>
        /// <param name="catalogName"> Name of the catalog. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="name"/> or <paramref name="catalogName"/> is null. </exception>
        internal EnvironmentDefinition(string id, string name, string catalogName)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(catalogName, nameof(catalogName));

            Id = id;
            Name = name;
            CatalogName = catalogName;
            Parameters = new ChangeTrackingList<EnvironmentDefinitionParameter>();
        }

        /// <summary> Initializes a new instance of <see cref="EnvironmentDefinition"/>. </summary>
        /// <param name="id"> The ID of the environment definition. </param>
        /// <param name="name"> Name of the environment definition. </param>
        /// <param name="catalogName"> Name of the catalog. </param>
        /// <param name="description"> A short description of the environment definition. </param>
        /// <param name="parameters"> Input parameters passed to an environment. </param>
        /// <param name="parametersSchema"> JSON schema defining the parameters object passed to an environment. </param>
        /// <param name="templatePath"> Path to the Environment Definition entrypoint file. </param>
        internal EnvironmentDefinition(string id, string name, string catalogName, string description, IReadOnlyList<EnvironmentDefinitionParameter> parameters, BinaryData parametersSchema, string templatePath)
        {
            Id = id;
            Name = name;
            CatalogName = catalogName;
            Description = description;
            Parameters = parameters;
            ParametersSchema = parametersSchema;
            TemplatePath = templatePath;
        }

        /// <summary> The ID of the environment definition. </summary>
        public string Id { get; }
        /// <summary> Name of the environment definition. </summary>
        public string Name { get; }
        /// <summary> Name of the catalog. </summary>
        public string CatalogName { get; }
        /// <summary> A short description of the environment definition. </summary>
        public string Description { get; }
        /// <summary> Input parameters passed to an environment. </summary>
        public IReadOnlyList<EnvironmentDefinitionParameter> Parameters { get; }
        /// <summary>
        /// JSON schema defining the parameters object passed to an environment.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData ParametersSchema { get; }
        /// <summary> Path to the Environment Definition entrypoint file. </summary>
        public string TemplatePath { get; }
    }
}
