// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Developer.DevCenter.Models
{
    public partial class EnvironmentDefinition
    {
        internal static EnvironmentDefinition DeserializeEnvironmentDefinition(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string id = default;
            string name = default;
            string catalogName = default;
            Optional<string> description = default;
            Optional<IReadOnlyList<EnvironmentDefinitionParameter>> parameters = default;
            Optional<BinaryData> parametersSchema = default;
            Optional<string> templatePath = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("catalogName"u8))
                {
                    catalogName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("parameters"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EnvironmentDefinitionParameter> array = new List<EnvironmentDefinitionParameter>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EnvironmentDefinitionParameter.DeserializeEnvironmentDefinitionParameter(item));
                    }
                    parameters = array;
                    continue;
                }
                if (property.NameEquals("parametersSchema"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    parametersSchema = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("templatePath"u8))
                {
                    templatePath = property.Value.GetString();
                    continue;
                }
            }
            return new EnvironmentDefinition(id, name, catalogName, description.Value, Optional.ToList(parameters), parametersSchema.Value, templatePath.Value);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static EnvironmentDefinition FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeEnvironmentDefinition(document.RootElement);
        }
    }
}
