<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetPoolAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetPoolAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

Response response = await client.GetPoolAsync("<projectName>", "<poolName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("gracePeriodMinutes").ToString());
Console.WriteLine(result.GetProperty("healthStatus").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Pool</c>:
<code>{
  name: string, # Required. Pool name
  location: string, # Required. Azure region where Dev Boxes in the pool are located
  osType: &quot;Windows&quot;, # Optional. The operating system type of Dev Boxes in this pool
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Hardware settings for the Dev Boxes created in this pool
  hibernateSupport: &quot;Enabled&quot; | &quot;Disabled&quot; | &quot;OsUnsupported&quot;, # Optional. Indicates whether hibernate is enabled/disabled or unknown.
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for Dev Box created in this pool
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Image settings for Dev Boxes create in this pool
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether owners of Dev Boxes in this pool are local administrators on the Dev Boxes.
  stopOnDisconnect: {
    status: &quot;Enabled&quot; | &quot;Disabled&quot;, # Required. Indicates whether the feature to stop the devbox on disconnect once the grace period has lapsed is enabled.
    gracePeriodMinutes: number, # Optional. The specified time in minutes to wait before stopping a Dev Box once disconnect is detected.
  }, # Optional. Stop on disconnect configuration settings for Dev Boxes created in this pool.
  healthStatus: &quot;Unknown&quot; | &quot;Pending&quot; | &quot;Healthy&quot; | &quot;Warning&quot; | &quot;Unhealthy&quot;, # Required. Overall health status of the Pool. Indicates whether or not the Pool is available to create Dev Boxes.
}
</code>

</remarks>
    </member>
    <member name="GetPool(String,String,RequestContext)">
<example>
This sample shows how to call GetPool with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

Response response = client.GetPool("<projectName>", "<poolName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("gracePeriodMinutes").ToString());
Console.WriteLine(result.GetProperty("healthStatus").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Pool</c>:
<code>{
  name: string, # Required. Pool name
  location: string, # Required. Azure region where Dev Boxes in the pool are located
  osType: &quot;Windows&quot;, # Optional. The operating system type of Dev Boxes in this pool
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Hardware settings for the Dev Boxes created in this pool
  hibernateSupport: &quot;Enabled&quot; | &quot;Disabled&quot; | &quot;OsUnsupported&quot;, # Optional. Indicates whether hibernate is enabled/disabled or unknown.
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for Dev Box created in this pool
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Image settings for Dev Boxes create in this pool
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether owners of Dev Boxes in this pool are local administrators on the Dev Boxes.
  stopOnDisconnect: {
    status: &quot;Enabled&quot; | &quot;Disabled&quot;, # Required. Indicates whether the feature to stop the devbox on disconnect once the grace period has lapsed is enabled.
    gracePeriodMinutes: number, # Optional. The specified time in minutes to wait before stopping a Dev Box once disconnect is detected.
  }, # Optional. Stop on disconnect configuration settings for Dev Boxes created in this pool.
  healthStatus: &quot;Unknown&quot; | &quot;Pending&quot; | &quot;Healthy&quot; | &quot;Warning&quot; | &quot;Unhealthy&quot;, # Required. Overall health status of the Pool. Indicates whether or not the Pool is available to create Dev Boxes.
}
</code>

</remarks>
    </member>
    <member name="GetScheduleByPoolAsync(String,String,String,RequestContext)">
<example>
This sample shows how to call GetScheduleByPoolAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

Response response = await client.GetScheduleByPoolAsync("<projectName>", "<poolName>", "<scheduleName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("frequency").ToString());
Console.WriteLine(result.GetProperty("time").ToString());
Console.WriteLine(result.GetProperty("timeZone").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Schedule</c>:
<code>{
  name: string, # Required. Display name for the Schedule
  type: &quot;StopDevBox&quot;, # Required. Supported type this scheduled task represents.
  frequency: &quot;Daily&quot;, # Required. The frequency of this scheduled task.
  time: string, # Required. The target time to trigger the action. The format is HH:MM.
  timeZone: string, # Required. The IANA timezone id at which the schedule should execute.
}
</code>

</remarks>
    </member>
    <member name="GetScheduleByPool(String,String,String,RequestContext)">
<example>
This sample shows how to call GetScheduleByPool with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

Response response = client.GetScheduleByPool("<projectName>", "<poolName>", "<scheduleName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("frequency").ToString());
Console.WriteLine(result.GetProperty("time").ToString());
Console.WriteLine(result.GetProperty("timeZone").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Schedule</c>:
<code>{
  name: string, # Required. Display name for the Schedule
  type: &quot;StopDevBox&quot;, # Required. Supported type this scheduled task represents.
  frequency: &quot;Daily&quot;, # Required. The frequency of this scheduled task.
  time: string, # Required. The target time to trigger the action. The format is HH:MM.
  timeZone: string, # Required. The IANA timezone id at which the schedule should execute.
}
</code>

</remarks>
    </member>
    <member name="GetDevBoxByUserAsync(String,String,String,RequestContext)">
<example>
This sample shows how to call GetDevBoxByUserAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

Response response = await client.GetDevBoxByUserAsync("<projectName>", "<devBoxName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("poolName").ToString());
]]></code>
This sample shows how to call GetDevBoxByUserAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

Response response = await client.GetDevBoxByUserAsync("<projectName>", "<devBoxName>", <me>);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("actionState").ToString());
Console.WriteLine(result.GetProperty("powerState").ToString());
Console.WriteLine(result.GetProperty("uniqueId").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DevBox</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  hibernateSupport: &quot;Enabled&quot; | &quot;Disabled&quot; | &quot;OsUnsupported&quot;, # Optional. Indicates whether hibernate is enabled/disabled or unknown.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: &quot;Unknown&quot; | &quot;Running&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  error: {
    code: string, # Required. An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    message: string, # Required. A message describing the error, intended to be suitable for display in a user interface.
    target: string, # Optional. The target of the particular error. For example, the name of the property in error.
    details: [CloudErrorBody], # Optional. A list of additional details about the error.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
  user: string, # Optional. The AAD object id of the user this Dev Box is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box&apos;s hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code>

</remarks>
    </member>
    <member name="GetDevBoxByUser(String,String,String,RequestContext)">
<example>
This sample shows how to call GetDevBoxByUser with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

Response response = client.GetDevBoxByUser("<projectName>", "<devBoxName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("poolName").ToString());
]]></code>
This sample shows how to call GetDevBoxByUser with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

Response response = client.GetDevBoxByUser("<projectName>", "<devBoxName>", <me>);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("actionState").ToString());
Console.WriteLine(result.GetProperty("powerState").ToString());
Console.WriteLine(result.GetProperty("uniqueId").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DevBox</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  hibernateSupport: &quot;Enabled&quot; | &quot;Disabled&quot; | &quot;OsUnsupported&quot;, # Optional. Indicates whether hibernate is enabled/disabled or unknown.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: &quot;Unknown&quot; | &quot;Running&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  error: {
    code: string, # Required. An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    message: string, # Required. A message describing the error, intended to be suitable for display in a user interface.
    target: string, # Optional. The target of the particular error. For example, the name of the property in error.
    details: [CloudErrorBody], # Optional. A list of additional details about the error.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
  user: string, # Optional. The AAD object id of the user this Dev Box is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box&apos;s hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code>

</remarks>
    </member>
    <member name="GetRemoteConnectionAsync(String,String,String,RequestContext)">
<example>
This sample shows how to call GetRemoteConnectionAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

Response response = await client.GetRemoteConnectionAsync("<projectName>", "<devBoxName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetRemoteConnectionAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

Response response = await client.GetRemoteConnectionAsync("<projectName>", "<devBoxName>", <me>);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("webUrl").ToString());
Console.WriteLine(result.GetProperty("rdpConnectionUrl").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>RemoteConnection</c>:
<code>{
  webUrl: string, # Optional. URL to open a browser based RDP session.
  rdpConnectionUrl: string, # Optional. Link to open a Remote Desktop session.
}
</code>

</remarks>
    </member>
    <member name="GetRemoteConnection(String,String,String,RequestContext)">
<example>
This sample shows how to call GetRemoteConnection with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

Response response = client.GetRemoteConnection("<projectName>", "<devBoxName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetRemoteConnection with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

Response response = client.GetRemoteConnection("<projectName>", "<devBoxName>", <me>);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("webUrl").ToString());
Console.WriteLine(result.GetProperty("rdpConnectionUrl").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>RemoteConnection</c>:
<code>{
  webUrl: string, # Optional. URL to open a browser based RDP session.
  rdpConnectionUrl: string, # Optional. Link to open a Remote Desktop session.
}
</code>

</remarks>
    </member>
    <member name="GetActionAsync(String,String,String,String,RequestContext)">
<example>
This sample shows how to call GetActionAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

Response response = await client.GetActionAsync("<projectName>", "<devBoxName>", "<actionName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("sourceId").ToString());
]]></code>
This sample shows how to call GetActionAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

Response response = await client.GetActionAsync("<projectName>", "<devBoxName>", "<actionName>", <me>);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("sourceId").ToString());
Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DevBoxAction</c>:
<code>{
  name: string, # Required. The name of the action.
  actionType: &quot;Stop&quot;, # Required. The action that will be taken.
  sourceId: string, # Required. The id of the resource which triggered this action
  suspendedUntil: string (ISO 8601 Format), # Optional. The earliest time that the action could occur (UTC).
  next: {
    scheduledTime: string (ISO 8601 Format), # Required. The time the action will be triggered (UTC).
  }, # Optional. Details about the next run of this action.
}
</code>

</remarks>
    </member>
    <member name="GetAction(String,String,String,String,RequestContext)">
<example>
This sample shows how to call GetAction with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

Response response = client.GetAction("<projectName>", "<devBoxName>", "<actionName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("sourceId").ToString());
]]></code>
This sample shows how to call GetAction with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

Response response = client.GetAction("<projectName>", "<devBoxName>", "<actionName>", <me>);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("sourceId").ToString());
Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DevBoxAction</c>:
<code>{
  name: string, # Required. The name of the action.
  actionType: &quot;Stop&quot;, # Required. The action that will be taken.
  sourceId: string, # Required. The id of the resource which triggered this action
  suspendedUntil: string (ISO 8601 Format), # Optional. The earliest time that the action could occur (UTC).
  next: {
    scheduledTime: string (ISO 8601 Format), # Required. The time the action will be triggered (UTC).
  }, # Optional. Details about the next run of this action.
}
</code>

</remarks>
    </member>
    <member name="SkipActionAsync(String,String,String,String,RequestContext)">
<example>
This sample shows how to call SkipActionAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

Response response = await client.SkipActionAsync("<projectName>", "<devBoxName>", "<actionName>");
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call SkipActionAsync with all parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

Response response = await client.SkipActionAsync("<projectName>", "<devBoxName>", "<actionName>", <me>);
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="SkipAction(String,String,String,String,RequestContext)">
<example>
This sample shows how to call SkipAction with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

Response response = client.SkipAction("<projectName>", "<devBoxName>", "<actionName>");
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call SkipAction with all parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

Response response = client.SkipAction("<projectName>", "<devBoxName>", "<actionName>", <me>);
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DelayActionAsync(String,String,String,DateTimeOffset,String,RequestContext)">
<example>
This sample shows how to call DelayActionAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

Response response = await client.DelayActionAsync("<projectName>", "<devBoxName>", "<actionName>", DateTimeOffset.UtcNow);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("sourceId").ToString());
]]></code>
This sample shows how to call DelayActionAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

Response response = await client.DelayActionAsync("<projectName>", "<devBoxName>", "<actionName>", DateTimeOffset.UtcNow, <me>);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("sourceId").ToString());
Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DevBoxAction</c>:
<code>{
  name: string, # Required. The name of the action.
  actionType: &quot;Stop&quot;, # Required. The action that will be taken.
  sourceId: string, # Required. The id of the resource which triggered this action
  suspendedUntil: string (ISO 8601 Format), # Optional. The earliest time that the action could occur (UTC).
  next: {
    scheduledTime: string (ISO 8601 Format), # Required. The time the action will be triggered (UTC).
  }, # Optional. Details about the next run of this action.
}
</code>

</remarks>
    </member>
    <member name="DelayAction(String,String,String,DateTimeOffset,String,RequestContext)">
<example>
This sample shows how to call DelayAction with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

Response response = client.DelayAction("<projectName>", "<devBoxName>", "<actionName>", DateTimeOffset.UtcNow);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("sourceId").ToString());
]]></code>
This sample shows how to call DelayAction with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

Response response = client.DelayAction("<projectName>", "<devBoxName>", "<actionName>", DateTimeOffset.UtcNow, <me>);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("sourceId").ToString());
Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DevBoxAction</c>:
<code>{
  name: string, # Required. The name of the action.
  actionType: &quot;Stop&quot;, # Required. The action that will be taken.
  sourceId: string, # Required. The id of the resource which triggered this action
  suspendedUntil: string (ISO 8601 Format), # Optional. The earliest time that the action could occur (UTC).
  next: {
    scheduledTime: string (ISO 8601 Format), # Required. The time the action will be triggered (UTC).
  }, # Optional. Details about the next run of this action.
}
</code>

</remarks>
    </member>
    <member name="GetPoolsAsync(String,Int32,String,RequestContext)">
<example>
This sample shows how to call GetPoolsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

await foreach (var data in client.GetPoolsAsync("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("healthStatus").ToString());
}
]]></code>
This sample shows how to call GetPoolsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

await foreach (var data in client.GetPoolsAsync("<projectName>", 1234, "<filter>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("osType").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
    Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result.GetProperty("localAdministrator").ToString());
    Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("gracePeriodMinutes").ToString());
    Console.WriteLine(result.GetProperty("healthStatus").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>PoolListResultValue</c>:
<code>{
  name: string, # Required. Pool name
  location: string, # Required. Azure region where Dev Boxes in the pool are located
  osType: &quot;Windows&quot;, # Optional. The operating system type of Dev Boxes in this pool
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Hardware settings for the Dev Boxes created in this pool
  hibernateSupport: &quot;Enabled&quot; | &quot;Disabled&quot; | &quot;OsUnsupported&quot;, # Optional. Indicates whether hibernate is enabled/disabled or unknown.
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for Dev Box created in this pool
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Image settings for Dev Boxes create in this pool
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether owners of Dev Boxes in this pool are local administrators on the Dev Boxes.
  stopOnDisconnect: {
    status: &quot;Enabled&quot; | &quot;Disabled&quot;, # Required. Indicates whether the feature to stop the devbox on disconnect once the grace period has lapsed is enabled.
    gracePeriodMinutes: number, # Optional. The specified time in minutes to wait before stopping a Dev Box once disconnect is detected.
  }, # Optional. Stop on disconnect configuration settings for Dev Boxes created in this pool.
  healthStatus: &quot;Unknown&quot; | &quot;Pending&quot; | &quot;Healthy&quot; | &quot;Warning&quot; | &quot;Unhealthy&quot;, # Required. Overall health status of the Pool. Indicates whether or not the Pool is available to create Dev Boxes.
}
</code>

</remarks>
    </member>
    <member name="GetPools(String,Int32,String,RequestContext)">
<example>
This sample shows how to call GetPools with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

foreach (var data in client.GetPools("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("healthStatus").ToString());
}
]]></code>
This sample shows how to call GetPools with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

foreach (var data in client.GetPools("<projectName>", 1234, "<filter>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("osType").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
    Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result.GetProperty("localAdministrator").ToString());
    Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("gracePeriodMinutes").ToString());
    Console.WriteLine(result.GetProperty("healthStatus").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>PoolListResultValue</c>:
<code>{
  name: string, # Required. Pool name
  location: string, # Required. Azure region where Dev Boxes in the pool are located
  osType: &quot;Windows&quot;, # Optional. The operating system type of Dev Boxes in this pool
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Hardware settings for the Dev Boxes created in this pool
  hibernateSupport: &quot;Enabled&quot; | &quot;Disabled&quot; | &quot;OsUnsupported&quot;, # Optional. Indicates whether hibernate is enabled/disabled or unknown.
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for Dev Box created in this pool
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Image settings for Dev Boxes create in this pool
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether owners of Dev Boxes in this pool are local administrators on the Dev Boxes.
  stopOnDisconnect: {
    status: &quot;Enabled&quot; | &quot;Disabled&quot;, # Required. Indicates whether the feature to stop the devbox on disconnect once the grace period has lapsed is enabled.
    gracePeriodMinutes: number, # Optional. The specified time in minutes to wait before stopping a Dev Box once disconnect is detected.
  }, # Optional. Stop on disconnect configuration settings for Dev Boxes created in this pool.
  healthStatus: &quot;Unknown&quot; | &quot;Pending&quot; | &quot;Healthy&quot; | &quot;Warning&quot; | &quot;Unhealthy&quot;, # Required. Overall health status of the Pool. Indicates whether or not the Pool is available to create Dev Boxes.
}
</code>

</remarks>
    </member>
    <member name="GetSchedulesByPoolAsync(String,String,Int32,String,RequestContext)">
<example>
This sample shows how to call GetSchedulesByPoolAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

await foreach (var data in client.GetSchedulesByPoolAsync("<projectName>", "<poolName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("frequency").ToString());
    Console.WriteLine(result.GetProperty("time").ToString());
    Console.WriteLine(result.GetProperty("timeZone").ToString());
}
]]></code>
This sample shows how to call GetSchedulesByPoolAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

await foreach (var data in client.GetSchedulesByPoolAsync("<projectName>", "<poolName>", 1234, "<filter>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("frequency").ToString());
    Console.WriteLine(result.GetProperty("time").ToString());
    Console.WriteLine(result.GetProperty("timeZone").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>ScheduleListResultValue</c>:
<code>{
  name: string, # Required. Display name for the Schedule
  type: &quot;StopDevBox&quot;, # Required. Supported type this scheduled task represents.
  frequency: &quot;Daily&quot;, # Required. The frequency of this scheduled task.
  time: string, # Required. The target time to trigger the action. The format is HH:MM.
  timeZone: string, # Required. The IANA timezone id at which the schedule should execute.
}
</code>

</remarks>
    </member>
    <member name="GetSchedulesByPool(String,String,Int32,String,RequestContext)">
<example>
This sample shows how to call GetSchedulesByPool with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

foreach (var data in client.GetSchedulesByPool("<projectName>", "<poolName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("frequency").ToString());
    Console.WriteLine(result.GetProperty("time").ToString());
    Console.WriteLine(result.GetProperty("timeZone").ToString());
}
]]></code>
This sample shows how to call GetSchedulesByPool with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

foreach (var data in client.GetSchedulesByPool("<projectName>", "<poolName>", 1234, "<filter>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("frequency").ToString());
    Console.WriteLine(result.GetProperty("time").ToString());
    Console.WriteLine(result.GetProperty("timeZone").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>ScheduleListResultValue</c>:
<code>{
  name: string, # Required. Display name for the Schedule
  type: &quot;StopDevBox&quot;, # Required. Supported type this scheduled task represents.
  frequency: &quot;Daily&quot;, # Required. The frequency of this scheduled task.
  time: string, # Required. The target time to trigger the action. The format is HH:MM.
  timeZone: string, # Required. The IANA timezone id at which the schedule should execute.
}
</code>

</remarks>
    </member>
    <member name="GetDevBoxesByUserAsync(String,String,String,Int32,RequestContext)">
<example>
This sample shows how to call GetDevBoxesByUserAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

await foreach (var data in client.GetDevBoxesByUserAsync("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("poolName").ToString());
}
]]></code>
This sample shows how to call GetDevBoxesByUserAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

await foreach (var data in client.GetDevBoxesByUserAsync("<projectName>", <me>, "<filter>", 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("poolName").ToString());
    Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("actionState").ToString());
    Console.WriteLine(result.GetProperty("powerState").ToString());
    Console.WriteLine(result.GetProperty("uniqueId").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("osType").ToString());
    Console.WriteLine(result.GetProperty("user").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("localAdministrator").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DevBoxListResultValue</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  hibernateSupport: &quot;Enabled&quot; | &quot;Disabled&quot; | &quot;OsUnsupported&quot;, # Optional. Indicates whether hibernate is enabled/disabled or unknown.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: &quot;Unknown&quot; | &quot;Running&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  error: {
    code: string, # Required. An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    message: string, # Required. A message describing the error, intended to be suitable for display in a user interface.
    target: string, # Optional. The target of the particular error. For example, the name of the property in error.
    details: [CloudErrorBody], # Optional. A list of additional details about the error.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
  user: string, # Optional. The AAD object id of the user this Dev Box is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box&apos;s hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code>

</remarks>
    </member>
    <member name="GetDevBoxesByUser(String,String,String,Int32,RequestContext)">
<example>
This sample shows how to call GetDevBoxesByUser with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

foreach (var data in client.GetDevBoxesByUser("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("poolName").ToString());
}
]]></code>
This sample shows how to call GetDevBoxesByUser with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

foreach (var data in client.GetDevBoxesByUser("<projectName>", <me>, "<filter>", 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("poolName").ToString());
    Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("actionState").ToString());
    Console.WriteLine(result.GetProperty("powerState").ToString());
    Console.WriteLine(result.GetProperty("uniqueId").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("osType").ToString());
    Console.WriteLine(result.GetProperty("user").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("localAdministrator").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DevBoxListResultValue</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  hibernateSupport: &quot;Enabled&quot; | &quot;Disabled&quot; | &quot;OsUnsupported&quot;, # Optional. Indicates whether hibernate is enabled/disabled or unknown.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: &quot;Unknown&quot; | &quot;Running&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  error: {
    code: string, # Required. An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    message: string, # Required. A message describing the error, intended to be suitable for display in a user interface.
    target: string, # Optional. The target of the particular error. For example, the name of the property in error.
    details: [CloudErrorBody], # Optional. A list of additional details about the error.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
  user: string, # Optional. The AAD object id of the user this Dev Box is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box&apos;s hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code>

</remarks>
    </member>
    <member name="GetActionsAsync(String,String,String,RequestContext)">
<example>
This sample shows how to call GetActionsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

await foreach (var data in client.GetActionsAsync("<projectName>", "<devBoxName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("actionType").ToString());
    Console.WriteLine(result.GetProperty("sourceId").ToString());
}
]]></code>
This sample shows how to call GetActionsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

await foreach (var data in client.GetActionsAsync("<projectName>", "<devBoxName>", <me>))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("actionType").ToString());
    Console.WriteLine(result.GetProperty("sourceId").ToString());
    Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
    Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DevBoxActionsListResultValue</c>:
<code>{
  name: string, # Required. The name of the action.
  actionType: &quot;Stop&quot;, # Required. The action that will be taken.
  sourceId: string, # Required. The id of the resource which triggered this action
  suspendedUntil: string (ISO 8601 Format), # Optional. The earliest time that the action could occur (UTC).
  next: {
    scheduledTime: string (ISO 8601 Format), # Required. The time the action will be triggered (UTC).
  }, # Optional. Details about the next run of this action.
}
</code>

</remarks>
    </member>
    <member name="GetActions(String,String,String,RequestContext)">
<example>
This sample shows how to call GetActions with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

foreach (var data in client.GetActions("<projectName>", "<devBoxName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("actionType").ToString());
    Console.WriteLine(result.GetProperty("sourceId").ToString());
}
]]></code>
This sample shows how to call GetActions with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

foreach (var data in client.GetActions("<projectName>", "<devBoxName>", <me>))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("actionType").ToString());
    Console.WriteLine(result.GetProperty("sourceId").ToString());
    Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
    Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DevBoxActionsListResultValue</c>:
<code>{
  name: string, # Required. The name of the action.
  actionType: &quot;Stop&quot;, # Required. The action that will be taken.
  sourceId: string, # Required. The id of the resource which triggered this action
  suspendedUntil: string (ISO 8601 Format), # Optional. The earliest time that the action could occur (UTC).
  next: {
    scheduledTime: string (ISO 8601 Format), # Required. The time the action will be triggered (UTC).
  }, # Optional. Details about the next run of this action.
}
</code>

</remarks>
    </member>
    <member name="DelayActionsAsync(String,String,DateTimeOffset,String,RequestContext)">
<example>
This sample shows how to call DelayActionsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

await foreach (var data in client.DelayActionsAsync("<projectName>", "<devBoxName>", DateTimeOffset.UtcNow))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("result").ToString());
}
]]></code>
This sample shows how to call DelayActionsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

await foreach (var data in client.DelayActionsAsync("<projectName>", "<devBoxName>", DateTimeOffset.UtcNow, <me>))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("result").ToString());
    Console.WriteLine(result.GetProperty("action").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("action").GetProperty("actionType").ToString());
    Console.WriteLine(result.GetProperty("action").GetProperty("sourceId").ToString());
    Console.WriteLine(result.GetProperty("action").GetProperty("suspendedUntil").ToString());
    Console.WriteLine(result.GetProperty("action").GetProperty("next").GetProperty("scheduledTime").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DevBoxActionsDelayMultipleResultValue</c>:
<code>{
  name: string, # Required. The name of the action.
  result: &quot;Succeeded&quot; | &quot;Failed&quot;, # Required. The result of the delay operation on this action.
  action: {
    name: string, # Required. The name of the action.
    actionType: &quot;Stop&quot;, # Required. The action that will be taken.
    sourceId: string, # Required. The id of the resource which triggered this action
    suspendedUntil: string (ISO 8601 Format), # Optional. The earliest time that the action could occur (UTC).
    next: {
      scheduledTime: string (ISO 8601 Format), # Required. The time the action will be triggered (UTC).
    }, # Optional. Details about the next run of this action.
  }, # Optional. The delayed action
  error: {
    code: string, # Required. An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    message: string, # Required. A message describing the error, intended to be suitable for display in a user interface.
    target: string, # Optional. The target of the particular error. For example, the name of the property in error.
    details: [CloudErrorBody], # Optional. A list of additional details about the error.
  }, # Optional. Information about the error that occurred. Only populated on error.
}
</code>

</remarks>
    </member>
    <member name="DelayActions(String,String,DateTimeOffset,String,RequestContext)">
<example>
This sample shows how to call DelayActions with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

foreach (var data in client.DelayActions("<projectName>", "<devBoxName>", DateTimeOffset.UtcNow))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("result").ToString());
}
]]></code>
This sample shows how to call DelayActions with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

foreach (var data in client.DelayActions("<projectName>", "<devBoxName>", DateTimeOffset.UtcNow, <me>))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("result").ToString());
    Console.WriteLine(result.GetProperty("action").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("action").GetProperty("actionType").ToString());
    Console.WriteLine(result.GetProperty("action").GetProperty("sourceId").ToString());
    Console.WriteLine(result.GetProperty("action").GetProperty("suspendedUntil").ToString());
    Console.WriteLine(result.GetProperty("action").GetProperty("next").GetProperty("scheduledTime").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DevBoxActionsDelayMultipleResultValue</c>:
<code>{
  name: string, # Required. The name of the action.
  result: &quot;Succeeded&quot; | &quot;Failed&quot;, # Required. The result of the delay operation on this action.
  action: {
    name: string, # Required. The name of the action.
    actionType: &quot;Stop&quot;, # Required. The action that will be taken.
    sourceId: string, # Required. The id of the resource which triggered this action
    suspendedUntil: string (ISO 8601 Format), # Optional. The earliest time that the action could occur (UTC).
    next: {
      scheduledTime: string (ISO 8601 Format), # Required. The time the action will be triggered (UTC).
    }, # Optional. Details about the next run of this action.
  }, # Optional. The delayed action
  error: {
    code: string, # Required. An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    message: string, # Required. A message describing the error, intended to be suitable for display in a user interface.
    target: string, # Optional. The target of the particular error. For example, the name of the property in error.
    details: [CloudErrorBody], # Optional. A list of additional details about the error.
  }, # Optional. Information about the error that occurred. Only populated on error.
}
</code>

</remarks>
    </member>
    <member name="CreateDevBoxAsync(WaitUntil,String,String,RequestContent,String,RequestContext)">
<example>
This sample shows how to call CreateDevBoxAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

var data = new {
    poolName = "<poolName>",
};

var operation = await client.CreateDevBoxAsync(WaitUntil.Completed, "<projectName>", "<devBoxName>", RequestContent.Create(data));

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("poolName").ToString());
]]></code>
This sample shows how to call CreateDevBoxAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

var data = new {
    poolName = "<poolName>",
    localAdministrator = "Enabled",
};

var operation = await client.CreateDevBoxAsync(WaitUntil.Completed, "<projectName>", "<devBoxName>", RequestContent.Create(data), <me>);

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("actionState").ToString());
Console.WriteLine(result.GetProperty("powerState").ToString());
Console.WriteLine(result.GetProperty("uniqueId").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>DevBox</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  hibernateSupport: &quot;Enabled&quot; | &quot;Disabled&quot; | &quot;OsUnsupported&quot;, # Optional. Indicates whether hibernate is enabled/disabled or unknown.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: &quot;Unknown&quot; | &quot;Running&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  error: {
    code: string, # Required. An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    message: string, # Required. A message describing the error, intended to be suitable for display in a user interface.
    target: string, # Optional. The target of the particular error. For example, the name of the property in error.
    details: [CloudErrorBody], # Optional. A list of additional details about the error.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
  user: string, # Optional. The AAD object id of the user this Dev Box is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box&apos;s hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code>

Response Body:

Schema for <c>DevBox</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  hibernateSupport: &quot;Enabled&quot; | &quot;Disabled&quot; | &quot;OsUnsupported&quot;, # Optional. Indicates whether hibernate is enabled/disabled or unknown.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: &quot;Unknown&quot; | &quot;Running&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  error: {
    code: string, # Required. An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    message: string, # Required. A message describing the error, intended to be suitable for display in a user interface.
    target: string, # Optional. The target of the particular error. For example, the name of the property in error.
    details: [CloudErrorBody], # Optional. A list of additional details about the error.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
  user: string, # Optional. The AAD object id of the user this Dev Box is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box&apos;s hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code>

</remarks>
    </member>
    <member name="CreateDevBox(WaitUntil,String,String,RequestContent,String,RequestContext)">
<example>
This sample shows how to call CreateDevBox with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

var data = new {
    poolName = "<poolName>",
};

var operation = client.CreateDevBox(WaitUntil.Completed, "<projectName>", "<devBoxName>", RequestContent.Create(data));

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("poolName").ToString());
]]></code>
This sample shows how to call CreateDevBox with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

var data = new {
    poolName = "<poolName>",
    localAdministrator = "Enabled",
};

var operation = client.CreateDevBox(WaitUntil.Completed, "<projectName>", "<devBoxName>", RequestContent.Create(data), <me>);

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("actionState").ToString());
Console.WriteLine(result.GetProperty("powerState").ToString());
Console.WriteLine(result.GetProperty("uniqueId").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>DevBox</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  hibernateSupport: &quot;Enabled&quot; | &quot;Disabled&quot; | &quot;OsUnsupported&quot;, # Optional. Indicates whether hibernate is enabled/disabled or unknown.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: &quot;Unknown&quot; | &quot;Running&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  error: {
    code: string, # Required. An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    message: string, # Required. A message describing the error, intended to be suitable for display in a user interface.
    target: string, # Optional. The target of the particular error. For example, the name of the property in error.
    details: [CloudErrorBody], # Optional. A list of additional details about the error.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
  user: string, # Optional. The AAD object id of the user this Dev Box is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box&apos;s hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code>

Response Body:

Schema for <c>DevBox</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  hibernateSupport: &quot;Enabled&quot; | &quot;Disabled&quot; | &quot;OsUnsupported&quot;, # Optional. Indicates whether hibernate is enabled/disabled or unknown.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: &quot;Unknown&quot; | &quot;Running&quot; | &quot;Deallocated&quot; | &quot;PoweredOff&quot; | &quot;Hibernated&quot;, # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  error: {
    code: string, # Required. An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    message: string, # Required. A message describing the error, intended to be suitable for display in a user interface.
    target: string, # Optional. The target of the particular error. For example, the name of the property in error.
    details: [CloudErrorBody], # Optional. A list of additional details about the error.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: &quot;Windows&quot;, # Optional. The operating system type of this Dev Box.
  user: string, # Optional. The AAD object id of the user this Dev Box is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box&apos;s hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code>

</remarks>
    </member>
    <member name="DeleteDevBoxAsync(WaitUntil,String,String,String,RequestContext)">
<example>
This sample shows how to call DeleteDevBoxAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

var operation = await client.DeleteDevBoxAsync(WaitUntil.Completed, "<projectName>", "<devBoxName>");

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call DeleteDevBoxAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

var operation = await client.DeleteDevBoxAsync(WaitUntil.Completed, "<projectName>", "<devBoxName>", <me>);

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("properties").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>OperationStatus</c>:
<code>{
  id: string, # Optional. Fully qualified ID for the operation status.
  name: string, # Optional. The operation id name
  status: string, # Required. Provisioning state of the resource.
  resourceId: string, # Optional. The id of the resource.
  startTime: string (ISO 8601 Format), # Optional. The start time of the operation
  endTime: string (ISO 8601 Format), # Optional. The end time of the operation
  percentComplete: number, # Optional. Percent of the operation that is complete
  properties: AnyObject, # Optional. Custom operation properties, populated only for a successful operation.
  error: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Operation Error message
}
</code>

</remarks>
    </member>
    <member name="DeleteDevBox(WaitUntil,String,String,String,RequestContext)">
<example>
This sample shows how to call DeleteDevBox with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

var operation = client.DeleteDevBox(WaitUntil.Completed, "<projectName>", "<devBoxName>");

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call DeleteDevBox with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

var operation = client.DeleteDevBox(WaitUntil.Completed, "<projectName>", "<devBoxName>", <me>);

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("properties").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>OperationStatus</c>:
<code>{
  id: string, # Optional. Fully qualified ID for the operation status.
  name: string, # Optional. The operation id name
  status: string, # Required. Provisioning state of the resource.
  resourceId: string, # Optional. The id of the resource.
  startTime: string (ISO 8601 Format), # Optional. The start time of the operation
  endTime: string (ISO 8601 Format), # Optional. The end time of the operation
  percentComplete: number, # Optional. Percent of the operation that is complete
  properties: AnyObject, # Optional. Custom operation properties, populated only for a successful operation.
  error: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Operation Error message
}
</code>

</remarks>
    </member>
    <member name="StartDevBoxAsync(WaitUntil,String,String,String,RequestContext)">
<example>
This sample shows how to call StartDevBoxAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

var operation = await client.StartDevBoxAsync(WaitUntil.Completed, "<projectName>", "<devBoxName>");

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call StartDevBoxAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

var operation = await client.StartDevBoxAsync(WaitUntil.Completed, "<projectName>", "<devBoxName>", <me>);

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("properties").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>OperationStatus</c>:
<code>{
  id: string, # Optional. Fully qualified ID for the operation status.
  name: string, # Optional. The operation id name
  status: string, # Required. Provisioning state of the resource.
  resourceId: string, # Optional. The id of the resource.
  startTime: string (ISO 8601 Format), # Optional. The start time of the operation
  endTime: string (ISO 8601 Format), # Optional. The end time of the operation
  percentComplete: number, # Optional. Percent of the operation that is complete
  properties: AnyObject, # Optional. Custom operation properties, populated only for a successful operation.
  error: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Operation Error message
}
</code>

</remarks>
    </member>
    <member name="StartDevBox(WaitUntil,String,String,String,RequestContext)">
<example>
This sample shows how to call StartDevBox with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

var operation = client.StartDevBox(WaitUntil.Completed, "<projectName>", "<devBoxName>");

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call StartDevBox with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

var operation = client.StartDevBox(WaitUntil.Completed, "<projectName>", "<devBoxName>", <me>);

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("properties").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>OperationStatus</c>:
<code>{
  id: string, # Optional. Fully qualified ID for the operation status.
  name: string, # Optional. The operation id name
  status: string, # Required. Provisioning state of the resource.
  resourceId: string, # Optional. The id of the resource.
  startTime: string (ISO 8601 Format), # Optional. The start time of the operation
  endTime: string (ISO 8601 Format), # Optional. The end time of the operation
  percentComplete: number, # Optional. Percent of the operation that is complete
  properties: AnyObject, # Optional. Custom operation properties, populated only for a successful operation.
  error: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Operation Error message
}
</code>

</remarks>
    </member>
    <member name="StopDevBoxAsync(WaitUntil,String,String,String,Boolean,RequestContext)">
<example>
This sample shows how to call StopDevBoxAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

var operation = await client.StopDevBoxAsync(WaitUntil.Completed, "<projectName>", "<devBoxName>");

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call StopDevBoxAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

var operation = await client.StopDevBoxAsync(WaitUntil.Completed, "<projectName>", "<devBoxName>", <me>, true);

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("properties").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>OperationStatus</c>:
<code>{
  id: string, # Optional. Fully qualified ID for the operation status.
  name: string, # Optional. The operation id name
  status: string, # Required. Provisioning state of the resource.
  resourceId: string, # Optional. The id of the resource.
  startTime: string (ISO 8601 Format), # Optional. The start time of the operation
  endTime: string (ISO 8601 Format), # Optional. The end time of the operation
  percentComplete: number, # Optional. Percent of the operation that is complete
  properties: AnyObject, # Optional. Custom operation properties, populated only for a successful operation.
  error: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Operation Error message
}
</code>

</remarks>
    </member>
    <member name="StopDevBox(WaitUntil,String,String,String,Boolean,RequestContext)">
<example>
This sample shows how to call StopDevBox with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

var operation = client.StopDevBox(WaitUntil.Completed, "<projectName>", "<devBoxName>");

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call StopDevBox with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

var operation = client.StopDevBox(WaitUntil.Completed, "<projectName>", "<devBoxName>", <me>, true);

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("properties").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>OperationStatus</c>:
<code>{
  id: string, # Optional. Fully qualified ID for the operation status.
  name: string, # Optional. The operation id name
  status: string, # Required. Provisioning state of the resource.
  resourceId: string, # Optional. The id of the resource.
  startTime: string (ISO 8601 Format), # Optional. The start time of the operation
  endTime: string (ISO 8601 Format), # Optional. The end time of the operation
  percentComplete: number, # Optional. Percent of the operation that is complete
  properties: AnyObject, # Optional. Custom operation properties, populated only for a successful operation.
  error: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Operation Error message
}
</code>

</remarks>
    </member>
    <member name="RestartDevBoxAsync(WaitUntil,String,String,String,RequestContext)">
<example>
This sample shows how to call RestartDevBoxAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

var operation = await client.RestartDevBoxAsync(WaitUntil.Completed, "<projectName>", "<devBoxName>");

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call RestartDevBoxAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

var operation = await client.RestartDevBoxAsync(WaitUntil.Completed, "<projectName>", "<devBoxName>", <me>);

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("properties").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>OperationStatus</c>:
<code>{
  id: string, # Optional. Fully qualified ID for the operation status.
  name: string, # Optional. The operation id name
  status: string, # Required. Provisioning state of the resource.
  resourceId: string, # Optional. The id of the resource.
  startTime: string (ISO 8601 Format), # Optional. The start time of the operation
  endTime: string (ISO 8601 Format), # Optional. The end time of the operation
  percentComplete: number, # Optional. Percent of the operation that is complete
  properties: AnyObject, # Optional. Custom operation properties, populated only for a successful operation.
  error: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Operation Error message
}
</code>

</remarks>
    </member>
    <member name="RestartDevBox(WaitUntil,String,String,String,RequestContext)">
<example>
This sample shows how to call RestartDevBox with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

var operation = client.RestartDevBox(WaitUntil.Completed, "<projectName>", "<devBoxName>");

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call RestartDevBox with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevBoxesClient(endpoint, credential);

var operation = client.RestartDevBox(WaitUntil.Completed, "<projectName>", "<devBoxName>", <me>);

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("properties").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>OperationStatus</c>:
<code>{
  id: string, # Optional. Fully qualified ID for the operation status.
  name: string, # Optional. The operation id name
  status: string, # Required. Provisioning state of the resource.
  resourceId: string, # Optional. The id of the resource.
  startTime: string (ISO 8601 Format), # Optional. The start time of the operation
  endTime: string (ISO 8601 Format), # Optional. The end time of the operation
  percentComplete: number, # Optional. Percent of the operation that is complete
  properties: AnyObject, # Optional. Custom operation properties, populated only for a successful operation.
  error: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Operation Error message
}
</code>

</remarks>
    </member>
  </members>
</doc>