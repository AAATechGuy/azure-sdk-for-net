<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetEnvironmentAsync(String,String,String,RequestContext)">
<example>
This sample shows how to call GetEnvironmentAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

Response response = await client.GetEnvironmentAsync("<projectName>", "<environmentName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetEnvironmentAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

Response response = await client.GetEnvironmentAsync("<projectName>", "<environmentName>", <me>);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("parameters").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Environment</c>:
<code>{
  name: string, # Optional. Environment name.
  environmentType: string, # Required. Environment type.
  user: string, # Optional. The AAD object id of the owner of this Environment.
  provisioningState: string, # Optional. The provisioning state of the environment.
  resourceGroupId: string, # Optional. The identifier of the resource group containing the environment&apos;s resources.
  catalogName: string, # Required. Name of the catalog.
  environmentDefinitionName: string, # Required. Name of the environment definition.
  error: {
    code: string, # Required. An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    message: string, # Required. A message describing the error, intended to be suitable for display in a user interface.
    target: string, # Optional. The target of the particular error. For example, the name of the property in error.
    details: [CloudErrorBody], # Optional. A list of additional details about the error.
  }, # Optional. Provisioning error details. Populated only for error states.
  parameters: AnyObject, # Optional. Parameters object for the environment.
}
</code>

</remarks>
    </member>
    <member name="GetEnvironment(String,String,String,RequestContext)">
<example>
This sample shows how to call GetEnvironment with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

Response response = client.GetEnvironment("<projectName>", "<environmentName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetEnvironment with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

Response response = client.GetEnvironment("<projectName>", "<environmentName>", <me>);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("parameters").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Environment</c>:
<code>{
  name: string, # Optional. Environment name.
  environmentType: string, # Required. Environment type.
  user: string, # Optional. The AAD object id of the owner of this Environment.
  provisioningState: string, # Optional. The provisioning state of the environment.
  resourceGroupId: string, # Optional. The identifier of the resource group containing the environment&apos;s resources.
  catalogName: string, # Required. Name of the catalog.
  environmentDefinitionName: string, # Required. Name of the environment definition.
  error: {
    code: string, # Required. An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    message: string, # Required. A message describing the error, intended to be suitable for display in a user interface.
    target: string, # Optional. The target of the particular error. For example, the name of the property in error.
    details: [CloudErrorBody], # Optional. A list of additional details about the error.
  }, # Optional. Provisioning error details. Populated only for error states.
  parameters: AnyObject, # Optional. Parameters object for the environment.
}
</code>

</remarks>
    </member>
    <member name="GetCatalogAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetCatalogAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

Response response = await client.GetCatalogAsync("<projectName>", "<catalogName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Catalog</c>:
<code>{
  name: string, # Required. Name of the catalog.
}
</code>

</remarks>
    </member>
    <member name="GetCatalog(String,String,RequestContext)">
<example>
This sample shows how to call GetCatalog with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

Response response = client.GetCatalog("<projectName>", "<catalogName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Catalog</c>:
<code>{
  name: string, # Required. Name of the catalog.
}
</code>

</remarks>
    </member>
    <member name="GetEnvironmentDefinitionAsync(String,String,String,RequestContext)">
<example>
This sample shows how to call GetEnvironmentDefinitionAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

Response response = await client.GetEnvironmentDefinitionAsync("<projectName>", "<catalogName>", "<definitionName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
Console.WriteLine(result.GetProperty("parametersSchema").ToString());
Console.WriteLine(result.GetProperty("templatePath").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>EnvironmentDefinition</c>:
<code>{
  id: string, # Required. The ID of the environment definition.
  name: string, # Required. Name of the environment definition.
  catalogName: string, # Required. Name of the catalog.
  description: string, # Optional. A short description of the environment definition.
  parameters: [
    {
      id: string, # Required. Unique ID of the parameter
      name: string, # Optional. Display name of the parameter
      description: string, # Optional. Description of the parameter
      default: string, # Optional. Default value of the parameter
      type: &quot;array&quot; | &quot;boolean&quot; | &quot;integer&quot; | &quot;number&quot; | &quot;object&quot; | &quot;string&quot;, # Required. A string of one of the basic JSON types (number, integer, array, object, boolean, string)
      readOnly: boolean, # Optional. Whether or not this parameter is read-only.  If true, default should have a value.
      required: boolean, # Required. Whether or not this parameter is required
      allowed: [string], # Optional. An array of allowed values
    }
  ], # Optional. Input parameters passed to an environment.
  parametersSchema: string, # Optional. JSON schema defining the parameters object passed to an environment.
  templatePath: string, # Optional. Path to the Environment Definition entrypoint file.
}
</code>

</remarks>
    </member>
    <member name="GetEnvironmentDefinition(String,String,String,RequestContext)">
<example>
This sample shows how to call GetEnvironmentDefinition with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

Response response = client.GetEnvironmentDefinition("<projectName>", "<catalogName>", "<definitionName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
Console.WriteLine(result.GetProperty("parametersSchema").ToString());
Console.WriteLine(result.GetProperty("templatePath").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>EnvironmentDefinition</c>:
<code>{
  id: string, # Required. The ID of the environment definition.
  name: string, # Required. Name of the environment definition.
  catalogName: string, # Required. Name of the catalog.
  description: string, # Optional. A short description of the environment definition.
  parameters: [
    {
      id: string, # Required. Unique ID of the parameter
      name: string, # Optional. Display name of the parameter
      description: string, # Optional. Description of the parameter
      default: string, # Optional. Default value of the parameter
      type: &quot;array&quot; | &quot;boolean&quot; | &quot;integer&quot; | &quot;number&quot; | &quot;object&quot; | &quot;string&quot;, # Required. A string of one of the basic JSON types (number, integer, array, object, boolean, string)
      readOnly: boolean, # Optional. Whether or not this parameter is read-only.  If true, default should have a value.
      required: boolean, # Required. Whether or not this parameter is required
      allowed: [string], # Optional. An array of allowed values
    }
  ], # Optional. Input parameters passed to an environment.
  parametersSchema: string, # Optional. JSON schema defining the parameters object passed to an environment.
  templatePath: string, # Optional. Path to the Environment Definition entrypoint file.
}
</code>

</remarks>
    </member>
    <member name="GetAllEnvironmentsAsync(String,Int32,RequestContext)">
<example>
This sample shows how to call GetAllEnvironmentsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

await foreach (var data in client.GetAllEnvironmentsAsync("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("environmentType").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
    Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetAllEnvironmentsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

await foreach (var data in client.GetAllEnvironmentsAsync("<projectName>", 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("environmentType").ToString());
    Console.WriteLine(result.GetProperty("user").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
    Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("parameters").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>EnvironmentListResultValue</c>:
<code>{
  name: string, # Optional. Environment name.
  environmentType: string, # Required. Environment type.
  user: string, # Optional. The AAD object id of the owner of this Environment.
  provisioningState: string, # Optional. The provisioning state of the environment.
  resourceGroupId: string, # Optional. The identifier of the resource group containing the environment&apos;s resources.
  catalogName: string, # Required. Name of the catalog.
  environmentDefinitionName: string, # Required. Name of the environment definition.
  error: {
    code: string, # Required. An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    message: string, # Required. A message describing the error, intended to be suitable for display in a user interface.
    target: string, # Optional. The target of the particular error. For example, the name of the property in error.
    details: [CloudErrorBody], # Optional. A list of additional details about the error.
  }, # Optional. Provisioning error details. Populated only for error states.
  parameters: AnyObject, # Optional. Parameters object for the environment.
}
</code>

</remarks>
    </member>
    <member name="GetAllEnvironments(String,Int32,RequestContext)">
<example>
This sample shows how to call GetAllEnvironments with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

foreach (var data in client.GetAllEnvironments("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("environmentType").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
    Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetAllEnvironments with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

foreach (var data in client.GetAllEnvironments("<projectName>", 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("environmentType").ToString());
    Console.WriteLine(result.GetProperty("user").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
    Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("parameters").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>EnvironmentListResultValue</c>:
<code>{
  name: string, # Optional. Environment name.
  environmentType: string, # Required. Environment type.
  user: string, # Optional. The AAD object id of the owner of this Environment.
  provisioningState: string, # Optional. The provisioning state of the environment.
  resourceGroupId: string, # Optional. The identifier of the resource group containing the environment&apos;s resources.
  catalogName: string, # Required. Name of the catalog.
  environmentDefinitionName: string, # Required. Name of the environment definition.
  error: {
    code: string, # Required. An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    message: string, # Required. A message describing the error, intended to be suitable for display in a user interface.
    target: string, # Optional. The target of the particular error. For example, the name of the property in error.
    details: [CloudErrorBody], # Optional. A list of additional details about the error.
  }, # Optional. Provisioning error details. Populated only for error states.
  parameters: AnyObject, # Optional. Parameters object for the environment.
}
</code>

</remarks>
    </member>
    <member name="GetEnvironmentsAsync(String,String,Int32,RequestContext)">
<example>
This sample shows how to call GetEnvironmentsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

await foreach (var data in client.GetEnvironmentsAsync("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("environmentType").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
    Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetEnvironmentsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

await foreach (var data in client.GetEnvironmentsAsync("<projectName>", <me>, 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("environmentType").ToString());
    Console.WriteLine(result.GetProperty("user").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
    Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("parameters").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>EnvironmentListResultValue</c>:
<code>{
  name: string, # Optional. Environment name.
  environmentType: string, # Required. Environment type.
  user: string, # Optional. The AAD object id of the owner of this Environment.
  provisioningState: string, # Optional. The provisioning state of the environment.
  resourceGroupId: string, # Optional. The identifier of the resource group containing the environment&apos;s resources.
  catalogName: string, # Required. Name of the catalog.
  environmentDefinitionName: string, # Required. Name of the environment definition.
  error: {
    code: string, # Required. An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    message: string, # Required. A message describing the error, intended to be suitable for display in a user interface.
    target: string, # Optional. The target of the particular error. For example, the name of the property in error.
    details: [CloudErrorBody], # Optional. A list of additional details about the error.
  }, # Optional. Provisioning error details. Populated only for error states.
  parameters: AnyObject, # Optional. Parameters object for the environment.
}
</code>

</remarks>
    </member>
    <member name="GetEnvironments(String,String,Int32,RequestContext)">
<example>
This sample shows how to call GetEnvironments with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

foreach (var data in client.GetEnvironments("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("environmentType").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
    Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetEnvironments with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

foreach (var data in client.GetEnvironments("<projectName>", <me>, 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("environmentType").ToString());
    Console.WriteLine(result.GetProperty("user").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
    Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("parameters").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>EnvironmentListResultValue</c>:
<code>{
  name: string, # Optional. Environment name.
  environmentType: string, # Required. Environment type.
  user: string, # Optional. The AAD object id of the owner of this Environment.
  provisioningState: string, # Optional. The provisioning state of the environment.
  resourceGroupId: string, # Optional. The identifier of the resource group containing the environment&apos;s resources.
  catalogName: string, # Required. Name of the catalog.
  environmentDefinitionName: string, # Required. Name of the environment definition.
  error: {
    code: string, # Required. An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    message: string, # Required. A message describing the error, intended to be suitable for display in a user interface.
    target: string, # Optional. The target of the particular error. For example, the name of the property in error.
    details: [CloudErrorBody], # Optional. A list of additional details about the error.
  }, # Optional. Provisioning error details. Populated only for error states.
  parameters: AnyObject, # Optional. Parameters object for the environment.
}
</code>

</remarks>
    </member>
    <member name="GetCatalogsAsync(String,Int32,RequestContext)">
<example>
This sample shows how to call GetCatalogsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

await foreach (var data in client.GetCatalogsAsync("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
}
]]></code>
This sample shows how to call GetCatalogsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

await foreach (var data in client.GetCatalogsAsync("<projectName>", 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>CatalogListResultValue</c>:
<code>{
  name: string, # Required. Name of the catalog.
}
</code>

</remarks>
    </member>
    <member name="GetCatalogs(String,Int32,RequestContext)">
<example>
This sample shows how to call GetCatalogs with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

foreach (var data in client.GetCatalogs("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
}
]]></code>
This sample shows how to call GetCatalogs with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

foreach (var data in client.GetCatalogs("<projectName>", 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>CatalogListResultValue</c>:
<code>{
  name: string, # Required. Name of the catalog.
}
</code>

</remarks>
    </member>
    <member name="GetEnvironmentDefinitionsAsync(String,Int32,RequestContext)">
<example>
This sample shows how to call GetEnvironmentDefinitionsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

await foreach (var data in client.GetEnvironmentDefinitionsAsync("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
}
]]></code>
This sample shows how to call GetEnvironmentDefinitionsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

await foreach (var data in client.GetEnvironmentDefinitionsAsync("<projectName>", 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
    Console.WriteLine(result.GetProperty("parametersSchema").ToString());
    Console.WriteLine(result.GetProperty("templatePath").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>EnvironmentDefinitionListResultValue</c>:
<code>{
  id: string, # Required. The ID of the environment definition.
  name: string, # Required. Name of the environment definition.
  catalogName: string, # Required. Name of the catalog.
  description: string, # Optional. A short description of the environment definition.
  parameters: [
    {
      id: string, # Required. Unique ID of the parameter
      name: string, # Optional. Display name of the parameter
      description: string, # Optional. Description of the parameter
      default: string, # Optional. Default value of the parameter
      type: &quot;array&quot; | &quot;boolean&quot; | &quot;integer&quot; | &quot;number&quot; | &quot;object&quot; | &quot;string&quot;, # Required. A string of one of the basic JSON types (number, integer, array, object, boolean, string)
      readOnly: boolean, # Optional. Whether or not this parameter is read-only.  If true, default should have a value.
      required: boolean, # Required. Whether or not this parameter is required
      allowed: [string], # Optional. An array of allowed values
    }
  ], # Optional. Input parameters passed to an environment.
  parametersSchema: string, # Optional. JSON schema defining the parameters object passed to an environment.
  templatePath: string, # Optional. Path to the Environment Definition entrypoint file.
}
</code>

</remarks>
    </member>
    <member name="GetEnvironmentDefinitions(String,Int32,RequestContext)">
<example>
This sample shows how to call GetEnvironmentDefinitions with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

foreach (var data in client.GetEnvironmentDefinitions("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
}
]]></code>
This sample shows how to call GetEnvironmentDefinitions with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

foreach (var data in client.GetEnvironmentDefinitions("<projectName>", 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
    Console.WriteLine(result.GetProperty("parametersSchema").ToString());
    Console.WriteLine(result.GetProperty("templatePath").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>EnvironmentDefinitionListResultValue</c>:
<code>{
  id: string, # Required. The ID of the environment definition.
  name: string, # Required. Name of the environment definition.
  catalogName: string, # Required. Name of the catalog.
  description: string, # Optional. A short description of the environment definition.
  parameters: [
    {
      id: string, # Required. Unique ID of the parameter
      name: string, # Optional. Display name of the parameter
      description: string, # Optional. Description of the parameter
      default: string, # Optional. Default value of the parameter
      type: &quot;array&quot; | &quot;boolean&quot; | &quot;integer&quot; | &quot;number&quot; | &quot;object&quot; | &quot;string&quot;, # Required. A string of one of the basic JSON types (number, integer, array, object, boolean, string)
      readOnly: boolean, # Optional. Whether or not this parameter is read-only.  If true, default should have a value.
      required: boolean, # Required. Whether or not this parameter is required
      allowed: [string], # Optional. An array of allowed values
    }
  ], # Optional. Input parameters passed to an environment.
  parametersSchema: string, # Optional. JSON schema defining the parameters object passed to an environment.
  templatePath: string, # Optional. Path to the Environment Definition entrypoint file.
}
</code>

</remarks>
    </member>
    <member name="GetEnvironmentDefinitionsByCatalogAsync(String,String,Int32,RequestContext)">
<example>
This sample shows how to call GetEnvironmentDefinitionsByCatalogAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

await foreach (var data in client.GetEnvironmentDefinitionsByCatalogAsync("<projectName>", "<catalogName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
}
]]></code>
This sample shows how to call GetEnvironmentDefinitionsByCatalogAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

await foreach (var data in client.GetEnvironmentDefinitionsByCatalogAsync("<projectName>", "<catalogName>", 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
    Console.WriteLine(result.GetProperty("parametersSchema").ToString());
    Console.WriteLine(result.GetProperty("templatePath").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>EnvironmentDefinitionListResultValue</c>:
<code>{
  id: string, # Required. The ID of the environment definition.
  name: string, # Required. Name of the environment definition.
  catalogName: string, # Required. Name of the catalog.
  description: string, # Optional. A short description of the environment definition.
  parameters: [
    {
      id: string, # Required. Unique ID of the parameter
      name: string, # Optional. Display name of the parameter
      description: string, # Optional. Description of the parameter
      default: string, # Optional. Default value of the parameter
      type: &quot;array&quot; | &quot;boolean&quot; | &quot;integer&quot; | &quot;number&quot; | &quot;object&quot; | &quot;string&quot;, # Required. A string of one of the basic JSON types (number, integer, array, object, boolean, string)
      readOnly: boolean, # Optional. Whether or not this parameter is read-only.  If true, default should have a value.
      required: boolean, # Required. Whether or not this parameter is required
      allowed: [string], # Optional. An array of allowed values
    }
  ], # Optional. Input parameters passed to an environment.
  parametersSchema: string, # Optional. JSON schema defining the parameters object passed to an environment.
  templatePath: string, # Optional. Path to the Environment Definition entrypoint file.
}
</code>

</remarks>
    </member>
    <member name="GetEnvironmentDefinitionsByCatalog(String,String,Int32,RequestContext)">
<example>
This sample shows how to call GetEnvironmentDefinitionsByCatalog with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

foreach (var data in client.GetEnvironmentDefinitionsByCatalog("<projectName>", "<catalogName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
}
]]></code>
This sample shows how to call GetEnvironmentDefinitionsByCatalog with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

foreach (var data in client.GetEnvironmentDefinitionsByCatalog("<projectName>", "<catalogName>", 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
    Console.WriteLine(result.GetProperty("parametersSchema").ToString());
    Console.WriteLine(result.GetProperty("templatePath").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>EnvironmentDefinitionListResultValue</c>:
<code>{
  id: string, # Required. The ID of the environment definition.
  name: string, # Required. Name of the environment definition.
  catalogName: string, # Required. Name of the catalog.
  description: string, # Optional. A short description of the environment definition.
  parameters: [
    {
      id: string, # Required. Unique ID of the parameter
      name: string, # Optional. Display name of the parameter
      description: string, # Optional. Description of the parameter
      default: string, # Optional. Default value of the parameter
      type: &quot;array&quot; | &quot;boolean&quot; | &quot;integer&quot; | &quot;number&quot; | &quot;object&quot; | &quot;string&quot;, # Required. A string of one of the basic JSON types (number, integer, array, object, boolean, string)
      readOnly: boolean, # Optional. Whether or not this parameter is read-only.  If true, default should have a value.
      required: boolean, # Required. Whether or not this parameter is required
      allowed: [string], # Optional. An array of allowed values
    }
  ], # Optional. Input parameters passed to an environment.
  parametersSchema: string, # Optional. JSON schema defining the parameters object passed to an environment.
  templatePath: string, # Optional. Path to the Environment Definition entrypoint file.
}
</code>

</remarks>
    </member>
    <member name="GetEnvironmentTypesAsync(String,Int32,RequestContext)">
<example>
This sample shows how to call GetEnvironmentTypesAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

await foreach (var data in client.GetEnvironmentTypesAsync("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("deploymentTargetId").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
}
]]></code>
This sample shows how to call GetEnvironmentTypesAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

await foreach (var data in client.GetEnvironmentTypesAsync("<projectName>", 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("deploymentTargetId").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>EnvironmentTypeListResultValue</c>:
<code>{
  name: string, # Required. Name of the environment type
  deploymentTargetId: string, # Required. Id of a subscription or management group that the environment type will be mapped to. The environment&apos;s resources will be deployed into this subscription or management group.
  status: &quot;Enabled&quot; | &quot;Disabled&quot;, # Required. Indicates whether this environment type is enabled for use in this project.
}
</code>

</remarks>
    </member>
    <member name="GetEnvironmentTypes(String,Int32,RequestContext)">
<example>
This sample shows how to call GetEnvironmentTypes with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

foreach (var data in client.GetEnvironmentTypes("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("deploymentTargetId").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
}
]]></code>
This sample shows how to call GetEnvironmentTypes with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

foreach (var data in client.GetEnvironmentTypes("<projectName>", 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("deploymentTargetId").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>EnvironmentTypeListResultValue</c>:
<code>{
  name: string, # Required. Name of the environment type
  deploymentTargetId: string, # Required. Id of a subscription or management group that the environment type will be mapped to. The environment&apos;s resources will be deployed into this subscription or management group.
  status: &quot;Enabled&quot; | &quot;Disabled&quot;, # Required. Indicates whether this environment type is enabled for use in this project.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdateEnvironmentAsync(WaitUntil,String,String,RequestContent,String,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateEnvironmentAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

var data = new {
    environmentType = "<environmentType>",
    catalogName = "<catalogName>",
    environmentDefinitionName = "<environmentDefinitionName>",
};

var operation = await client.CreateOrUpdateEnvironmentAsync(WaitUntil.Completed, "<projectName>", "<environmentName>", RequestContent.Create(data));

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateEnvironmentAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

var data = new {
    environmentType = "<environmentType>",
    catalogName = "<catalogName>",
    environmentDefinitionName = "<environmentDefinitionName>",
    parameters = new {},
};

var operation = await client.CreateOrUpdateEnvironmentAsync(WaitUntil.Completed, "<projectName>", "<environmentName>", RequestContent.Create(data), <me>);

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("parameters").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Environment</c>:
<code>{
  name: string, # Optional. Environment name.
  environmentType: string, # Required. Environment type.
  user: string, # Optional. The AAD object id of the owner of this Environment.
  provisioningState: string, # Optional. The provisioning state of the environment.
  resourceGroupId: string, # Optional. The identifier of the resource group containing the environment&apos;s resources.
  catalogName: string, # Required. Name of the catalog.
  environmentDefinitionName: string, # Required. Name of the environment definition.
  error: {
    code: string, # Required. An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    message: string, # Required. A message describing the error, intended to be suitable for display in a user interface.
    target: string, # Optional. The target of the particular error. For example, the name of the property in error.
    details: [CloudErrorBody], # Optional. A list of additional details about the error.
  }, # Optional. Provisioning error details. Populated only for error states.
  parameters: AnyObject, # Optional. Parameters object for the environment.
}
</code>

Response Body:

Schema for <c>Environment</c>:
<code>{
  name: string, # Optional. Environment name.
  environmentType: string, # Required. Environment type.
  user: string, # Optional. The AAD object id of the owner of this Environment.
  provisioningState: string, # Optional. The provisioning state of the environment.
  resourceGroupId: string, # Optional. The identifier of the resource group containing the environment&apos;s resources.
  catalogName: string, # Required. Name of the catalog.
  environmentDefinitionName: string, # Required. Name of the environment definition.
  error: {
    code: string, # Required. An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    message: string, # Required. A message describing the error, intended to be suitable for display in a user interface.
    target: string, # Optional. The target of the particular error. For example, the name of the property in error.
    details: [CloudErrorBody], # Optional. A list of additional details about the error.
  }, # Optional. Provisioning error details. Populated only for error states.
  parameters: AnyObject, # Optional. Parameters object for the environment.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdateEnvironment(WaitUntil,String,String,RequestContent,String,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateEnvironment with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

var data = new {
    environmentType = "<environmentType>",
    catalogName = "<catalogName>",
    environmentDefinitionName = "<environmentDefinitionName>",
};

var operation = client.CreateOrUpdateEnvironment(WaitUntil.Completed, "<projectName>", "<environmentName>", RequestContent.Create(data));

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateEnvironment with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

var data = new {
    environmentType = "<environmentType>",
    catalogName = "<catalogName>",
    environmentDefinitionName = "<environmentDefinitionName>",
    parameters = new {},
};

var operation = client.CreateOrUpdateEnvironment(WaitUntil.Completed, "<projectName>", "<environmentName>", RequestContent.Create(data), <me>);

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("parameters").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Environment</c>:
<code>{
  name: string, # Optional. Environment name.
  environmentType: string, # Required. Environment type.
  user: string, # Optional. The AAD object id of the owner of this Environment.
  provisioningState: string, # Optional. The provisioning state of the environment.
  resourceGroupId: string, # Optional. The identifier of the resource group containing the environment&apos;s resources.
  catalogName: string, # Required. Name of the catalog.
  environmentDefinitionName: string, # Required. Name of the environment definition.
  error: {
    code: string, # Required. An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    message: string, # Required. A message describing the error, intended to be suitable for display in a user interface.
    target: string, # Optional. The target of the particular error. For example, the name of the property in error.
    details: [CloudErrorBody], # Optional. A list of additional details about the error.
  }, # Optional. Provisioning error details. Populated only for error states.
  parameters: AnyObject, # Optional. Parameters object for the environment.
}
</code>

Response Body:

Schema for <c>Environment</c>:
<code>{
  name: string, # Optional. Environment name.
  environmentType: string, # Required. Environment type.
  user: string, # Optional. The AAD object id of the owner of this Environment.
  provisioningState: string, # Optional. The provisioning state of the environment.
  resourceGroupId: string, # Optional. The identifier of the resource group containing the environment&apos;s resources.
  catalogName: string, # Required. Name of the catalog.
  environmentDefinitionName: string, # Required. Name of the environment definition.
  error: {
    code: string, # Required. An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    message: string, # Required. A message describing the error, intended to be suitable for display in a user interface.
    target: string, # Optional. The target of the particular error. For example, the name of the property in error.
    details: [CloudErrorBody], # Optional. A list of additional details about the error.
  }, # Optional. Provisioning error details. Populated only for error states.
  parameters: AnyObject, # Optional. Parameters object for the environment.
}
</code>

</remarks>
    </member>
    <member name="DeleteEnvironmentAsync(WaitUntil,String,String,String,RequestContext)">
<example>
This sample shows how to call DeleteEnvironmentAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

var operation = await client.DeleteEnvironmentAsync(WaitUntil.Completed, "<projectName>", "<environmentName>");

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call DeleteEnvironmentAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

var operation = await client.DeleteEnvironmentAsync(WaitUntil.Completed, "<projectName>", "<environmentName>", <me>);

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("properties").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>OperationStatus</c>:
<code>{
  id: string, # Optional. Fully qualified ID for the operation status.
  name: string, # Optional. The operation id name
  status: string, # Required. Provisioning state of the resource.
  resourceId: string, # Optional. The id of the resource.
  startTime: string (ISO 8601 Format), # Optional. The start time of the operation
  endTime: string (ISO 8601 Format), # Optional. The end time of the operation
  percentComplete: number, # Optional. Percent of the operation that is complete
  properties: AnyObject, # Optional. Custom operation properties, populated only for a successful operation.
  error: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Operation Error message
}
</code>

</remarks>
    </member>
    <member name="DeleteEnvironment(WaitUntil,String,String,String,RequestContext)">
<example>
This sample shows how to call DeleteEnvironment with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

var operation = client.DeleteEnvironment(WaitUntil.Completed, "<projectName>", "<environmentName>");

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call DeleteEnvironment with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeploymentEnvironmentsClient(endpoint, credential);

var operation = client.DeleteEnvironment(WaitUntil.Completed, "<projectName>", "<environmentName>", <me>);

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("percentComplete").ToString());
Console.WriteLine(result.GetProperty("properties").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>OperationStatus</c>:
<code>{
  id: string, # Optional. Fully qualified ID for the operation status.
  name: string, # Optional. The operation id name
  status: string, # Required. Provisioning state of the resource.
  resourceId: string, # Optional. The id of the resource.
  startTime: string (ISO 8601 Format), # Optional. The start time of the operation
  endTime: string (ISO 8601 Format), # Optional. The end time of the operation
  percentComplete: number, # Optional. Percent of the operation that is complete
  properties: AnyObject, # Optional. Custom operation properties, populated only for a successful operation.
  error: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Operation Error message
}
</code>

</remarks>
    </member>
  </members>
</doc>