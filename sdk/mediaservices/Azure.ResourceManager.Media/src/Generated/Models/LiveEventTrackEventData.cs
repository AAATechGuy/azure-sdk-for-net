// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.Media.Models
{
    /// <summary> The live event track ingest heart beat event data. </summary>
    public partial class LiveEventTrackEventData
    {
        /// <summary> Initializes a new instance of LiveEventTrackEventData. </summary>
        internal LiveEventTrackEventData()
        {
        }

        /// <summary> Initializes a new instance of LiveEventTrackEventData. </summary>
        /// <param name="trackName"> Name of the track. </param>
        /// <param name="trackType"> Type of the track. </param>
        /// <param name="bitrate"> Bitrate of the track. </param>
        /// <param name="incomingBitrate"> Calculated bitrate based on data chunks coming from encoder. </param>
        /// <param name="lastTimestamp"> Latest timestamp received for a track in last 20 seconds. </param>
        /// <param name="timescale"> Timescale in which timestamps are expressed. </param>
        /// <param name="overlapCount"> Number of data chunks that had overlapped timestamps in last 20 seconds. </param>
        /// <param name="discontinuityCount"> Number of discontinuities detected in the last 20 seconds. </param>
        /// <param name="nonincreasingCount"> Number of data chunks with timestamps in the past that were received in last 20 seconds. </param>
        /// <param name="unexpectedBitrate"> If expected and actual bitrates differ by more than allowed limit in last 20 seconds. </param>
        /// <param name="state"> State of the live event. </param>
        /// <param name="healthy"> Indicates whether ingest is healthy. </param>
        /// <param name="lastFragmentArrivalOn"> The last timestamp in UTC that a fragment arrived at the ingest endpoint. </param>
        /// <param name="ingestDriftValue"> Indicates the speed of delay, in seconds-per-minute, of the incoming audio or video data during the last minute. The value is greater than zero if data is arriving to the live event slower than expected in the last minute; zero if data arrived with no delay; and &quot;n/a&quot; if no audio or video data was received. For example, if you have a contribution encoder sending in live content, and it is slowing down due to processing issues, or network latency, it may be only able to deliver a total of 58 seconds of audio or video in a one-minute period. This would be reported as two seconds-per-minute of drift. If the encoder is able to catch up and send all 60 seconds or more of data every minute, you will see this value reported as 0. If there was a disconnection or discontinuity from the encoder, this value may still display as 0, as it does not account for breaks in the data - only data that is delayed in timestamps. </param>
        /// <param name="transcriptionState"> This value is &quot;On&quot; for audio track heartbeats if live transcription is turned on, otherwise you will see an empty string. This state is only applicable to track type of &quot;audio&quot; for Live transcription. All other tracks will have an empty value. </param>
        /// <param name="transcriptionLanguage"> The language code (in BCP-47 format) of the transcription language. For example, &quot;de-de&quot; indicates German (Germany). The value is empty for the video track heartbeats, or when live transcription is turned off. </param>
        internal LiveEventTrackEventData(string trackName, LiveEventTrackType? trackType, long? bitrate, long? incomingBitrate, string lastTimestamp, string timescale, long? overlapCount, long? discontinuityCount, long? nonincreasingCount, bool? unexpectedBitrate, string state, bool? healthy, DateTimeOffset? lastFragmentArrivalOn, string ingestDriftValue, string transcriptionState, string transcriptionLanguage)
        {
            TrackName = trackName;
            TrackType = trackType;
            Bitrate = bitrate;
            IncomingBitrate = incomingBitrate;
            LastTimestamp = lastTimestamp;
            Timescale = timescale;
            OverlapCount = overlapCount;
            DiscontinuityCount = discontinuityCount;
            NonincreasingCount = nonincreasingCount;
            UnexpectedBitrate = unexpectedBitrate;
            State = state;
            Healthy = healthy;
            LastFragmentArrivalOn = lastFragmentArrivalOn;
            IngestDriftValue = ingestDriftValue;
            TranscriptionState = transcriptionState;
            TranscriptionLanguage = transcriptionLanguage;
        }

        /// <summary> Name of the track. </summary>
        public string TrackName { get; }
        /// <summary> Type of the track. </summary>
        public LiveEventTrackType? TrackType { get; }
        /// <summary> Bitrate of the track. </summary>
        public long? Bitrate { get; }
        /// <summary> Calculated bitrate based on data chunks coming from encoder. </summary>
        public long? IncomingBitrate { get; }
        /// <summary> Latest timestamp received for a track in last 20 seconds. </summary>
        public string LastTimestamp { get; }
        /// <summary> Timescale in which timestamps are expressed. </summary>
        public string Timescale { get; }
        /// <summary> Number of data chunks that had overlapped timestamps in last 20 seconds. </summary>
        public long? OverlapCount { get; }
        /// <summary> Number of discontinuities detected in the last 20 seconds. </summary>
        public long? DiscontinuityCount { get; }
        /// <summary> Number of data chunks with timestamps in the past that were received in last 20 seconds. </summary>
        public long? NonincreasingCount { get; }
        /// <summary> If expected and actual bitrates differ by more than allowed limit in last 20 seconds. </summary>
        public bool? UnexpectedBitrate { get; }
        /// <summary> State of the live event. </summary>
        public string State { get; }
        /// <summary> Indicates whether ingest is healthy. </summary>
        public bool? Healthy { get; }
        /// <summary> The last timestamp in UTC that a fragment arrived at the ingest endpoint. </summary>
        public DateTimeOffset? LastFragmentArrivalOn { get; }
        /// <summary> Indicates the speed of delay, in seconds-per-minute, of the incoming audio or video data during the last minute. The value is greater than zero if data is arriving to the live event slower than expected in the last minute; zero if data arrived with no delay; and &quot;n/a&quot; if no audio or video data was received. For example, if you have a contribution encoder sending in live content, and it is slowing down due to processing issues, or network latency, it may be only able to deliver a total of 58 seconds of audio or video in a one-minute period. This would be reported as two seconds-per-minute of drift. If the encoder is able to catch up and send all 60 seconds or more of data every minute, you will see this value reported as 0. If there was a disconnection or discontinuity from the encoder, this value may still display as 0, as it does not account for breaks in the data - only data that is delayed in timestamps. </summary>
        public string IngestDriftValue { get; }
        /// <summary> This value is &quot;On&quot; for audio track heartbeats if live transcription is turned on, otherwise you will see an empty string. This state is only applicable to track type of &quot;audio&quot; for Live transcription. All other tracks will have an empty value. </summary>
        public string TranscriptionState { get; }
        /// <summary> The language code (in BCP-47 format) of the transcription language. For example, &quot;de-de&quot; indicates German (Germany). The value is empty for the video track heartbeats, or when live transcription is turned off. </summary>
        public string TranscriptionLanguage { get; }
    }
}
