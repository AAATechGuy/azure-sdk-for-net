// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.ResourceManager.Media.Models
{
    /// <summary> The live event track status. </summary>
    public partial class LiveEventTrackStatus
    {
        /// <summary> Initializes a new instance of LiveEventTrackStatus. </summary>
        internal LiveEventTrackStatus()
        {
        }

        /// <summary> Initializes a new instance of LiveEventTrackStatus. </summary>
        /// <param name="trackId"> Track Id. </param>
        /// <param name="expectedBitrate"> Expected bitrate for this track. </param>
        /// <param name="incomingBitrate"> Average incoming bitrate for last 20 seconds when live event is running. </param>
        /// <param name="ingestDrift"> Current ingest drift value in seconds for last 1 minute. </param>
        /// <param name="requestReceived"> Total number of timed metadata request received. </param>
        /// <param name="requestSucceeded"> Total number of successful timed metadata request received. </param>
        internal LiveEventTrackStatus(string trackId, long? expectedBitrate, long? incomingBitrate, string ingestDrift, long? requestReceived, long? requestSucceeded)
        {
            TrackId = trackId;
            ExpectedBitrate = expectedBitrate;
            IncomingBitrate = incomingBitrate;
            IngestDrift = ingestDrift;
            RequestReceived = requestReceived;
            RequestSucceeded = requestSucceeded;
        }

        /// <summary> Track Id. </summary>
        public string TrackId { get; }
        /// <summary> Expected bitrate for this track. </summary>
        public long? ExpectedBitrate { get; }
        /// <summary> Average incoming bitrate for last 20 seconds when live event is running. </summary>
        public long? IncomingBitrate { get; }
        /// <summary> Current ingest drift value in seconds for last 1 minute. </summary>
        public string IngestDrift { get; }
        /// <summary> Total number of timed metadata request received. </summary>
        public long? RequestReceived { get; }
        /// <summary> Total number of successful timed metadata request received. </summary>
        public long? RequestSucceeded { get; }
    }
}
