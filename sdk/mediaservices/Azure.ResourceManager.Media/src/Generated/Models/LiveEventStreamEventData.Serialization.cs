// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Media.Models
{
    public partial class LiveEventStreamEventData
    {
        internal static LiveEventStreamEventData DeserializeLiveEventStreamEventData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> trackName = default;
            Optional<string> streamId = default;
            Optional<int> trackId = default;
            Optional<LiveEventStreamEventMediaType> mediaType = default;
            Optional<long> bitrate = default;
            Optional<string> mediaTimestamp = default;
            Optional<string> timescale = default;
            Optional<string> previousFragmentTimestamp = default;
            Optional<string> previousFragmentDuration = default;
            Optional<string> currentFragmentTimestamp = default;
            Optional<string> fragmentOneTimestamp = default;
            Optional<string> fragmentOneDuration = default;
            Optional<string> fragmentTwoTimestamp = default;
            Optional<string> fragmentTwoDuration = default;
            Optional<string> fragmentDropReason = default;
            Optional<long> discontinuityGap = default;
            Optional<string> streamName = default;
            Optional<string> resultCode = default;
            Optional<string> resultMessage = default;
            Optional<string> duration = default;
            Optional<string> resolution = default;
            Optional<string> minTime = default;
            Optional<LiveEventStreamEventMinTimeMediaType> minTimeMediaType = default;
            Optional<string> maxTime = default;
            Optional<LiveEventStreamEventMaxTimeMediaType> maxTimeMediaType = default;
            Optional<string> timescaleOfMinTime = default;
            Optional<string> timescaleOfMaxTime = default;
            Optional<string> remoteIP = default;
            Optional<string> remotePort = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("trackName"u8))
                {
                    trackName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("streamId"u8))
                {
                    streamId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("trackId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    trackId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("mediaType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    mediaType = new LiveEventStreamEventMediaType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("bitrate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    bitrate = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("mediaTimestamp"u8))
                {
                    mediaTimestamp = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("timescale"u8))
                {
                    timescale = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("previousFragmentTimestamp"u8))
                {
                    previousFragmentTimestamp = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("previousFragmentDuration"u8))
                {
                    previousFragmentDuration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("currentFragmentTimestamp"u8))
                {
                    currentFragmentTimestamp = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fragmentOneTimestamp"u8))
                {
                    fragmentOneTimestamp = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fragmentOneDuration"u8))
                {
                    fragmentOneDuration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fragmentTwoTimestamp"u8))
                {
                    fragmentTwoTimestamp = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fragmentTwoDuration"u8))
                {
                    fragmentTwoDuration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fragmentDropReason"u8))
                {
                    fragmentDropReason = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("discontinuityGap"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    discontinuityGap = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("streamName"u8))
                {
                    streamName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resultCode"u8))
                {
                    resultCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resultMessage"u8))
                {
                    resultMessage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("duration"u8))
                {
                    duration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resolution"u8))
                {
                    resolution = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("minTime"u8))
                {
                    minTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("minTimeMediaType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    minTimeMediaType = new LiveEventStreamEventMinTimeMediaType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("maxTime"u8))
                {
                    maxTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("maxTimeMediaType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    maxTimeMediaType = new LiveEventStreamEventMaxTimeMediaType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("timescaleOfMinTime"u8))
                {
                    timescaleOfMinTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("timescaleOfMaxTime"u8))
                {
                    timescaleOfMaxTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("remoteIp"u8))
                {
                    remoteIP = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("remotePort"u8))
                {
                    remotePort = property.Value.GetString();
                    continue;
                }
            }
            return new LiveEventStreamEventData(trackName.Value, streamId.Value, Optional.ToNullable(trackId), Optional.ToNullable(mediaType), Optional.ToNullable(bitrate), mediaTimestamp.Value, timescale.Value, previousFragmentTimestamp.Value, previousFragmentDuration.Value, currentFragmentTimestamp.Value, fragmentOneTimestamp.Value, fragmentOneDuration.Value, fragmentTwoTimestamp.Value, fragmentTwoDuration.Value, fragmentDropReason.Value, Optional.ToNullable(discontinuityGap), streamName.Value, resultCode.Value, resultMessage.Value, duration.Value, resolution.Value, minTime.Value, Optional.ToNullable(minTimeMediaType), maxTime.Value, Optional.ToNullable(maxTimeMediaType), timescaleOfMinTime.Value, timescaleOfMaxTime.Value, remoteIP.Value, remotePort.Value);
        }
    }
}
