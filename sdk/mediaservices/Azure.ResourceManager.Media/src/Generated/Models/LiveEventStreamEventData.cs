// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.ResourceManager.Media.Models
{
    /// <summary> The live event stream event data. </summary>
    public partial class LiveEventStreamEventData
    {
        /// <summary> Initializes a new instance of LiveEventStreamEventData. </summary>
        internal LiveEventStreamEventData()
        {
        }

        /// <summary> Initializes a new instance of LiveEventStreamEventData. </summary>
        /// <param name="trackName"> Name of the track. </param>
        /// <param name="streamId"> Stream ID in the format &quot;trackName_bitrate&quot;. </param>
        /// <param name="trackId"> Track index. </param>
        /// <param name="mediaType"> Type of the track. </param>
        /// <param name="bitrate"> Bitrate of the track. </param>
        /// <param name="mediaTimestamp"> Fragment timestamp in timescale. </param>
        /// <param name="timescale"> Timescale in which timestamps are expressed. </param>
        /// <param name="previousFragmentTimestamp"> Previous fragment timestamp in timescale. </param>
        /// <param name="previousFragmentDurationInTimescale"> Previous fragment duration in timescale. </param>
        /// <param name="currentFragmentTimestamp"> Current fragment timestamp in timescale. </param>
        /// <param name="fragmentOneTimestamp"> Timestamp of first fragment used to make a comparison, in timescale. </param>
        /// <param name="fragmentOneDurationInTimescale"> Duration of first fragment used to make a comparison, in timescale. </param>
        /// <param name="fragmentTwoTimestamp"> Timestamp of second fragment used to make a comparison, in timescale. </param>
        /// <param name="fragmentTwoDurationInTimescale"> Duration of second fragment used to make a comparison, in timescale. </param>
        /// <param name="fragmentDropReason"> Reason the fragment was dropped. </param>
        /// <param name="discontinuityGap"> Length of the discontinuity gap in timescale. </param>
        /// <param name="streamName"> Identifier of the stream or connection. Encoder or customer is responsible to add this ID in the ingest URL. </param>
        /// <param name="resultCode"> Result code. </param>
        /// <param name="resultMessage"> Result message. </param>
        /// <param name="durationInTimescale"> Fragment duration. </param>
        /// <param name="resolution"> Width x Height for video, null otherwise. </param>
        /// <param name="minTime"> The smaller timestamp of the two fragments compared. </param>
        /// <param name="minTimeMediaType"> The media type of the smaller timestamp of two fragments compared. </param>
        /// <param name="maxTime"> The larger timestamp of the two fragments compared. </param>
        /// <param name="maxTimeMediaType"> The media type of the larger timestamp of two fragments compared. </param>
        /// <param name="timescaleOfMinTime"> Timescale of the fragment with the smaller timestamp. </param>
        /// <param name="timescaleOfMaxTime"> Timescale of the fragment with the larger timestamp. </param>
        /// <param name="remoteIP"> Truncated IP of the encoder. </param>
        /// <param name="remotePort"> Port of the encoder. </param>
        internal LiveEventStreamEventData(string trackName, string streamId, int? trackId, LiveEventStreamEventMediaType? mediaType, long? bitrate, string mediaTimestamp, string timescale, string previousFragmentTimestamp, string previousFragmentDurationInTimescale, string currentFragmentTimestamp, string fragmentOneTimestamp, string fragmentOneDurationInTimescale, string fragmentTwoTimestamp, string fragmentTwoDurationInTimescale, string fragmentDropReason, long? discontinuityGap, string streamName, string resultCode, string resultMessage, string durationInTimescale, string resolution, string minTime, LiveEventStreamEventMinTimeMediaType? minTimeMediaType, string maxTime, LiveEventStreamEventMaxTimeMediaType? maxTimeMediaType, string timescaleOfMinTime, string timescaleOfMaxTime, string remoteIP, string remotePort)
        {
            TrackName = trackName;
            StreamId = streamId;
            TrackId = trackId;
            MediaType = mediaType;
            Bitrate = bitrate;
            MediaTimestamp = mediaTimestamp;
            Timescale = timescale;
            PreviousFragmentTimestamp = previousFragmentTimestamp;
            PreviousFragmentDurationInTimescale = previousFragmentDurationInTimescale;
            CurrentFragmentTimestamp = currentFragmentTimestamp;
            FragmentOneTimestamp = fragmentOneTimestamp;
            FragmentOneDurationInTimescale = fragmentOneDurationInTimescale;
            FragmentTwoTimestamp = fragmentTwoTimestamp;
            FragmentTwoDurationInTimescale = fragmentTwoDurationInTimescale;
            FragmentDropReason = fragmentDropReason;
            DiscontinuityGap = discontinuityGap;
            StreamName = streamName;
            ResultCode = resultCode;
            ResultMessage = resultMessage;
            DurationInTimescale = durationInTimescale;
            Resolution = resolution;
            MinTime = minTime;
            MinTimeMediaType = minTimeMediaType;
            MaxTime = maxTime;
            MaxTimeMediaType = maxTimeMediaType;
            TimescaleOfMinTime = timescaleOfMinTime;
            TimescaleOfMaxTime = timescaleOfMaxTime;
            RemoteIP = remoteIP;
            RemotePort = remotePort;
        }

        /// <summary> Name of the track. </summary>
        public string TrackName { get; }
        /// <summary> Stream ID in the format &quot;trackName_bitrate&quot;. </summary>
        public string StreamId { get; }
        /// <summary> Track index. </summary>
        public int? TrackId { get; }
        /// <summary> Type of the track. </summary>
        public LiveEventStreamEventMediaType? MediaType { get; }
        /// <summary> Bitrate of the track. </summary>
        public long? Bitrate { get; }
        /// <summary> Fragment timestamp in timescale. </summary>
        public string MediaTimestamp { get; }
        /// <summary> Timescale in which timestamps are expressed. </summary>
        public string Timescale { get; }
        /// <summary> Previous fragment timestamp in timescale. </summary>
        public string PreviousFragmentTimestamp { get; }
        /// <summary> Previous fragment duration in timescale. </summary>
        public string PreviousFragmentDurationInTimescale { get; }
        /// <summary> Current fragment timestamp in timescale. </summary>
        public string CurrentFragmentTimestamp { get; }
        /// <summary> Timestamp of first fragment used to make a comparison, in timescale. </summary>
        public string FragmentOneTimestamp { get; }
        /// <summary> Duration of first fragment used to make a comparison, in timescale. </summary>
        public string FragmentOneDurationInTimescale { get; }
        /// <summary> Timestamp of second fragment used to make a comparison, in timescale. </summary>
        public string FragmentTwoTimestamp { get; }
        /// <summary> Duration of second fragment used to make a comparison, in timescale. </summary>
        public string FragmentTwoDurationInTimescale { get; }
        /// <summary> Reason the fragment was dropped. </summary>
        public string FragmentDropReason { get; }
        /// <summary> Length of the discontinuity gap in timescale. </summary>
        public long? DiscontinuityGap { get; }
        /// <summary> Identifier of the stream or connection. Encoder or customer is responsible to add this ID in the ingest URL. </summary>
        public string StreamName { get; }
        /// <summary> Result code. </summary>
        public string ResultCode { get; }
        /// <summary> Result message. </summary>
        public string ResultMessage { get; }
        /// <summary> Fragment duration. </summary>
        public string DurationInTimescale { get; }
        /// <summary> Width x Height for video, null otherwise. </summary>
        public string Resolution { get; }
        /// <summary> The smaller timestamp of the two fragments compared. </summary>
        public string MinTime { get; }
        /// <summary> The media type of the smaller timestamp of two fragments compared. </summary>
        public LiveEventStreamEventMinTimeMediaType? MinTimeMediaType { get; }
        /// <summary> The larger timestamp of the two fragments compared. </summary>
        public string MaxTime { get; }
        /// <summary> The media type of the larger timestamp of two fragments compared. </summary>
        public LiveEventStreamEventMaxTimeMediaType? MaxTimeMediaType { get; }
        /// <summary> Timescale of the fragment with the smaller timestamp. </summary>
        public string TimescaleOfMinTime { get; }
        /// <summary> Timescale of the fragment with the larger timestamp. </summary>
        public string TimescaleOfMaxTime { get; }
        /// <summary> Truncated IP of the encoder. </summary>
        public string RemoteIP { get; }
        /// <summary> Port of the encoder. </summary>
        public string RemotePort { get; }
    }
}
