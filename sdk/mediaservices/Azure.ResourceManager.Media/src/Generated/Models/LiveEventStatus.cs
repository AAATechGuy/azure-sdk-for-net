// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Media.Models
{
    /// <summary> The live event status. </summary>
    public partial class LiveEventStatus
    {
        /// <summary> Initializes a new instance of LiveEventStatus. </summary>
        internal LiveEventStatus()
        {
            HealthDescriptions = new ChangeTrackingList<string>();
            TrackStatus = new ChangeTrackingList<LiveEventTrackStatus>();
        }

        /// <summary> Initializes a new instance of LiveEventStatus. </summary>
        /// <param name="state"> Current state of the live event. See https://go.microsoft.com/fwlink/?linkid=2139012 for more information. </param>
        /// <param name="healthStatus"> Health status of last 20 seconds. </param>
        /// <param name="healthDescriptions"> List of strings justifying the health status. </param>
        /// <param name="lastUpdatedOn"> Last updated UTC time of this status. </param>
        /// <param name="ingestion"> Live event ingestion entry. </param>
        /// <param name="trackStatus"> Track entry list. </param>
        internal LiveEventStatus(LiveEventState? state, LiveEventHealthStatus? healthStatus, IReadOnlyList<string> healthDescriptions, DateTimeOffset? lastUpdatedOn, LiveEventIngestion ingestion, IReadOnlyList<LiveEventTrackStatus> trackStatus)
        {
            State = state;
            HealthStatus = healthStatus;
            HealthDescriptions = healthDescriptions;
            LastUpdatedOn = lastUpdatedOn;
            Ingestion = ingestion;
            TrackStatus = trackStatus;
        }

        /// <summary> Current state of the live event. See https://go.microsoft.com/fwlink/?linkid=2139012 for more information. </summary>
        public LiveEventState? State { get; }
        /// <summary> Health status of last 20 seconds. </summary>
        public LiveEventHealthStatus? HealthStatus { get; }
        /// <summary> List of strings justifying the health status. </summary>
        public IReadOnlyList<string> HealthDescriptions { get; }
        /// <summary> Last updated UTC time of this status. </summary>
        public DateTimeOffset? LastUpdatedOn { get; }
        /// <summary> Live event ingestion entry. </summary>
        public LiveEventIngestion Ingestion { get; }
        /// <summary> Track entry list. </summary>
        public IReadOnlyList<LiveEventTrackStatus> TrackStatus { get; }
    }
}
