// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Media.Models
{
    /// <summary> The type of the stream event. Format: StreamEvent/{eventType}. </summary>
    public readonly partial struct LiveEventStreamEventType : IEquatable<LiveEventStreamEventType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LiveEventStreamEventType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LiveEventStreamEventType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StreamEventBeginIngestValue = "StreamEvent/BeginIngest";
        private const string StreamEventEndIngestValue = "StreamEvent/EndIngest";
        private const string StreamEventFirstChunkReceivedValue = "StreamEvent/FirstChunkReceived";
        private const string StreamEventChunkDroppedValue = "StreamEvent/ChunkDropped";
        private const string StreamEventUnalignedKeyFramesValue = "StreamEvent/UnalignedKeyFrames";
        private const string StreamEventUnalignedPresentationValue = "StreamEvent/UnalignedPresentation";
        private const string StreamEventDiscontinuityValue = "StreamEvent/Discontinuity";
        private const string StreamEventInvalidConnectionValue = "StreamEvent/InvalidConnection";

        /// <summary> Ingest session begins. </summary>
        public static LiveEventStreamEventType StreamEventBeginIngest { get; } = new LiveEventStreamEventType(StreamEventBeginIngestValue);
        /// <summary> Ingest session ends. </summary>
        public static LiveEventStreamEventType StreamEventEndIngest { get; } = new LiveEventStreamEventType(StreamEventEndIngestValue);
        /// <summary> First fragment received on ingest media track. </summary>
        public static LiveEventStreamEventType StreamEventFirstChunkReceived { get; } = new LiveEventStreamEventType(StreamEventFirstChunkReceivedValue);
        /// <summary> Fragment dropped. </summary>
        public static LiveEventStreamEventType StreamEventChunkDropped { get; } = new LiveEventStreamEventType(StreamEventChunkDroppedValue);
        /// <summary> Unaligned video keyframes detected. </summary>
        public static LiveEventStreamEventType StreamEventUnalignedKeyFrames { get; } = new LiveEventStreamEventType(StreamEventUnalignedKeyFramesValue);
        /// <summary> Unaligned presentation detected, meaning two fragments across two quality levels are not time aligned. </summary>
        public static LiveEventStreamEventType StreamEventUnalignedPresentation { get; } = new LiveEventStreamEventType(StreamEventUnalignedPresentationValue);
        /// <summary> Timestamp discontinuity detected. </summary>
        public static LiveEventStreamEventType StreamEventDiscontinuity { get; } = new LiveEventStreamEventType(StreamEventDiscontinuityValue);
        /// <summary> Ingest session denied. </summary>
        public static LiveEventStreamEventType StreamEventInvalidConnection { get; } = new LiveEventStreamEventType(StreamEventInvalidConnectionValue);
        /// <summary> Determines if two <see cref="LiveEventStreamEventType"/> values are the same. </summary>
        public static bool operator ==(LiveEventStreamEventType left, LiveEventStreamEventType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LiveEventStreamEventType"/> values are not the same. </summary>
        public static bool operator !=(LiveEventStreamEventType left, LiveEventStreamEventType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="LiveEventStreamEventType"/>. </summary>
        public static implicit operator LiveEventStreamEventType(string value) => new LiveEventStreamEventType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LiveEventStreamEventType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LiveEventStreamEventType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
