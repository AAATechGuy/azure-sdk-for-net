// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Media.Models
{
    /// <summary> The live event ingestion telemetry data. </summary>
    public partial class LiveEventIngestion
    {
        /// <summary> Initializes a new instance of LiveEventIngestion. </summary>
        internal LiveEventIngestion()
        {
            IngestInterruptions = new ChangeTrackingList<LiveEventIngestInterruption>();
        }

        /// <summary> Initializes a new instance of LiveEventIngestion. </summary>
        /// <param name="streamName"> Ingestion stream name. </param>
        /// <param name="begin"> Ingestion begin time in UTC. </param>
        /// <param name="end"> Ingestion end time in UTC. Empty if it&apos;s not stopped yet. </param>
        /// <param name="endReason"> Reason why ingestion stops. Empty if it&apos;s not stopped yet. E.g) Service Stopped. No Ingestion. </param>
        /// <param name="ingestInterruptions"> IngestInterruption entry list. </param>
        internal LiveEventIngestion(string streamName, DateTimeOffset? begin, DateTimeOffset? end, string endReason, IReadOnlyList<LiveEventIngestInterruption> ingestInterruptions)
        {
            StreamName = streamName;
            Begin = begin;
            End = end;
            EndReason = endReason;
            IngestInterruptions = ingestInterruptions;
        }

        /// <summary> Ingestion stream name. </summary>
        public string StreamName { get; }
        /// <summary> Ingestion begin time in UTC. </summary>
        public DateTimeOffset? Begin { get; }
        /// <summary> Ingestion end time in UTC. Empty if it&apos;s not stopped yet. </summary>
        public DateTimeOffset? End { get; }
        /// <summary> Reason why ingestion stops. Empty if it&apos;s not stopped yet. E.g) Service Stopped. No Ingestion. </summary>
        public string EndReason { get; }
        /// <summary> IngestInterruption entry list. </summary>
        public IReadOnlyList<LiveEventIngestInterruption> IngestInterruptions { get; }
    }
}
