// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Media.Models
{
    /// <summary> Current state of the live event. See https://go.microsoft.com/fwlink/?linkid=2139012 for more information. </summary>
    public readonly partial struct LiveEventState : IEquatable<LiveEventState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LiveEventState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LiveEventState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StoppedValue = "Stopped";
        private const string RunningValue = "Running";

        /// <summary> This is the initial state of the live event after creation (unless autostart was set to true.) No billing occurs in this state. In this state, the live event properties can be updated but streaming is not allowed. </summary>
        public static LiveEventState Stopped { get; } = new LiveEventState(StoppedValue);
        /// <summary> The live event resources have been allocated, ingest and preview URLs have been generated, and it is capable of receiving live streams. At this point, billing is active. You must explicitly call Stop on the live event resource to halt further billing. </summary>
        public static LiveEventState Running { get; } = new LiveEventState(RunningValue);
        /// <summary> Determines if two <see cref="LiveEventState"/> values are the same. </summary>
        public static bool operator ==(LiveEventState left, LiveEventState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LiveEventState"/> values are not the same. </summary>
        public static bool operator !=(LiveEventState left, LiveEventState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="LiveEventState"/>. </summary>
        public static implicit operator LiveEventState(string value) => new LiveEventState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LiveEventState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LiveEventState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
