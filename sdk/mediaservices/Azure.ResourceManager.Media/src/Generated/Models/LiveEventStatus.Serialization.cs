// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Media.Models
{
    public partial class LiveEventStatus
    {
        internal static LiveEventStatus DeserializeLiveEventStatus(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<LiveEventState> state = default;
            Optional<LiveEventHealthStatus> healthStatus = default;
            Optional<IReadOnlyList<string>> healthDescriptions = default;
            Optional<DateTimeOffset> lastUpdatedTime = default;
            Optional<LiveEventIngestion> ingestion = default;
            Optional<IReadOnlyList<LiveEventTrackStatus>> trackStatus = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("state"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    state = new LiveEventState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("healthStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    healthStatus = new LiveEventHealthStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("healthDescriptions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    healthDescriptions = array;
                    continue;
                }
                if (property.NameEquals("lastUpdatedTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastUpdatedTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("ingestion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    ingestion = LiveEventIngestion.DeserializeLiveEventIngestion(property.Value);
                    continue;
                }
                if (property.NameEquals("trackStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<LiveEventTrackStatus> array = new List<LiveEventTrackStatus>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(LiveEventTrackStatus.DeserializeLiveEventTrackStatus(item));
                    }
                    trackStatus = array;
                    continue;
                }
            }
            return new LiveEventStatus(Optional.ToNullable(state), Optional.ToNullable(healthStatus), Optional.ToList(healthDescriptions), Optional.ToNullable(lastUpdatedTime), ingestion.Value, Optional.ToList(trackStatus));
        }
    }
}
