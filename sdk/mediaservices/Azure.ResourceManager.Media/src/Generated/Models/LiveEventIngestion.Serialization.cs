// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Media.Models
{
    public partial class LiveEventIngestion
    {
        internal static LiveEventIngestion DeserializeLiveEventIngestion(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> streamName = default;
            Optional<DateTimeOffset> begin = default;
            Optional<DateTimeOffset> end = default;
            Optional<string> endReason = default;
            Optional<IReadOnlyList<LiveEventIngestInterruption>> ingestInterruptions = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("streamName"u8))
                {
                    streamName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("begin"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    begin = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("end"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    end = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endReason"u8))
                {
                    endReason = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ingestInterruptions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<LiveEventIngestInterruption> array = new List<LiveEventIngestInterruption>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(LiveEventIngestInterruption.DeserializeLiveEventIngestInterruption(item));
                    }
                    ingestInterruptions = array;
                    continue;
                }
            }
            return new LiveEventIngestion(streamName.Value, Optional.ToNullable(begin), Optional.ToNullable(end), endReason.Value, Optional.ToList(ingestInterruptions));
        }
    }
}
