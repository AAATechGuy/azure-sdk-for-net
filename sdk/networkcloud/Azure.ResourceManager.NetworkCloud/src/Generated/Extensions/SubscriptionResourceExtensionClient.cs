// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.NetworkCloud.Models;

namespace Azure.ResourceManager.NetworkCloud
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _bareMetalMachinesClientDiagnostics;
        private BareMetalMachinesRestOperations _bareMetalMachinesRestClient;
        private ClientDiagnostics _cloudServicesNetworksClientDiagnostics;
        private CloudServicesNetworksRestOperations _cloudServicesNetworksRestClient;
        private ClientDiagnostics _clusterManagersClientDiagnostics;
        private ClusterManagersRestOperations _clusterManagersRestClient;
        private ClientDiagnostics _clustersClientDiagnostics;
        private ClustersRestOperations _clustersRestClient;
        private ClientDiagnostics _kubernetesClustersClientDiagnostics;
        private KubernetesClustersRestOperations _kubernetesClustersRestClient;
        private ClientDiagnostics _l2NetworksClientDiagnostics;
        private L2NetworksRestOperations _l2NetworksRestClient;
        private ClientDiagnostics _l3NetworksClientDiagnostics;
        private L3NetworksRestOperations _l3NetworksRestClient;
        private ClientDiagnostics _rackSkusClientDiagnostics;
        private RackSkusRestOperations _rackSkusRestClient;
        private ClientDiagnostics _racksClientDiagnostics;
        private RacksRestOperations _racksRestClient;
        private ClientDiagnostics _storageAppliancesClientDiagnostics;
        private StorageAppliancesRestOperations _storageAppliancesRestClient;
        private ClientDiagnostics _trunkedNetworksClientDiagnostics;
        private TrunkedNetworksRestOperations _trunkedNetworksRestClient;
        private ClientDiagnostics _virtualMachinesClientDiagnostics;
        private VirtualMachinesRestOperations _virtualMachinesRestClient;
        private ClientDiagnostics _volumesClientDiagnostics;
        private VolumesRestOperations _volumesRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics BareMetalMachinesClientDiagnostics => _bareMetalMachinesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.NetworkCloud", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private BareMetalMachinesRestOperations BareMetalMachinesRestClient => _bareMetalMachinesRestClient ??= new BareMetalMachinesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics CloudServicesNetworksClientDiagnostics => _cloudServicesNetworksClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.NetworkCloud", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private CloudServicesNetworksRestOperations CloudServicesNetworksRestClient => _cloudServicesNetworksRestClient ??= new CloudServicesNetworksRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics ClusterManagersClientDiagnostics => _clusterManagersClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.NetworkCloud", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private ClusterManagersRestOperations ClusterManagersRestClient => _clusterManagersRestClient ??= new ClusterManagersRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics ClustersClientDiagnostics => _clustersClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.NetworkCloud", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private ClustersRestOperations ClustersRestClient => _clustersRestClient ??= new ClustersRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics KubernetesClustersClientDiagnostics => _kubernetesClustersClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.NetworkCloud", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private KubernetesClustersRestOperations KubernetesClustersRestClient => _kubernetesClustersRestClient ??= new KubernetesClustersRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics L2NetworksClientDiagnostics => _l2NetworksClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.NetworkCloud", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private L2NetworksRestOperations L2NetworksRestClient => _l2NetworksRestClient ??= new L2NetworksRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics L3NetworksClientDiagnostics => _l3NetworksClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.NetworkCloud", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private L3NetworksRestOperations L3NetworksRestClient => _l3NetworksRestClient ??= new L3NetworksRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics RackSkusClientDiagnostics => _rackSkusClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.NetworkCloud", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private RackSkusRestOperations RackSkusRestClient => _rackSkusRestClient ??= new RackSkusRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics RacksClientDiagnostics => _racksClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.NetworkCloud", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private RacksRestOperations RacksRestClient => _racksRestClient ??= new RacksRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics StorageAppliancesClientDiagnostics => _storageAppliancesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.NetworkCloud", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private StorageAppliancesRestOperations StorageAppliancesRestClient => _storageAppliancesRestClient ??= new StorageAppliancesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics TrunkedNetworksClientDiagnostics => _trunkedNetworksClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.NetworkCloud", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private TrunkedNetworksRestOperations TrunkedNetworksRestClient => _trunkedNetworksRestClient ??= new TrunkedNetworksRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics VirtualMachinesClientDiagnostics => _virtualMachinesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.NetworkCloud", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private VirtualMachinesRestOperations VirtualMachinesRestClient => _virtualMachinesRestClient ??= new VirtualMachinesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics VolumesClientDiagnostics => _volumesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.NetworkCloud", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private VolumesRestOperations VolumesRestClient => _volumesRestClient ??= new VolumesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Get a list of bare metal machines in the provided subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/bareMetalMachines</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BareMetalMachines_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="BareMetalMachine" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<BareMetalMachine> GetBareMetalMachinesBySubscriptionAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => BareMetalMachinesRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => BareMetalMachinesRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, BareMetalMachine.DeserializeBareMetalMachine, BareMetalMachinesClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetBareMetalMachinesBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a list of bare metal machines in the provided subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/bareMetalMachines</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>BareMetalMachines_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="BareMetalMachine" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<BareMetalMachine> GetBareMetalMachinesBySubscription(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => BareMetalMachinesRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => BareMetalMachinesRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, BareMetalMachine.DeserializeBareMetalMachine, BareMetalMachinesClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetBareMetalMachinesBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a list of cloud services networks in the provided subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/cloudServicesNetworks</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CloudServicesNetworks_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CloudServicesNetwork" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CloudServicesNetwork> GetCloudServicesNetworksBySubscriptionAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CloudServicesNetworksRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CloudServicesNetworksRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, CloudServicesNetwork.DeserializeCloudServicesNetwork, CloudServicesNetworksClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetCloudServicesNetworksBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a list of cloud services networks in the provided subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/cloudServicesNetworks</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CloudServicesNetworks_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CloudServicesNetwork" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CloudServicesNetwork> GetCloudServicesNetworksBySubscription(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CloudServicesNetworksRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CloudServicesNetworksRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, CloudServicesNetwork.DeserializeCloudServicesNetwork, CloudServicesNetworksClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetCloudServicesNetworksBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a list of cluster managers in the provided subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/clusterManagers</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ClusterManagers_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ClusterManager" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ClusterManager> GetClusterManagersBySubscriptionAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ClusterManagersRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ClusterManagersRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, ClusterManager.DeserializeClusterManager, ClusterManagersClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetClusterManagersBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a list of cluster managers in the provided subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/clusterManagers</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ClusterManagers_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ClusterManager" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ClusterManager> GetClusterManagersBySubscription(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ClusterManagersRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ClusterManagersRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, ClusterManager.DeserializeClusterManager, ClusterManagersClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetClusterManagersBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a list of clusters in the provided subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/clusters</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Clusters_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Cluster" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Cluster> GetClustersBySubscriptionAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ClustersRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ClustersRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, Cluster.DeserializeCluster, ClustersClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetClustersBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a list of clusters in the provided subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/clusters</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Clusters_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Cluster" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Cluster> GetClustersBySubscription(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ClustersRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ClustersRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, Cluster.DeserializeCluster, ClustersClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetClustersBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a list of Kubernetes clusters in the provided subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/kubernetesClusters</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>KubernetesClusters_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="KubernetesCluster" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<KubernetesCluster> GetKubernetesClustersBySubscriptionAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => KubernetesClustersRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => KubernetesClustersRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, KubernetesCluster.DeserializeKubernetesCluster, KubernetesClustersClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetKubernetesClustersBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a list of Kubernetes clusters in the provided subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/kubernetesClusters</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>KubernetesClusters_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="KubernetesCluster" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<KubernetesCluster> GetKubernetesClustersBySubscription(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => KubernetesClustersRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => KubernetesClustersRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, KubernetesCluster.DeserializeKubernetesCluster, KubernetesClustersClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetKubernetesClustersBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a list of layer 2 (L2) networks in the provided subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/l2Networks</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>L2Networks_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="L2Network" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<L2Network> GetL2NetworksBySubscriptionAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => L2NetworksRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => L2NetworksRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, L2Network.DeserializeL2Network, L2NetworksClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetL2NetworksBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a list of layer 2 (L2) networks in the provided subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/l2Networks</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>L2Networks_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="L2Network" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<L2Network> GetL2NetworksBySubscription(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => L2NetworksRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => L2NetworksRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, L2Network.DeserializeL2Network, L2NetworksClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetL2NetworksBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a list of layer 3 (L3) networks in the provided subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/l3Networks</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>L3Networks_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="L3Network" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<L3Network> GetL3NetworksBySubscriptionAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => L3NetworksRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => L3NetworksRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, L3Network.DeserializeL3Network, L3NetworksClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetL3NetworksBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a list of layer 3 (L3) networks in the provided subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/l3Networks</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>L3Networks_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="L3Network" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<L3Network> GetL3NetworksBySubscription(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => L3NetworksRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => L3NetworksRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, L3Network.DeserializeL3Network, L3NetworksClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetL3NetworksBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a list of rack SKUs in the provided subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/rackSkus</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>RackSkus_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="RackSku" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<RackSku> GetRackSkusBySubscriptionAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => RackSkusRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => RackSkusRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, RackSku.DeserializeRackSku, RackSkusClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetRackSkusBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a list of rack SKUs in the provided subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/rackSkus</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>RackSkus_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="RackSku" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<RackSku> GetRackSkusBySubscription(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => RackSkusRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => RackSkusRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, RackSku.DeserializeRackSku, RackSkusClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetRackSkusBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get the properties of the provided rack SKU.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/rackSkus/{rackSkuName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>RackSkus_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="rackSkuName"> The name of the rack SKU. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<RackSku>> GetRackSkuAsync(string rackSkuName, CancellationToken cancellationToken = default)
        {
            using var scope = RackSkusClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetRackSku");
            scope.Start();
            try
            {
                var response = await RackSkusRestClient.GetAsync(Id.SubscriptionId, rackSkuName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the properties of the provided rack SKU.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/rackSkus/{rackSkuName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>RackSkus_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="rackSkuName"> The name of the rack SKU. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<RackSku> GetRackSku(string rackSkuName, CancellationToken cancellationToken = default)
        {
            using var scope = RackSkusClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetRackSku");
            scope.Start();
            try
            {
                var response = RackSkusRestClient.Get(Id.SubscriptionId, rackSkuName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a list of racks in the provided subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/racks</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Racks_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Rack" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Rack> GetRacksBySubscriptionAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => RacksRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => RacksRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, Rack.DeserializeRack, RacksClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetRacksBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a list of racks in the provided subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/racks</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Racks_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Rack" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Rack> GetRacksBySubscription(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => RacksRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => RacksRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, Rack.DeserializeRack, RacksClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetRacksBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a list of storage appliances in the provided subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/storageAppliances</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StorageAppliances_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="StorageAppliance" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<StorageAppliance> GetStorageAppliancesBySubscriptionAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => StorageAppliancesRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => StorageAppliancesRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, StorageAppliance.DeserializeStorageAppliance, StorageAppliancesClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetStorageAppliancesBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a list of storage appliances in the provided subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/storageAppliances</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>StorageAppliances_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="StorageAppliance" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<StorageAppliance> GetStorageAppliancesBySubscription(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => StorageAppliancesRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => StorageAppliancesRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, StorageAppliance.DeserializeStorageAppliance, StorageAppliancesClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetStorageAppliancesBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a list of trunked networks in the provided subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/trunkedNetworks</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TrunkedNetworks_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="TrunkedNetwork" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<TrunkedNetwork> GetTrunkedNetworksBySubscriptionAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => TrunkedNetworksRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => TrunkedNetworksRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, TrunkedNetwork.DeserializeTrunkedNetwork, TrunkedNetworksClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetTrunkedNetworksBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a list of trunked networks in the provided subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/trunkedNetworks</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TrunkedNetworks_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="TrunkedNetwork" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<TrunkedNetwork> GetTrunkedNetworksBySubscription(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => TrunkedNetworksRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => TrunkedNetworksRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, TrunkedNetwork.DeserializeTrunkedNetwork, TrunkedNetworksClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetTrunkedNetworksBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a list of virtual machines in the provided subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/virtualMachines</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>VirtualMachines_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="VirtualMachine" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<VirtualMachine> GetVirtualMachinesBySubscriptionAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => VirtualMachinesRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => VirtualMachinesRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, VirtualMachine.DeserializeVirtualMachine, VirtualMachinesClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetVirtualMachinesBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a list of virtual machines in the provided subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/virtualMachines</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>VirtualMachines_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="VirtualMachine" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<VirtualMachine> GetVirtualMachinesBySubscription(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => VirtualMachinesRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => VirtualMachinesRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, VirtualMachine.DeserializeVirtualMachine, VirtualMachinesClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetVirtualMachinesBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a list of volumes in the provided subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/volumes</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Volumes_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Volume" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Volume> GetVolumesBySubscriptionAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => VolumesRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => VolumesRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, Volume.DeserializeVolume, VolumesClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetVolumesBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get a list of volumes in the provided subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/volumes</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Volumes_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Volume" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Volume> GetVolumesBySubscription(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => VolumesRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => VolumesRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, Volume.DeserializeVolume, VolumesClientDiagnostics, Pipeline, "SubscriptionResourceExtensionClient.GetVolumesBySubscription", "value", "nextLink", cancellationToken);
        }
    }
}
