// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Developer.DevCenter.Models;

namespace Azure.Developer.DevCenter
{
    // Data plane generated client.
    /// <summary> The DevBoxes service client. </summary>
    public partial class DevBoxesClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of DevBoxesClient for mocking. </summary>
        protected DevBoxesClient()
        {
        }

        /// <summary> Initializes a new instance of DevBoxesClient. </summary>
        /// <param name="endpoint"> The Uri to use. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public DevBoxesClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new AzureDeveloperDevCenterClientOptions())
        {
        }

        /// <summary> Initializes a new instance of DevBoxesClient. </summary>
        /// <param name="endpoint"> The Uri to use. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public DevBoxesClient(Uri endpoint, TokenCredential credential, AzureDeveloperDevCenterClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new AzureDeveloperDevCenterClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Gets a pool. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="poolName"> The name of a pool of Dev Boxes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="poolName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/> or <paramref name="poolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetPoolAsync(string,string,CancellationToken)']/*" />
        public virtual async Task<Response<Pool>> GetPoolAsync(string projectName, string poolName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(poolName, nameof(poolName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetPoolAsync(projectName, poolName, context).ConfigureAwait(false);
            return Response.FromValue(Pool.FromResponse(response), response);
        }

        /// <summary> Gets a pool. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="poolName"> The name of a pool of Dev Boxes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="poolName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/> or <paramref name="poolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetPool(string,string,CancellationToken)']/*" />
        public virtual Response<Pool> GetPool(string projectName, string poolName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(poolName, nameof(poolName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetPool(projectName, poolName, context);
            return Response.FromValue(Pool.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Gets a pool
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetPoolAsync(string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="poolName"> The name of a pool of Dev Boxes. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="poolName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/> or <paramref name="poolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetPoolAsync(string,string,RequestContext)']/*" />
        public virtual async Task<Response> GetPoolAsync(string projectName, string poolName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(poolName, nameof(poolName));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.GetPool");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPoolRequest(projectName, poolName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets a pool
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetPool(string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="poolName"> The name of a pool of Dev Boxes. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="poolName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/> or <paramref name="poolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetPool(string,string,RequestContext)']/*" />
        public virtual Response GetPool(string projectName, string poolName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(poolName, nameof(poolName));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.GetPool");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPoolRequest(projectName, poolName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a schedule. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="poolName"> The name of a pool of Dev Boxes. </param>
        /// <param name="scheduleName"> The name of a schedule. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="poolName"/> or <paramref name="scheduleName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="poolName"/> or <paramref name="scheduleName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetScheduleByPoolAsync(string,string,string,CancellationToken)']/*" />
        public virtual async Task<Response<Schedule>> GetScheduleByPoolAsync(string projectName, string poolName, string scheduleName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(poolName, nameof(poolName));
            Argument.AssertNotNullOrEmpty(scheduleName, nameof(scheduleName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetScheduleByPoolAsync(projectName, poolName, scheduleName, context).ConfigureAwait(false);
            return Response.FromValue(Schedule.FromResponse(response), response);
        }

        /// <summary> Gets a schedule. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="poolName"> The name of a pool of Dev Boxes. </param>
        /// <param name="scheduleName"> The name of a schedule. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="poolName"/> or <paramref name="scheduleName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="poolName"/> or <paramref name="scheduleName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetScheduleByPool(string,string,string,CancellationToken)']/*" />
        public virtual Response<Schedule> GetScheduleByPool(string projectName, string poolName, string scheduleName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(poolName, nameof(poolName));
            Argument.AssertNotNullOrEmpty(scheduleName, nameof(scheduleName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetScheduleByPool(projectName, poolName, scheduleName, context);
            return Response.FromValue(Schedule.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Gets a schedule.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetScheduleByPoolAsync(string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="poolName"> The name of a pool of Dev Boxes. </param>
        /// <param name="scheduleName"> The name of a schedule. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="poolName"/> or <paramref name="scheduleName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="poolName"/> or <paramref name="scheduleName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetScheduleByPoolAsync(string,string,string,RequestContext)']/*" />
        public virtual async Task<Response> GetScheduleByPoolAsync(string projectName, string poolName, string scheduleName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(poolName, nameof(poolName));
            Argument.AssertNotNullOrEmpty(scheduleName, nameof(scheduleName));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.GetScheduleByPool");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetScheduleByPoolRequest(projectName, poolName, scheduleName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets a schedule.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetScheduleByPool(string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="poolName"> The name of a pool of Dev Boxes. </param>
        /// <param name="scheduleName"> The name of a schedule. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="poolName"/> or <paramref name="scheduleName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="poolName"/> or <paramref name="scheduleName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetScheduleByPool(string,string,string,RequestContext)']/*" />
        public virtual Response GetScheduleByPool(string projectName, string poolName, string scheduleName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(poolName, nameof(poolName));
            Argument.AssertNotNullOrEmpty(scheduleName, nameof(scheduleName));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.GetScheduleByPool");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetScheduleByPoolRequest(projectName, poolName, scheduleName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a Dev Box. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetDevBoxByUserAsync(string,string,string,CancellationToken)']/*" />
        public virtual async Task<Response<DevBox>> GetDevBoxByUserAsync(string projectName, string userId, string devBoxName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetDevBoxByUserAsync(projectName, userId, devBoxName, context).ConfigureAwait(false);
            return Response.FromValue(DevBox.FromResponse(response), response);
        }

        /// <summary> Gets a Dev Box. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetDevBoxByUser(string,string,string,CancellationToken)']/*" />
        public virtual Response<DevBox> GetDevBoxByUser(string projectName, string userId, string devBoxName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetDevBoxByUser(projectName, userId, devBoxName, context);
            return Response.FromValue(DevBox.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Gets a Dev Box
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetDevBoxByUserAsync(string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetDevBoxByUserAsync(string,string,string,RequestContext)']/*" />
        public virtual async Task<Response> GetDevBoxByUserAsync(string projectName, string userId, string devBoxName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.GetDevBoxByUser");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDevBoxByUserRequest(projectName, userId, devBoxName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets a Dev Box
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetDevBoxByUser(string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetDevBoxByUser(string,string,string,RequestContext)']/*" />
        public virtual Response GetDevBoxByUser(string projectName, string userId, string devBoxName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.GetDevBoxByUser");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDevBoxByUserRequest(projectName, userId, devBoxName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or replaces a Dev Box. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="body"> Represents a environment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/>, <paramref name="devBoxName"/> or <paramref name="body"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='CreateDevBoxAsync(string,string,string,DevBox,CancellationToken)']/*" />
        public virtual async Task<Response<DevBox>> CreateDevBoxAsync(string projectName, string userId, string devBoxName, DevBox body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));
            Argument.AssertNotNull(body, nameof(body));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await CreateDevBoxAsync(projectName, userId, devBoxName, body.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(DevBox.FromResponse(response), response);
        }

        /// <summary> Creates or replaces a Dev Box. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="body"> Represents a environment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/>, <paramref name="devBoxName"/> or <paramref name="body"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='CreateDevBox(string,string,string,DevBox,CancellationToken)']/*" />
        public virtual Response<DevBox> CreateDevBox(string projectName, string userId, string devBoxName, DevBox body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));
            Argument.AssertNotNull(body, nameof(body));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = CreateDevBox(projectName, userId, devBoxName, body.ToRequestContent(), context);
            return Response.FromValue(DevBox.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Creates or replaces a Dev Box.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateDevBoxAsync(string,string,string,DevBox,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/>, <paramref name="devBoxName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='CreateDevBoxAsync(string,string,string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateDevBoxAsync(string projectName, string userId, string devBoxName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.CreateDevBox");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateDevBoxRequest(projectName, userId, devBoxName, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates or replaces a Dev Box.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateDevBox(string,string,string,DevBox,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/>, <paramref name="devBoxName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='CreateDevBox(string,string,string,RequestContent,RequestContext)']/*" />
        public virtual Response CreateDevBox(string projectName, string userId, string devBoxName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.CreateDevBox");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateDevBoxRequest(projectName, userId, devBoxName, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a Dev Box. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='DeleteDevBoxAsync(string,string,string,CancellationToken)']/*" />
        public virtual async Task<Response<OperationStatus>> DeleteDevBoxAsync(string projectName, string userId, string devBoxName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await DeleteDevBoxAsync(projectName, userId, devBoxName, context).ConfigureAwait(false);
            return Response.FromValue(OperationStatus.FromResponse(response), response);
        }

        /// <summary> Deletes a Dev Box. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='DeleteDevBox(string,string,string,CancellationToken)']/*" />
        public virtual Response<OperationStatus> DeleteDevBox(string projectName, string userId, string devBoxName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = DeleteDevBox(projectName, userId, devBoxName, context);
            return Response.FromValue(OperationStatus.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Deletes a Dev Box.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="DeleteDevBoxAsync(string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='DeleteDevBoxAsync(string,string,string,RequestContext)']/*" />
        public virtual async Task<Response> DeleteDevBoxAsync(string projectName, string userId, string devBoxName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.DeleteDevBox");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteDevBoxRequest(projectName, userId, devBoxName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Deletes a Dev Box.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="DeleteDevBox(string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='DeleteDevBox(string,string,string,RequestContext)']/*" />
        public virtual Response DeleteDevBox(string projectName, string userId, string devBoxName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.DeleteDevBox");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteDevBoxRequest(projectName, userId, devBoxName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Starts a Dev Box. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='StartDevBoxAsync(string,string,string,CancellationToken)']/*" />
        public virtual async Task<Response<OperationStatus>> StartDevBoxAsync(string projectName, string userId, string devBoxName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await StartDevBoxAsync(projectName, userId, devBoxName, context).ConfigureAwait(false);
            return Response.FromValue(OperationStatus.FromResponse(response), response);
        }

        /// <summary> Starts a Dev Box. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='StartDevBox(string,string,string,CancellationToken)']/*" />
        public virtual Response<OperationStatus> StartDevBox(string projectName, string userId, string devBoxName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = StartDevBox(projectName, userId, devBoxName, context);
            return Response.FromValue(OperationStatus.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Starts a Dev Box
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="StartDevBoxAsync(string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='StartDevBoxAsync(string,string,string,RequestContext)']/*" />
        public virtual async Task<Response> StartDevBoxAsync(string projectName, string userId, string devBoxName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.StartDevBox");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStartDevBoxRequest(projectName, userId, devBoxName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Starts a Dev Box
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="StartDevBox(string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='StartDevBox(string,string,string,RequestContext)']/*" />
        public virtual Response StartDevBox(string projectName, string userId, string devBoxName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.StartDevBox");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStartDevBoxRequest(projectName, userId, devBoxName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Stops a Dev Box. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="hibernate"> Optional parameter to hibernate the dev box. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='StopDevBoxAsync(string,string,string,bool,CancellationToken)']/*" />
        public virtual async Task<Response<OperationStatus>> StopDevBoxAsync(string projectName, string userId, string devBoxName, bool hibernate, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await StopDevBoxAsync(projectName, userId, devBoxName, hibernate, context).ConfigureAwait(false);
            return Response.FromValue(OperationStatus.FromResponse(response), response);
        }

        /// <summary> Stops a Dev Box. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="hibernate"> Optional parameter to hibernate the dev box. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='StopDevBox(string,string,string,bool,CancellationToken)']/*" />
        public virtual Response<OperationStatus> StopDevBox(string projectName, string userId, string devBoxName, bool hibernate, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = StopDevBox(projectName, userId, devBoxName, hibernate, context);
            return Response.FromValue(OperationStatus.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Stops a Dev Box
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="StopDevBoxAsync(string,string,string,bool,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="hibernate"> Optional parameter to hibernate the dev box. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='StopDevBoxAsync(string,string,string,bool,RequestContext)']/*" />
        public virtual async Task<Response> StopDevBoxAsync(string projectName, string userId, string devBoxName, bool hibernate, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.StopDevBox");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStopDevBoxRequest(projectName, userId, devBoxName, hibernate, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Stops a Dev Box
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="StopDevBox(string,string,string,bool,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="hibernate"> Optional parameter to hibernate the dev box. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='StopDevBox(string,string,string,bool,RequestContext)']/*" />
        public virtual Response StopDevBox(string projectName, string userId, string devBoxName, bool hibernate, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.StopDevBox");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStopDevBoxRequest(projectName, userId, devBoxName, hibernate, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Restarts a Dev Box. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='RestartDevBoxAsync(string,string,string,CancellationToken)']/*" />
        public virtual async Task<Response<OperationStatus>> RestartDevBoxAsync(string projectName, string userId, string devBoxName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await RestartDevBoxAsync(projectName, userId, devBoxName, context).ConfigureAwait(false);
            return Response.FromValue(OperationStatus.FromResponse(response), response);
        }

        /// <summary> Restarts a Dev Box. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='RestartDevBox(string,string,string,CancellationToken)']/*" />
        public virtual Response<OperationStatus> RestartDevBox(string projectName, string userId, string devBoxName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = RestartDevBox(projectName, userId, devBoxName, context);
            return Response.FromValue(OperationStatus.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Restarts a Dev Box
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="RestartDevBoxAsync(string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='RestartDevBoxAsync(string,string,string,RequestContext)']/*" />
        public virtual async Task<Response> RestartDevBoxAsync(string projectName, string userId, string devBoxName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.RestartDevBox");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRestartDevBoxRequest(projectName, userId, devBoxName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Restarts a Dev Box
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="RestartDevBox(string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='RestartDevBox(string,string,string,RequestContext)']/*" />
        public virtual Response RestartDevBox(string projectName, string userId, string devBoxName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.RestartDevBox");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRestartDevBoxRequest(projectName, userId, devBoxName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets RDP Connection info. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetRemoteConnectionAsync(string,string,string,CancellationToken)']/*" />
        public virtual async Task<Response<RemoteConnection>> GetRemoteConnectionAsync(string projectName, string userId, string devBoxName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetRemoteConnectionAsync(projectName, userId, devBoxName, context).ConfigureAwait(false);
            return Response.FromValue(RemoteConnection.FromResponse(response), response);
        }

        /// <summary> Gets RDP Connection info. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetRemoteConnection(string,string,string,CancellationToken)']/*" />
        public virtual Response<RemoteConnection> GetRemoteConnection(string projectName, string userId, string devBoxName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetRemoteConnection(projectName, userId, devBoxName, context);
            return Response.FromValue(RemoteConnection.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Gets RDP Connection info
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetRemoteConnectionAsync(string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetRemoteConnectionAsync(string,string,string,RequestContext)']/*" />
        public virtual async Task<Response> GetRemoteConnectionAsync(string projectName, string userId, string devBoxName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.GetRemoteConnection");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRemoteConnectionRequest(projectName, userId, devBoxName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets RDP Connection info
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetRemoteConnection(string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetRemoteConnection(string,string,string,RequestContext)']/*" />
        public virtual Response GetRemoteConnection(string projectName, string userId, string devBoxName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.GetRemoteConnection");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRemoteConnectionRequest(projectName, userId, devBoxName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets an action. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="actionName"> The name of an action that will take place on a Dev Box. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/>, <paramref name="devBoxName"/> or <paramref name="actionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/>, <paramref name="devBoxName"/> or <paramref name="actionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetActionAsync(string,string,string,string,CancellationToken)']/*" />
        public virtual async Task<Response<DevBoxAction>> GetActionAsync(string projectName, string userId, string devBoxName, string actionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));
            Argument.AssertNotNullOrEmpty(actionName, nameof(actionName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetActionAsync(projectName, userId, devBoxName, actionName, context).ConfigureAwait(false);
            return Response.FromValue(DevBoxAction.FromResponse(response), response);
        }

        /// <summary> Gets an action. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="actionName"> The name of an action that will take place on a Dev Box. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/>, <paramref name="devBoxName"/> or <paramref name="actionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/>, <paramref name="devBoxName"/> or <paramref name="actionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetAction(string,string,string,string,CancellationToken)']/*" />
        public virtual Response<DevBoxAction> GetAction(string projectName, string userId, string devBoxName, string actionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));
            Argument.AssertNotNullOrEmpty(actionName, nameof(actionName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetAction(projectName, userId, devBoxName, actionName, context);
            return Response.FromValue(DevBoxAction.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Gets an action.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetActionAsync(string,string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="actionName"> The name of an action that will take place on a Dev Box. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/>, <paramref name="devBoxName"/> or <paramref name="actionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/>, <paramref name="devBoxName"/> or <paramref name="actionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetActionAsync(string,string,string,string,RequestContext)']/*" />
        public virtual async Task<Response> GetActionAsync(string projectName, string userId, string devBoxName, string actionName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));
            Argument.AssertNotNullOrEmpty(actionName, nameof(actionName));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.GetAction");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetActionRequest(projectName, userId, devBoxName, actionName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets an action.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAction(string,string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="actionName"> The name of an action that will take place on a Dev Box. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/>, <paramref name="devBoxName"/> or <paramref name="actionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/>, <paramref name="devBoxName"/> or <paramref name="actionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetAction(string,string,string,string,RequestContext)']/*" />
        public virtual Response GetAction(string projectName, string userId, string devBoxName, string actionName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));
            Argument.AssertNotNullOrEmpty(actionName, nameof(actionName));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.GetAction");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetActionRequest(projectName, userId, devBoxName, actionName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Skips an occurrence of an action.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="actionName"> The name of an action that will take place on a Dev Box. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/>, <paramref name="devBoxName"/> or <paramref name="actionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/>, <paramref name="devBoxName"/> or <paramref name="actionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='SkipActionAsync(string,string,string,string,RequestContext)']/*" />
        public virtual async Task<Response> SkipActionAsync(string projectName, string userId, string devBoxName, string actionName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));
            Argument.AssertNotNullOrEmpty(actionName, nameof(actionName));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.SkipAction");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSkipActionRequest(projectName, userId, devBoxName, actionName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Skips an occurrence of an action.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="actionName"> The name of an action that will take place on a Dev Box. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/>, <paramref name="devBoxName"/> or <paramref name="actionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/>, <paramref name="devBoxName"/> or <paramref name="actionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='SkipAction(string,string,string,string,RequestContext)']/*" />
        public virtual Response SkipAction(string projectName, string userId, string devBoxName, string actionName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));
            Argument.AssertNotNullOrEmpty(actionName, nameof(actionName));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.SkipAction");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSkipActionRequest(projectName, userId, devBoxName, actionName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delays the occurrence of an action. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="actionName"> The name of an action that will take place on a Dev Box. </param>
        /// <param name="until"> The time to delay the Dev Box action or actions until. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/>, <paramref name="devBoxName"/> or <paramref name="actionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/>, <paramref name="devBoxName"/> or <paramref name="actionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='DelayActionAsync(string,string,string,string,DateTimeOffset,CancellationToken)']/*" />
        public virtual async Task<Response<DevBoxAction>> DelayActionAsync(string projectName, string userId, string devBoxName, string actionName, DateTimeOffset until, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));
            Argument.AssertNotNullOrEmpty(actionName, nameof(actionName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await DelayActionAsync(projectName, userId, devBoxName, actionName, until, context).ConfigureAwait(false);
            return Response.FromValue(DevBoxAction.FromResponse(response), response);
        }

        /// <summary> Delays the occurrence of an action. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="actionName"> The name of an action that will take place on a Dev Box. </param>
        /// <param name="until"> The time to delay the Dev Box action or actions until. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/>, <paramref name="devBoxName"/> or <paramref name="actionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/>, <paramref name="devBoxName"/> or <paramref name="actionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='DelayAction(string,string,string,string,DateTimeOffset,CancellationToken)']/*" />
        public virtual Response<DevBoxAction> DelayAction(string projectName, string userId, string devBoxName, string actionName, DateTimeOffset until, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));
            Argument.AssertNotNullOrEmpty(actionName, nameof(actionName));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = DelayAction(projectName, userId, devBoxName, actionName, until, context);
            return Response.FromValue(DevBoxAction.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Delays the occurrence of an action.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="DelayActionAsync(string,string,string,string,DateTimeOffset,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="actionName"> The name of an action that will take place on a Dev Box. </param>
        /// <param name="until"> The time to delay the Dev Box action or actions until. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/>, <paramref name="devBoxName"/> or <paramref name="actionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/>, <paramref name="devBoxName"/> or <paramref name="actionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='DelayActionAsync(string,string,string,string,DateTimeOffset,RequestContext)']/*" />
        public virtual async Task<Response> DelayActionAsync(string projectName, string userId, string devBoxName, string actionName, DateTimeOffset until, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));
            Argument.AssertNotNullOrEmpty(actionName, nameof(actionName));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.DelayAction");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDelayActionRequest(projectName, userId, devBoxName, actionName, until, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Delays the occurrence of an action.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="DelayAction(string,string,string,string,DateTimeOffset,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="actionName"> The name of an action that will take place on a Dev Box. </param>
        /// <param name="until"> The time to delay the Dev Box action or actions until. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/>, <paramref name="devBoxName"/> or <paramref name="actionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/>, <paramref name="devBoxName"/> or <paramref name="actionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='DelayAction(string,string,string,string,DateTimeOffset,RequestContext)']/*" />
        public virtual Response DelayAction(string projectName, string userId, string devBoxName, string actionName, DateTimeOffset until, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));
            Argument.AssertNotNullOrEmpty(actionName, nameof(actionName));

            using var scope = ClientDiagnostics.CreateScope("DevBoxesClient.DelayAction");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDelayActionRequest(projectName, userId, devBoxName, actionName, until, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists available pools. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        /// <param name="filter"> An OData filter clause to apply to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="filter"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetPoolsAsync(string,int,string,CancellationToken)']/*" />
        public virtual AsyncPageable<Pool> GetPoolsAsync(string projectName, int maxCount, string filter, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNull(filter, nameof(filter));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetPoolsRequest(projectName, maxCount, filter, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetPoolsNextPageRequest(nextLink, projectName, maxCount, filter, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, Pool.DeserializePool, ClientDiagnostics, _pipeline, "DevBoxesClient.GetPools", "value", "nextLink", context);
        }

        /// <summary> Lists available pools. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        /// <param name="filter"> An OData filter clause to apply to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="filter"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetPools(string,int,string,CancellationToken)']/*" />
        public virtual Pageable<Pool> GetPools(string projectName, int maxCount, string filter, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNull(filter, nameof(filter));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetPoolsRequest(projectName, maxCount, filter, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetPoolsNextPageRequest(nextLink, projectName, maxCount, filter, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, Pool.DeserializePool, ClientDiagnostics, _pipeline, "DevBoxesClient.GetPools", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Lists available pools
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetPoolsAsync(string,int,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        /// <param name="filter"> An OData filter clause to apply to the operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="filter"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetPoolsAsync(string,int,string,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetPoolsAsync(string projectName, int maxCount, string filter, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNull(filter, nameof(filter));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetPoolsRequest(projectName, maxCount, filter, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetPoolsNextPageRequest(nextLink, projectName, maxCount, filter, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "DevBoxesClient.GetPools", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Lists available pools
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetPools(string,int,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        /// <param name="filter"> An OData filter clause to apply to the operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="filter"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetPools(string,int,string,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetPools(string projectName, int maxCount, string filter, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNull(filter, nameof(filter));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetPoolsRequest(projectName, maxCount, filter, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetPoolsNextPageRequest(nextLink, projectName, maxCount, filter, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "DevBoxesClient.GetPools", "value", "nextLink", context);
        }

        /// <summary> Lists available schedules for a pool. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="poolName"> The name of a pool of Dev Boxes. </param>
        /// <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        /// <param name="filter"> An OData filter clause to apply to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="poolName"/> or <paramref name="filter"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/> or <paramref name="poolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetSchedulesByPoolAsync(string,string,int,string,CancellationToken)']/*" />
        public virtual AsyncPageable<Schedule> GetSchedulesByPoolAsync(string projectName, string poolName, int maxCount, string filter, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(poolName, nameof(poolName));
            Argument.AssertNotNull(filter, nameof(filter));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetSchedulesByPoolRequest(projectName, poolName, maxCount, filter, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetSchedulesByPoolNextPageRequest(nextLink, projectName, poolName, maxCount, filter, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, Schedule.DeserializeSchedule, ClientDiagnostics, _pipeline, "DevBoxesClient.GetSchedulesByPool", "value", "nextLink", context);
        }

        /// <summary> Lists available schedules for a pool. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="poolName"> The name of a pool of Dev Boxes. </param>
        /// <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        /// <param name="filter"> An OData filter clause to apply to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="poolName"/> or <paramref name="filter"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/> or <paramref name="poolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetSchedulesByPool(string,string,int,string,CancellationToken)']/*" />
        public virtual Pageable<Schedule> GetSchedulesByPool(string projectName, string poolName, int maxCount, string filter, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(poolName, nameof(poolName));
            Argument.AssertNotNull(filter, nameof(filter));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetSchedulesByPoolRequest(projectName, poolName, maxCount, filter, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetSchedulesByPoolNextPageRequest(nextLink, projectName, poolName, maxCount, filter, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, Schedule.DeserializeSchedule, ClientDiagnostics, _pipeline, "DevBoxesClient.GetSchedulesByPool", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Lists available schedules for a pool.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSchedulesByPoolAsync(string,string,int,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="poolName"> The name of a pool of Dev Boxes. </param>
        /// <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        /// <param name="filter"> An OData filter clause to apply to the operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="poolName"/> or <paramref name="filter"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/> or <paramref name="poolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetSchedulesByPoolAsync(string,string,int,string,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetSchedulesByPoolAsync(string projectName, string poolName, int maxCount, string filter, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(poolName, nameof(poolName));
            Argument.AssertNotNull(filter, nameof(filter));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetSchedulesByPoolRequest(projectName, poolName, maxCount, filter, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetSchedulesByPoolNextPageRequest(nextLink, projectName, poolName, maxCount, filter, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "DevBoxesClient.GetSchedulesByPool", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Lists available schedules for a pool.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetSchedulesByPool(string,string,int,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="poolName"> The name of a pool of Dev Boxes. </param>
        /// <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        /// <param name="filter"> An OData filter clause to apply to the operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="poolName"/> or <paramref name="filter"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/> or <paramref name="poolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetSchedulesByPool(string,string,int,string,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetSchedulesByPool(string projectName, string poolName, int maxCount, string filter, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(poolName, nameof(poolName));
            Argument.AssertNotNull(filter, nameof(filter));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetSchedulesByPoolRequest(projectName, poolName, maxCount, filter, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetSchedulesByPoolNextPageRequest(nextLink, projectName, poolName, maxCount, filter, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "DevBoxesClient.GetSchedulesByPool", "value", "nextLink", context);
        }

        /// <summary> Lists Dev Boxes in the project for a particular user. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="filter"> An OData filter clause to apply to the operation. </param>
        /// <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="filter"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/> or <paramref name="userId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetDevBoxesByUserAsync(string,string,string,int,CancellationToken)']/*" />
        public virtual AsyncPageable<DevBox> GetDevBoxesByUserAsync(string projectName, string userId, string filter, int maxCount, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNull(filter, nameof(filter));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetDevBoxesByUserRequest(projectName, userId, filter, maxCount, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetDevBoxesByUserNextPageRequest(nextLink, projectName, userId, filter, maxCount, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, DevBox.DeserializeDevBox, ClientDiagnostics, _pipeline, "DevBoxesClient.GetDevBoxesByUser", "value", "nextLink", context);
        }

        /// <summary> Lists Dev Boxes in the project for a particular user. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="filter"> An OData filter clause to apply to the operation. </param>
        /// <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="filter"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/> or <paramref name="userId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetDevBoxesByUser(string,string,string,int,CancellationToken)']/*" />
        public virtual Pageable<DevBox> GetDevBoxesByUser(string projectName, string userId, string filter, int maxCount, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNull(filter, nameof(filter));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetDevBoxesByUserRequest(projectName, userId, filter, maxCount, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetDevBoxesByUserNextPageRequest(nextLink, projectName, userId, filter, maxCount, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, DevBox.DeserializeDevBox, ClientDiagnostics, _pipeline, "DevBoxesClient.GetDevBoxesByUser", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Lists Dev Boxes in the project for a particular user.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetDevBoxesByUserAsync(string,string,string,int,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="filter"> An OData filter clause to apply to the operation. </param>
        /// <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="filter"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/> or <paramref name="userId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetDevBoxesByUserAsync(string,string,string,int,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetDevBoxesByUserAsync(string projectName, string userId, string filter, int maxCount, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNull(filter, nameof(filter));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetDevBoxesByUserRequest(projectName, userId, filter, maxCount, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetDevBoxesByUserNextPageRequest(nextLink, projectName, userId, filter, maxCount, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "DevBoxesClient.GetDevBoxesByUser", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Lists Dev Boxes in the project for a particular user.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetDevBoxesByUser(string,string,string,int,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="filter"> An OData filter clause to apply to the operation. </param>
        /// <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="filter"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/> or <paramref name="userId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetDevBoxesByUser(string,string,string,int,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetDevBoxesByUser(string projectName, string userId, string filter, int maxCount, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNull(filter, nameof(filter));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetDevBoxesByUserRequest(projectName, userId, filter, maxCount, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetDevBoxesByUserNextPageRequest(nextLink, projectName, userId, filter, maxCount, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "DevBoxesClient.GetDevBoxesByUser", "value", "nextLink", context);
        }

        /// <summary> Lists actions on a Dev Box. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetActionsAsync(string,string,string,CancellationToken)']/*" />
        public virtual AsyncPageable<DevBoxAction> GetActionsAsync(string projectName, string userId, string devBoxName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetActionsRequest(projectName, userId, devBoxName, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetActionsNextPageRequest(nextLink, projectName, userId, devBoxName, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, DevBoxAction.DeserializeDevBoxAction, ClientDiagnostics, _pipeline, "DevBoxesClient.GetActions", "value", "nextLink", context);
        }

        /// <summary> Lists actions on a Dev Box. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetActions(string,string,string,CancellationToken)']/*" />
        public virtual Pageable<DevBoxAction> GetActions(string projectName, string userId, string devBoxName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetActionsRequest(projectName, userId, devBoxName, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetActionsNextPageRequest(nextLink, projectName, userId, devBoxName, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, DevBoxAction.DeserializeDevBoxAction, ClientDiagnostics, _pipeline, "DevBoxesClient.GetActions", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Lists actions on a Dev Box.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetActionsAsync(string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetActionsAsync(string,string,string,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetActionsAsync(string projectName, string userId, string devBoxName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetActionsRequest(projectName, userId, devBoxName, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetActionsNextPageRequest(nextLink, projectName, userId, devBoxName, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "DevBoxesClient.GetActions", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Lists actions on a Dev Box.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetActions(string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='GetActions(string,string,string,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetActions(string projectName, string userId, string devBoxName, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetActionsRequest(projectName, userId, devBoxName, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetActionsNextPageRequest(nextLink, projectName, userId, devBoxName, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "DevBoxesClient.GetActions", "value", "nextLink", context);
        }

        /// <summary> Delays all actions. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="until"> The time to delay the Dev Box action or actions until. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='DelayActionsAsync(string,string,string,DateTimeOffset,CancellationToken)']/*" />
        public virtual AsyncPageable<DevBoxActionDelayResult> DelayActionsAsync(string projectName, string userId, string devBoxName, DateTimeOffset until, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateDelayActionsRequest(projectName, userId, devBoxName, until, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateDelayActionsNextPageRequest(nextLink, projectName, userId, devBoxName, until, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, DevBoxActionDelayResult.DeserializeDevBoxActionDelayResult, ClientDiagnostics, _pipeline, "DevBoxesClient.DelayActions", "value", "nextLink", context);
        }

        /// <summary> Delays all actions. </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="until"> The time to delay the Dev Box action or actions until. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='DelayActions(string,string,string,DateTimeOffset,CancellationToken)']/*" />
        public virtual Pageable<DevBoxActionDelayResult> DelayActions(string projectName, string userId, string devBoxName, DateTimeOffset until, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateDelayActionsRequest(projectName, userId, devBoxName, until, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateDelayActionsNextPageRequest(nextLink, projectName, userId, devBoxName, until, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, DevBoxActionDelayResult.DeserializeDevBoxActionDelayResult, ClientDiagnostics, _pipeline, "DevBoxesClient.DelayActions", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Delays all actions.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="DelayActionsAsync(string,string,string,DateTimeOffset,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="until"> The time to delay the Dev Box action or actions until. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='DelayActionsAsync(string,string,string,DateTimeOffset,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> DelayActionsAsync(string projectName, string userId, string devBoxName, DateTimeOffset until, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateDelayActionsRequest(projectName, userId, devBoxName, until, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateDelayActionsNextPageRequest(nextLink, projectName, userId, devBoxName, until, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "DevBoxesClient.DelayActions", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Delays all actions.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="DelayActions(string,string,string,DateTimeOffset,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        /// <param name="userId">
        /// The AAD object id of the user. If value is 'me', the identity is taken from the
        /// authentication context.
        /// </param>
        /// <param name="devBoxName"> The name of a Dev Box. </param>
        /// <param name="until"> The time to delay the Dev Box action or actions until. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectName"/>, <paramref name="userId"/> or <paramref name="devBoxName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='DelayActions(string,string,string,DateTimeOffset,RequestContext)']/*" />
        public virtual Pageable<BinaryData> DelayActions(string projectName, string userId, string devBoxName, DateTimeOffset until, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(userId, nameof(userId));
            Argument.AssertNotNullOrEmpty(devBoxName, nameof(devBoxName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateDelayActionsRequest(projectName, userId, devBoxName, until, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateDelayActionsNextPageRequest(nextLink, projectName, userId, devBoxName, until, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "DevBoxesClient.DelayActions", "value", "nextLink", context);
        }

        internal HttpMessage CreateGetPoolsRequest(string projectName, int maxCount, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/pools", false);
            uri.AppendQuery("top", maxCount, true);
            uri.AppendQuery("filter", filter, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetPoolRequest(string projectName, string poolName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetSchedulesByPoolRequest(string projectName, string poolName, int maxCount, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolName, true);
            uri.AppendPath("/schedules", false);
            uri.AppendQuery("top", maxCount, true);
            uri.AppendQuery("filter", filter, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetScheduleByPoolRequest(string projectName, string poolName, string scheduleName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolName, true);
            uri.AppendPath("/schedules/", false);
            uri.AppendPath(scheduleName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetDevBoxesByUserRequest(string projectName, string userId, string filter, int maxCount, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/devboxes", false);
            uri.AppendQuery("filter", filter, true);
            uri.AppendQuery("top", maxCount, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetDevBoxByUserRequest(string projectName, string userId, string devBoxName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/devboxes/", false);
            uri.AppendPath(devBoxName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateDevBoxRequest(string projectName, string userId, string devBoxName, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/devboxes/", false);
            uri.AppendPath(devBoxName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteDevBoxRequest(string projectName, string userId, string devBoxName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/devboxes/", false);
            uri.AppendPath(devBoxName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateStartDevBoxRequest(string projectName, string userId, string devBoxName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/devboxes/", false);
            uri.AppendPath(devBoxName, true);
            uri.AppendPath(":start", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateStopDevBoxRequest(string projectName, string userId, string devBoxName, bool hibernate, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/devboxes/", false);
            uri.AppendPath(devBoxName, true);
            uri.AppendPath(":stop", false);
            uri.AppendQuery("hibernate", hibernate, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateRestartDevBoxRequest(string projectName, string userId, string devBoxName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/devboxes/", false);
            uri.AppendPath(devBoxName, true);
            uri.AppendPath(":restart", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetRemoteConnectionRequest(string projectName, string userId, string devBoxName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/devboxes/", false);
            uri.AppendPath(devBoxName, true);
            uri.AppendPath("/remoteConnection", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetActionsRequest(string projectName, string userId, string devBoxName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/devboxes/", false);
            uri.AppendPath(devBoxName, true);
            uri.AppendPath("/actions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetActionRequest(string projectName, string userId, string devBoxName, string actionName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/devboxes/", false);
            uri.AppendPath(devBoxName, true);
            uri.AppendPath("/actions/", false);
            uri.AppendPath(actionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateSkipActionRequest(string projectName, string userId, string devBoxName, string actionName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/devboxes/", false);
            uri.AppendPath(devBoxName, true);
            uri.AppendPath("/actions/", false);
            uri.AppendPath(actionName, true);
            uri.AppendPath(":skip", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDelayActionRequest(string projectName, string userId, string devBoxName, string actionName, DateTimeOffset until, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/devboxes/", false);
            uri.AppendPath(devBoxName, true);
            uri.AppendPath("/actions/", false);
            uri.AppendPath(actionName, true);
            uri.AppendPath(":delay", false);
            uri.AppendQuery("until", until, "O", true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDelayActionsRequest(string projectName, string userId, string devBoxName, DateTimeOffset until, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/projects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/devboxes/", false);
            uri.AppendPath(devBoxName, true);
            uri.AppendPath("/actions:delay", false);
            uri.AppendQuery("until", until, "O", true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetPoolsNextPageRequest(string nextLink, string projectName, int maxCount, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetSchedulesByPoolNextPageRequest(string nextLink, string projectName, string poolName, int maxCount, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetDevBoxesByUserNextPageRequest(string nextLink, string projectName, string userId, string filter, int maxCount, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetActionsNextPageRequest(string nextLink, string projectName, string userId, string devBoxName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDelayActionsNextPageRequest(string nextLink, string projectName, string userId, string devBoxName, DateTimeOffset until, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier200204;
        private static ResponseClassifier ResponseClassifier200204 => _responseClassifier200204 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 204 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
