// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Developer.DevCenter;
using Azure.Developer.DevCenter.Models;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Developer.DevCenter.Samples
{
    public class Samples_EnvironmentsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentByUser()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response response = client.GetEnvironmentByUser("<projectName>", "<userId>", "<environmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentByUser_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response response = await client.GetEnvironmentByUserAsync("<projectName>", "<userId>", "<environmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentByUser_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response<Models.Environment> response = client.GetEnvironmentByUser("<projectName>", "<userId>", "<environmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentByUser_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response<Models.Environment> response = await client.GetEnvironmentByUserAsync("<projectName>", "<userId>", "<environmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentByUser_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response response = client.GetEnvironmentByUser("<projectName>", "<userId>", "<environmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("parameters").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentByUser_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response response = await client.GetEnvironmentByUserAsync("<projectName>", "<userId>", "<environmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("parameters").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentByUser_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response<Models.Environment> response = client.GetEnvironmentByUser("<projectName>", "<userId>", "<environmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentByUser_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response<Models.Environment> response = await client.GetEnvironmentByUserAsync("<projectName>", "<userId>", "<environmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrReplaceEnvironment()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                environmentType = "<environmentType>",
                catalogName = "<catalogName>",
                environmentDefinitionName = "<environmentDefinitionName>",
            });
            Response response = client.CreateOrReplaceEnvironment("<projectName>", "<userId>", "<environmentName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrReplaceEnvironment_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                environmentType = "<environmentType>",
                catalogName = "<catalogName>",
                environmentDefinitionName = "<environmentDefinitionName>",
            });
            Response response = await client.CreateOrReplaceEnvironmentAsync("<projectName>", "<userId>", "<environmentName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrReplaceEnvironment_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Models.Environment body = new Models.Environment("<environmentType>", "<catalogName>", "<environmentDefinitionName>");
            Response<Models.Environment> response = client.CreateOrReplaceEnvironment("<projectName>", "<userId>", "<environmentName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrReplaceEnvironment_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Models.Environment body = new Models.Environment("<environmentType>", "<catalogName>", "<environmentDefinitionName>");
            Response<Models.Environment> response = await client.CreateOrReplaceEnvironmentAsync("<projectName>", "<userId>", "<environmentName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrReplaceEnvironment_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                parameters = new object(),
                environmentType = "<environmentType>",
                catalogName = "<catalogName>",
                environmentDefinitionName = "<environmentDefinitionName>",
            });
            Response response = client.CreateOrReplaceEnvironment("<projectName>", "<userId>", "<environmentName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("parameters").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrReplaceEnvironment_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                parameters = new object(),
                environmentType = "<environmentType>",
                catalogName = "<catalogName>",
                environmentDefinitionName = "<environmentDefinitionName>",
            });
            Response response = await client.CreateOrReplaceEnvironmentAsync("<projectName>", "<userId>", "<environmentName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("parameters").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("environmentDefinitionName").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrReplaceEnvironment_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Models.Environment body = new Models.Environment("<environmentType>", "<catalogName>", "<environmentDefinitionName>")
            {
                Parameters = BinaryData.FromObjectAsJson(new object()),
            };
            Response<Models.Environment> response = client.CreateOrReplaceEnvironment("<projectName>", "<userId>", "<environmentName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrReplaceEnvironment_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Models.Environment body = new Models.Environment("<environmentType>", "<catalogName>", "<environmentDefinitionName>")
            {
                Parameters = BinaryData.FromObjectAsJson(new object()),
            };
            Response<Models.Environment> response = await client.CreateOrReplaceEnvironmentAsync("<projectName>", "<userId>", "<environmentName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteEnvironment()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response response = client.DeleteEnvironment("<projectName>", "<userId>", "<environmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteEnvironment_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response response = await client.DeleteEnvironmentAsync("<projectName>", "<userId>", "<environmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteEnvironment_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response<OperationStatus> response = client.DeleteEnvironment("<projectName>", "<userId>", "<environmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteEnvironment_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response<OperationStatus> response = await client.DeleteEnvironmentAsync("<projectName>", "<userId>", "<environmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteEnvironment_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response response = client.DeleteEnvironment("<projectName>", "<userId>", "<environmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteEnvironment_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response response = await client.DeleteEnvironmentAsync("<projectName>", "<userId>", "<environmentName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteEnvironment_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response<OperationStatus> response = client.DeleteEnvironment("<projectName>", "<userId>", "<environmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteEnvironment_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response<OperationStatus> response = await client.DeleteEnvironmentAsync("<projectName>", "<userId>", "<environmentName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCatalog()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response response = client.GetCatalog("<projectName>", "<catalogName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCatalog_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response response = await client.GetCatalogAsync("<projectName>", "<catalogName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCatalog_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response<Catalog> response = client.GetCatalog("<projectName>", "<catalogName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCatalog_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response<Catalog> response = await client.GetCatalogAsync("<projectName>", "<catalogName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCatalog_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response response = client.GetCatalog("<projectName>", "<catalogName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCatalog_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response response = await client.GetCatalogAsync("<projectName>", "<catalogName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCatalog_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response<Catalog> response = client.GetCatalog("<projectName>", "<catalogName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCatalog_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response<Catalog> response = await client.GetCatalogAsync("<projectName>", "<catalogName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentDefinition()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response response = client.GetEnvironmentDefinition("<projectName>", "<catalogName>", "<definitionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentDefinition_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response response = await client.GetEnvironmentDefinitionAsync("<projectName>", "<catalogName>", "<definitionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentDefinition_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response<EnvironmentDefinition> response = client.GetEnvironmentDefinition("<projectName>", "<catalogName>", "<definitionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentDefinition_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response<EnvironmentDefinition> response = await client.GetEnvironmentDefinitionAsync("<projectName>", "<catalogName>", "<definitionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentDefinition_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response response = client.GetEnvironmentDefinition("<projectName>", "<catalogName>", "<definitionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
            Console.WriteLine(result.GetProperty("parametersSchema").ToString());
            Console.WriteLine(result.GetProperty("templatePath").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentDefinition_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response response = await client.GetEnvironmentDefinitionAsync("<projectName>", "<catalogName>", "<definitionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("catalogName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
            Console.WriteLine(result.GetProperty("parametersSchema").ToString());
            Console.WriteLine(result.GetProperty("templatePath").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentDefinition_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response<EnvironmentDefinition> response = client.GetEnvironmentDefinition("<projectName>", "<catalogName>", "<definitionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentDefinition_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            Response<EnvironmentDefinition> response = await client.GetEnvironmentDefinitionAsync("<projectName>", "<catalogName>", "<definitionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironments()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetEnvironments("<projectName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("environmentType").ToString());
                Console.WriteLine(result[0].GetProperty("catalogName").ToString());
                Console.WriteLine(result[0].GetProperty("environmentDefinitionName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironments_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEnvironmentsAsync("<projectName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("environmentType").ToString());
                Console.WriteLine(result[0].GetProperty("catalogName").ToString());
                Console.WriteLine(result[0].GetProperty("environmentDefinitionName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironments_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            foreach (Models.Environment item in client.GetEnvironments("<projectName>", 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironments_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            await foreach (Models.Environment item in client.GetEnvironmentsAsync("<projectName>", 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironments_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetEnvironments("<projectName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("parameters").ToString());
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("environmentType").ToString());
                Console.WriteLine(result[0].GetProperty("user").ToString());
                Console.WriteLine(result[0].GetProperty("provisioningState").ToString());
                Console.WriteLine(result[0].GetProperty("resourceGroupId").ToString());
                Console.WriteLine(result[0].GetProperty("catalogName").ToString());
                Console.WriteLine(result[0].GetProperty("environmentDefinitionName").ToString());
                Console.WriteLine(result[0].GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result[0].GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result[0].GetProperty("error").GetProperty("target").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironments_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEnvironmentsAsync("<projectName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("parameters").ToString());
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("environmentType").ToString());
                Console.WriteLine(result[0].GetProperty("user").ToString());
                Console.WriteLine(result[0].GetProperty("provisioningState").ToString());
                Console.WriteLine(result[0].GetProperty("resourceGroupId").ToString());
                Console.WriteLine(result[0].GetProperty("catalogName").ToString());
                Console.WriteLine(result[0].GetProperty("environmentDefinitionName").ToString());
                Console.WriteLine(result[0].GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result[0].GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result[0].GetProperty("error").GetProperty("target").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironments_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            foreach (Models.Environment item in client.GetEnvironments("<projectName>", 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironments_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            await foreach (Models.Environment item in client.GetEnvironmentsAsync("<projectName>", 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentsByUser()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetEnvironmentsByUser("<projectName>", "<userId>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("environmentType").ToString());
                Console.WriteLine(result[0].GetProperty("catalogName").ToString());
                Console.WriteLine(result[0].GetProperty("environmentDefinitionName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentsByUser_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEnvironmentsByUserAsync("<projectName>", "<userId>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("environmentType").ToString());
                Console.WriteLine(result[0].GetProperty("catalogName").ToString());
                Console.WriteLine(result[0].GetProperty("environmentDefinitionName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentsByUser_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            foreach (Models.Environment item in client.GetEnvironmentsByUser("<projectName>", "<userId>", 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentsByUser_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            await foreach (Models.Environment item in client.GetEnvironmentsByUserAsync("<projectName>", "<userId>", 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentsByUser_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetEnvironmentsByUser("<projectName>", "<userId>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("parameters").ToString());
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("environmentType").ToString());
                Console.WriteLine(result[0].GetProperty("user").ToString());
                Console.WriteLine(result[0].GetProperty("provisioningState").ToString());
                Console.WriteLine(result[0].GetProperty("resourceGroupId").ToString());
                Console.WriteLine(result[0].GetProperty("catalogName").ToString());
                Console.WriteLine(result[0].GetProperty("environmentDefinitionName").ToString());
                Console.WriteLine(result[0].GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result[0].GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result[0].GetProperty("error").GetProperty("target").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentsByUser_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEnvironmentsByUserAsync("<projectName>", "<userId>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("parameters").ToString());
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("environmentType").ToString());
                Console.WriteLine(result[0].GetProperty("user").ToString());
                Console.WriteLine(result[0].GetProperty("provisioningState").ToString());
                Console.WriteLine(result[0].GetProperty("resourceGroupId").ToString());
                Console.WriteLine(result[0].GetProperty("catalogName").ToString());
                Console.WriteLine(result[0].GetProperty("environmentDefinitionName").ToString());
                Console.WriteLine(result[0].GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result[0].GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result[0].GetProperty("error").GetProperty("target").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentsByUser_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            foreach (Models.Environment item in client.GetEnvironmentsByUser("<projectName>", "<userId>", 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentsByUser_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            await foreach (Models.Environment item in client.GetEnvironmentsByUserAsync("<projectName>", "<userId>", 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCatalogsByProject()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetCatalogsByProject("<projectName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCatalogsByProject_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetCatalogsByProjectAsync("<projectName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCatalogsByProject_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            foreach (Catalog item in client.GetCatalogsByProject("<projectName>", 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCatalogsByProject_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            await foreach (Catalog item in client.GetCatalogsByProjectAsync("<projectName>", 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCatalogsByProject_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetCatalogsByProject("<projectName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCatalogsByProject_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetCatalogsByProjectAsync("<projectName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCatalogsByProject_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            foreach (Catalog item in client.GetCatalogsByProject("<projectName>", 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCatalogsByProject_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            await foreach (Catalog item in client.GetCatalogsByProjectAsync("<projectName>", 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentDefinitionsByProject()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetEnvironmentDefinitionsByProject("<projectName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("catalogName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentDefinitionsByProject_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEnvironmentDefinitionsByProjectAsync("<projectName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("catalogName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentDefinitionsByProject_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            foreach (EnvironmentDefinition item in client.GetEnvironmentDefinitionsByProject("<projectName>", 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentDefinitionsByProject_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            await foreach (EnvironmentDefinition item in client.GetEnvironmentDefinitionsByProjectAsync("<projectName>", 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentDefinitionsByProject_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetEnvironmentDefinitionsByProject("<projectName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("catalogName").ToString());
                Console.WriteLine(result[0].GetProperty("description").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("description").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("default").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("type").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("readOnly").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("required").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
                Console.WriteLine(result[0].GetProperty("parametersSchema").ToString());
                Console.WriteLine(result[0].GetProperty("templatePath").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentDefinitionsByProject_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEnvironmentDefinitionsByProjectAsync("<projectName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("catalogName").ToString());
                Console.WriteLine(result[0].GetProperty("description").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("description").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("default").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("type").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("readOnly").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("required").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
                Console.WriteLine(result[0].GetProperty("parametersSchema").ToString());
                Console.WriteLine(result[0].GetProperty("templatePath").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentDefinitionsByProject_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            foreach (EnvironmentDefinition item in client.GetEnvironmentDefinitionsByProject("<projectName>", 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentDefinitionsByProject_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            await foreach (EnvironmentDefinition item in client.GetEnvironmentDefinitionsByProjectAsync("<projectName>", 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentDefinitionsByCatalog()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetEnvironmentDefinitionsByCatalog("<projectName>", "<catalogName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("catalogName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentDefinitionsByCatalog_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEnvironmentDefinitionsByCatalogAsync("<projectName>", "<catalogName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("catalogName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentDefinitionsByCatalog_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            foreach (EnvironmentDefinition item in client.GetEnvironmentDefinitionsByCatalog("<projectName>", "<catalogName>", 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentDefinitionsByCatalog_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            await foreach (EnvironmentDefinition item in client.GetEnvironmentDefinitionsByCatalogAsync("<projectName>", "<catalogName>", 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentDefinitionsByCatalog_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetEnvironmentDefinitionsByCatalog("<projectName>", "<catalogName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("catalogName").ToString());
                Console.WriteLine(result[0].GetProperty("description").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("description").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("default").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("type").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("readOnly").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("required").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
                Console.WriteLine(result[0].GetProperty("parametersSchema").ToString());
                Console.WriteLine(result[0].GetProperty("templatePath").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentDefinitionsByCatalog_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEnvironmentDefinitionsByCatalogAsync("<projectName>", "<catalogName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("catalogName").ToString());
                Console.WriteLine(result[0].GetProperty("description").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("id").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("description").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("default").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("type").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("readOnly").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("required").ToString());
                Console.WriteLine(result[0].GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
                Console.WriteLine(result[0].GetProperty("parametersSchema").ToString());
                Console.WriteLine(result[0].GetProperty("templatePath").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentDefinitionsByCatalog_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            foreach (EnvironmentDefinition item in client.GetEnvironmentDefinitionsByCatalog("<projectName>", "<catalogName>", 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentDefinitionsByCatalog_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            await foreach (EnvironmentDefinition item in client.GetEnvironmentDefinitionsByCatalogAsync("<projectName>", "<catalogName>", 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentTypes()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetEnvironmentTypes("<projectName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("deploymentTargetId").ToString());
                Console.WriteLine(result[0].GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentTypes_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEnvironmentTypesAsync("<projectName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("deploymentTargetId").ToString());
                Console.WriteLine(result[0].GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentTypes_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            foreach (EnvironmentType item in client.GetEnvironmentTypes("<projectName>", 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentTypes_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            await foreach (EnvironmentType item in client.GetEnvironmentTypesAsync("<projectName>", 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentTypes_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            foreach (BinaryData item in client.GetEnvironmentTypes("<projectName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("deploymentTargetId").ToString());
                Console.WriteLine(result[0].GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentTypes_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetEnvironmentTypesAsync("<projectName>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("deploymentTargetId").ToString());
                Console.WriteLine(result[0].GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEnvironmentTypes_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            foreach (EnvironmentType item in client.GetEnvironmentTypes("<projectName>", 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEnvironmentTypes_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            EnvironmentsClient client = new EnvironmentsClient(endpoint, credential);

            await foreach (EnvironmentType item in client.GetEnvironmentTypesAsync("<projectName>", 1234))
            {
            }
        }
    }
}
