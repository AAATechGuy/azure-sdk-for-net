// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Developer.DevCenter;
using Azure.Developer.DevCenter.Models;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Developer.DevCenter.Samples
{
    public class Samples_DevBoxesClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPool()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetPool("<projectName>", "<poolName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("healthStatus").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPool_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetPoolAsync("<projectName>", "<poolName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("healthStatus").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPool_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<Pool> response = client.GetPool("<projectName>", "<poolName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPool_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<Pool> response = await client.GetPoolAsync("<projectName>", "<poolName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPool_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetPool("<projectName>", "<poolName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
            Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("gracePeriodMinutes").ToString());
            Console.WriteLine(result.GetProperty("healthStatus").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPool_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetPoolAsync("<projectName>", "<poolName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
            Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("gracePeriodMinutes").ToString());
            Console.WriteLine(result.GetProperty("healthStatus").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPool_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<Pool> response = client.GetPool("<projectName>", "<poolName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPool_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<Pool> response = await client.GetPoolAsync("<projectName>", "<poolName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetScheduleByPool()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetScheduleByPool("<projectName>", "<poolName>", "<scheduleName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("time").ToString());
            Console.WriteLine(result.GetProperty("timeZone").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetScheduleByPool_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetScheduleByPoolAsync("<projectName>", "<poolName>", "<scheduleName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("time").ToString());
            Console.WriteLine(result.GetProperty("timeZone").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetScheduleByPool_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<Schedule> response = client.GetScheduleByPool("<projectName>", "<poolName>", "<scheduleName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetScheduleByPool_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<Schedule> response = await client.GetScheduleByPoolAsync("<projectName>", "<poolName>", "<scheduleName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetScheduleByPool_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetScheduleByPool("<projectName>", "<poolName>", "<scheduleName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("time").ToString());
            Console.WriteLine(result.GetProperty("timeZone").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetScheduleByPool_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetScheduleByPoolAsync("<projectName>", "<poolName>", "<scheduleName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("frequency").ToString());
            Console.WriteLine(result.GetProperty("time").ToString());
            Console.WriteLine(result.GetProperty("timeZone").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetScheduleByPool_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<Schedule> response = client.GetScheduleByPool("<projectName>", "<poolName>", "<scheduleName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetScheduleByPool_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<Schedule> response = await client.GetScheduleByPoolAsync("<projectName>", "<poolName>", "<scheduleName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevBoxByUser()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetDevBoxByUser("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("poolName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevBoxByUser_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetDevBoxByUserAsync("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("poolName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevBoxByUser_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<DevBox> response = client.GetDevBoxByUser("<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevBoxByUser_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<DevBox> response = await client.GetDevBoxByUserAsync("<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevBoxByUser_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetDevBoxByUser("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("poolName").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("actionState").ToString());
            Console.WriteLine(result.GetProperty("powerState").ToString());
            Console.WriteLine(result.GetProperty("uniqueId").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevBoxByUser_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetDevBoxByUserAsync("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("poolName").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("actionState").ToString());
            Console.WriteLine(result.GetProperty("powerState").ToString());
            Console.WriteLine(result.GetProperty("uniqueId").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevBoxByUser_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<DevBox> response = client.GetDevBoxByUser("<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevBoxByUser_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<DevBox> response = await client.GetDevBoxByUserAsync("<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateDevBox()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                poolName = "<poolName>",
            });
            Response response = client.CreateDevBox("<projectName>", "<userId>", "<devBoxName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("poolName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateDevBox_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                poolName = "<poolName>",
            });
            Response response = await client.CreateDevBoxAsync("<projectName>", "<userId>", "<devBoxName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("poolName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateDevBox_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            DevBox body = new DevBox("<poolName>");
            Response<DevBox> response = client.CreateDevBox("<projectName>", "<userId>", "<devBoxName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateDevBox_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            DevBox body = new DevBox("<poolName>");
            Response<DevBox> response = await client.CreateDevBoxAsync("<projectName>", "<userId>", "<devBoxName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateDevBox_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                poolName = "<poolName>",
                localAdministrator = "Enabled",
            });
            Response response = client.CreateDevBox("<projectName>", "<userId>", "<devBoxName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("poolName").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("actionState").ToString());
            Console.WriteLine(result.GetProperty("powerState").ToString());
            Console.WriteLine(result.GetProperty("uniqueId").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateDevBox_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                poolName = "<poolName>",
                localAdministrator = "Enabled",
            });
            Response response = await client.CreateDevBoxAsync("<projectName>", "<userId>", "<devBoxName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("projectName").ToString());
            Console.WriteLine(result.GetProperty("poolName").ToString());
            Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("actionState").ToString());
            Console.WriteLine(result.GetProperty("powerState").ToString());
            Console.WriteLine(result.GetProperty("uniqueId").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("user").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
            Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
            Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
            Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("localAdministrator").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateDevBox_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            DevBox body = new DevBox("<poolName>")
            {
                LocalAdministrator = LocalAdminStatus.Enabled,
            };
            Response<DevBox> response = client.CreateDevBox("<projectName>", "<userId>", "<devBoxName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateDevBox_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            DevBox body = new DevBox("<poolName>")
            {
                LocalAdministrator = LocalAdminStatus.Enabled,
            };
            Response<DevBox> response = await client.CreateDevBoxAsync("<projectName>", "<userId>", "<devBoxName>", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDevBox()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.DeleteDevBox("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDevBox_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.DeleteDevBoxAsync("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDevBox_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<OperationStatus> response = client.DeleteDevBox("<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDevBox_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<OperationStatus> response = await client.DeleteDevBoxAsync("<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDevBox_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.DeleteDevBox("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDevBox_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.DeleteDevBoxAsync("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDevBox_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<OperationStatus> response = client.DeleteDevBox("<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDevBox_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<OperationStatus> response = await client.DeleteDevBoxAsync("<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StartDevBox()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.StartDevBox("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StartDevBox_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.StartDevBoxAsync("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StartDevBox_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<OperationStatus> response = client.StartDevBox("<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StartDevBox_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<OperationStatus> response = await client.StartDevBoxAsync("<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StartDevBox_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.StartDevBox("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StartDevBox_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.StartDevBoxAsync("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StartDevBox_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<OperationStatus> response = client.StartDevBox("<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StartDevBox_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<OperationStatus> response = await client.StartDevBoxAsync("<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StopDevBox()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.StopDevBox("<projectName>", "<userId>", "<devBoxName>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StopDevBox_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.StopDevBoxAsync("<projectName>", "<userId>", "<devBoxName>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StopDevBox_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<OperationStatus> response = client.StopDevBox("<projectName>", "<userId>", "<devBoxName>", true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StopDevBox_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<OperationStatus> response = await client.StopDevBoxAsync("<projectName>", "<userId>", "<devBoxName>", true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StopDevBox_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.StopDevBox("<projectName>", "<userId>", "<devBoxName>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StopDevBox_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.StopDevBoxAsync("<projectName>", "<userId>", "<devBoxName>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StopDevBox_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<OperationStatus> response = client.StopDevBox("<projectName>", "<userId>", "<devBoxName>", true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StopDevBox_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<OperationStatus> response = await client.StopDevBoxAsync("<projectName>", "<userId>", "<devBoxName>", true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RestartDevBox()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.RestartDevBox("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RestartDevBox_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.RestartDevBoxAsync("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RestartDevBox_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<OperationStatus> response = client.RestartDevBox("<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RestartDevBox_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<OperationStatus> response = await client.RestartDevBoxAsync("<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RestartDevBox_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.RestartDevBox("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RestartDevBox_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.RestartDevBoxAsync("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("percentComplete").ToString());
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RestartDevBox_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<OperationStatus> response = client.RestartDevBox("<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RestartDevBox_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<OperationStatus> response = await client.RestartDevBoxAsync("<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRemoteConnection()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetRemoteConnection("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRemoteConnection_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetRemoteConnectionAsync("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRemoteConnection_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<RemoteConnection> response = client.GetRemoteConnection("<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRemoteConnection_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<RemoteConnection> response = await client.GetRemoteConnectionAsync("<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRemoteConnection_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetRemoteConnection("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("webUrl").ToString());
            Console.WriteLine(result.GetProperty("rdpConnectionUrl").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRemoteConnection_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetRemoteConnectionAsync("<projectName>", "<userId>", "<devBoxName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("webUrl").ToString());
            Console.WriteLine(result.GetProperty("rdpConnectionUrl").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRemoteConnection_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<RemoteConnection> response = client.GetRemoteConnection("<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRemoteConnection_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<RemoteConnection> response = await client.GetRemoteConnectionAsync("<projectName>", "<userId>", "<devBoxName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAction()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetAction("<projectName>", "<userId>", "<devBoxName>", "<actionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAction_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetActionAsync("<projectName>", "<userId>", "<devBoxName>", "<actionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAction_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<DevBoxAction> response = client.GetAction("<projectName>", "<userId>", "<devBoxName>", "<actionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAction_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<DevBoxAction> response = await client.GetActionAsync("<projectName>", "<userId>", "<devBoxName>", "<actionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAction_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.GetAction("<projectName>", "<userId>", "<devBoxName>", "<actionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
            Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
            Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAction_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.GetActionAsync("<projectName>", "<userId>", "<devBoxName>", "<actionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
            Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
            Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAction_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<DevBoxAction> response = client.GetAction("<projectName>", "<userId>", "<devBoxName>", "<actionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAction_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<DevBoxAction> response = await client.GetActionAsync("<projectName>", "<userId>", "<devBoxName>", "<actionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkipAction()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.SkipAction("<projectName>", "<userId>", "<devBoxName>", "<actionName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkipAction_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.SkipActionAsync("<projectName>", "<userId>", "<devBoxName>", "<actionName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SkipAction_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.SkipAction("<projectName>", "<userId>", "<devBoxName>", "<actionName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SkipAction_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.SkipActionAsync("<projectName>", "<userId>", "<devBoxName>", "<actionName>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DelayAction()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.DelayAction("<projectName>", "<userId>", "<devBoxName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DelayAction_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.DelayActionAsync("<projectName>", "<userId>", "<devBoxName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DelayAction_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<DevBoxAction> response = client.DelayAction("<projectName>", "<userId>", "<devBoxName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DelayAction_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<DevBoxAction> response = await client.DelayActionAsync("<projectName>", "<userId>", "<devBoxName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DelayAction_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = client.DelayAction("<projectName>", "<userId>", "<devBoxName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
            Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
            Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DelayAction_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response response = await client.DelayActionAsync("<projectName>", "<userId>", "<devBoxName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("actionType").ToString());
            Console.WriteLine(result.GetProperty("sourceId").ToString());
            Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
            Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DelayAction_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<DevBoxAction> response = client.DelayAction("<projectName>", "<userId>", "<devBoxName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DelayAction_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            Response<DevBoxAction> response = await client.DelayActionAsync("<projectName>", "<userId>", "<devBoxName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPools()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (BinaryData item in client.GetPools("<projectName>", 1234, "<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("location").ToString());
                Console.WriteLine(result[0].GetProperty("healthStatus").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPools_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetPoolsAsync("<projectName>", 1234, "<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("location").ToString());
                Console.WriteLine(result[0].GetProperty("healthStatus").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPools_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (Pool item in client.GetPools("<projectName>", 1234, "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPools_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (Pool item in client.GetPoolsAsync("<projectName>", 1234, "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPools_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (BinaryData item in client.GetPools("<projectName>", 1234, "<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("location").ToString());
                Console.WriteLine(result[0].GetProperty("osType").ToString());
                Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result[0].GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result[0].GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result[0].GetProperty("localAdministrator").ToString());
                Console.WriteLine(result[0].GetProperty("stopOnDisconnect").GetProperty("status").ToString());
                Console.WriteLine(result[0].GetProperty("stopOnDisconnect").GetProperty("gracePeriodMinutes").ToString());
                Console.WriteLine(result[0].GetProperty("healthStatus").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPools_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetPoolsAsync("<projectName>", 1234, "<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("location").ToString());
                Console.WriteLine(result[0].GetProperty("osType").ToString());
                Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result[0].GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result[0].GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result[0].GetProperty("localAdministrator").ToString());
                Console.WriteLine(result[0].GetProperty("stopOnDisconnect").GetProperty("status").ToString());
                Console.WriteLine(result[0].GetProperty("stopOnDisconnect").GetProperty("gracePeriodMinutes").ToString());
                Console.WriteLine(result[0].GetProperty("healthStatus").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPools_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (Pool item in client.GetPools("<projectName>", 1234, "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPools_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (Pool item in client.GetPoolsAsync("<projectName>", 1234, "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchedulesByPool()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (BinaryData item in client.GetSchedulesByPool("<projectName>", "<poolName>", 1234, "<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("type").ToString());
                Console.WriteLine(result[0].GetProperty("frequency").ToString());
                Console.WriteLine(result[0].GetProperty("time").ToString());
                Console.WriteLine(result[0].GetProperty("timeZone").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchedulesByPool_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetSchedulesByPoolAsync("<projectName>", "<poolName>", 1234, "<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("type").ToString());
                Console.WriteLine(result[0].GetProperty("frequency").ToString());
                Console.WriteLine(result[0].GetProperty("time").ToString());
                Console.WriteLine(result[0].GetProperty("timeZone").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchedulesByPool_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (Schedule item in client.GetSchedulesByPool("<projectName>", "<poolName>", 1234, "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchedulesByPool_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (Schedule item in client.GetSchedulesByPoolAsync("<projectName>", "<poolName>", 1234, "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchedulesByPool_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (BinaryData item in client.GetSchedulesByPool("<projectName>", "<poolName>", 1234, "<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("type").ToString());
                Console.WriteLine(result[0].GetProperty("frequency").ToString());
                Console.WriteLine(result[0].GetProperty("time").ToString());
                Console.WriteLine(result[0].GetProperty("timeZone").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchedulesByPool_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetSchedulesByPoolAsync("<projectName>", "<poolName>", 1234, "<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("type").ToString());
                Console.WriteLine(result[0].GetProperty("frequency").ToString());
                Console.WriteLine(result[0].GetProperty("time").ToString());
                Console.WriteLine(result[0].GetProperty("timeZone").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSchedulesByPool_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (Schedule item in client.GetSchedulesByPool("<projectName>", "<poolName>", 1234, "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSchedulesByPool_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (Schedule item in client.GetSchedulesByPoolAsync("<projectName>", "<poolName>", 1234, "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevBoxesByUser()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (BinaryData item in client.GetDevBoxesByUser("<projectName>", "<userId>", "<filter>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("poolName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevBoxesByUser_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetDevBoxesByUserAsync("<projectName>", "<userId>", "<filter>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("poolName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevBoxesByUser_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (DevBox item in client.GetDevBoxesByUser("<projectName>", "<userId>", "<filter>", 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevBoxesByUser_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (DevBox item in client.GetDevBoxesByUserAsync("<projectName>", "<userId>", "<filter>", 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevBoxesByUser_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (BinaryData item in client.GetDevBoxesByUser("<projectName>", "<userId>", "<filter>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("projectName").ToString());
                Console.WriteLine(result[0].GetProperty("poolName").ToString());
                Console.WriteLine(result[0].GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result[0].GetProperty("provisioningState").ToString());
                Console.WriteLine(result[0].GetProperty("actionState").ToString());
                Console.WriteLine(result[0].GetProperty("powerState").ToString());
                Console.WriteLine(result[0].GetProperty("uniqueId").ToString());
                Console.WriteLine(result[0].GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result[0].GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result[0].GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result[0].GetProperty("location").ToString());
                Console.WriteLine(result[0].GetProperty("osType").ToString());
                Console.WriteLine(result[0].GetProperty("user").ToString());
                Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result[0].GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result[0].GetProperty("createdTime").ToString());
                Console.WriteLine(result[0].GetProperty("localAdministrator").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevBoxesByUser_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetDevBoxesByUserAsync("<projectName>", "<userId>", "<filter>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("projectName").ToString());
                Console.WriteLine(result[0].GetProperty("poolName").ToString());
                Console.WriteLine(result[0].GetProperty("hibernateSupport").ToString());
                Console.WriteLine(result[0].GetProperty("provisioningState").ToString());
                Console.WriteLine(result[0].GetProperty("actionState").ToString());
                Console.WriteLine(result[0].GetProperty("powerState").ToString());
                Console.WriteLine(result[0].GetProperty("uniqueId").ToString());
                Console.WriteLine(result[0].GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result[0].GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result[0].GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result[0].GetProperty("location").ToString());
                Console.WriteLine(result[0].GetProperty("osType").ToString());
                Console.WriteLine(result[0].GetProperty("user").ToString());
                Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("skuName").ToString());
                Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
                Console.WriteLine(result[0].GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
                Console.WriteLine(result[0].GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("operatingSystem").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
                Console.WriteLine(result[0].GetProperty("imageReference").GetProperty("publishedDate").ToString());
                Console.WriteLine(result[0].GetProperty("createdTime").ToString());
                Console.WriteLine(result[0].GetProperty("localAdministrator").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevBoxesByUser_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (DevBox item in client.GetDevBoxesByUser("<projectName>", "<userId>", "<filter>", 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevBoxesByUser_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (DevBox item in client.GetDevBoxesByUserAsync("<projectName>", "<userId>", "<filter>", 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetActions()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (BinaryData item in client.GetActions("<projectName>", "<userId>", "<devBoxName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("actionType").ToString());
                Console.WriteLine(result[0].GetProperty("sourceId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetActions_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetActionsAsync("<projectName>", "<userId>", "<devBoxName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("actionType").ToString());
                Console.WriteLine(result[0].GetProperty("sourceId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetActions_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (DevBoxAction item in client.GetActions("<projectName>", "<userId>", "<devBoxName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetActions_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (DevBoxAction item in client.GetActionsAsync("<projectName>", "<userId>", "<devBoxName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetActions_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (BinaryData item in client.GetActions("<projectName>", "<userId>", "<devBoxName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("actionType").ToString());
                Console.WriteLine(result[0].GetProperty("sourceId").ToString());
                Console.WriteLine(result[0].GetProperty("suspendedUntil").ToString());
                Console.WriteLine(result[0].GetProperty("next").GetProperty("scheduledTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetActions_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.GetActionsAsync("<projectName>", "<userId>", "<devBoxName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("actionType").ToString());
                Console.WriteLine(result[0].GetProperty("sourceId").ToString());
                Console.WriteLine(result[0].GetProperty("suspendedUntil").ToString());
                Console.WriteLine(result[0].GetProperty("next").GetProperty("scheduledTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetActions_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (DevBoxAction item in client.GetActions("<projectName>", "<userId>", "<devBoxName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetActions_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (DevBoxAction item in client.GetActionsAsync("<projectName>", "<userId>", "<devBoxName>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DelayActions()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (BinaryData item in client.DelayActions("<projectName>", "<userId>", "<devBoxName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("result").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DelayActions_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.DelayActionsAsync("<projectName>", "<userId>", "<devBoxName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("result").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DelayActions_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (DevBoxActionDelayResult item in client.DelayActions("<projectName>", "<userId>", "<devBoxName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00")))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DelayActions_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (DevBoxActionDelayResult item in client.DelayActionsAsync("<projectName>", "<userId>", "<devBoxName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00")))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DelayActions_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (BinaryData item in client.DelayActions("<projectName>", "<userId>", "<devBoxName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("result").ToString());
                Console.WriteLine(result[0].GetProperty("action").GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("action").GetProperty("actionType").ToString());
                Console.WriteLine(result[0].GetProperty("action").GetProperty("sourceId").ToString());
                Console.WriteLine(result[0].GetProperty("action").GetProperty("suspendedUntil").ToString());
                Console.WriteLine(result[0].GetProperty("action").GetProperty("next").GetProperty("scheduledTime").ToString());
                Console.WriteLine(result[0].GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result[0].GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result[0].GetProperty("error").GetProperty("target").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DelayActions_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (BinaryData item in client.DelayActionsAsync("<projectName>", "<userId>", "<devBoxName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result[0].GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("result").ToString());
                Console.WriteLine(result[0].GetProperty("action").GetProperty("name").ToString());
                Console.WriteLine(result[0].GetProperty("action").GetProperty("actionType").ToString());
                Console.WriteLine(result[0].GetProperty("action").GetProperty("sourceId").ToString());
                Console.WriteLine(result[0].GetProperty("action").GetProperty("suspendedUntil").ToString());
                Console.WriteLine(result[0].GetProperty("action").GetProperty("next").GetProperty("scheduledTime").ToString());
                Console.WriteLine(result[0].GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result[0].GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result[0].GetProperty("error").GetProperty("target").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DelayActions_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            foreach (DevBoxActionDelayResult item in client.DelayActions("<projectName>", "<userId>", "<devBoxName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00")))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DelayActions_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DevBoxesClient client = new DevBoxesClient(endpoint, credential);

            await foreach (DevBoxActionDelayResult item in client.DelayActionsAsync("<projectName>", "<userId>", "<devBoxName>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00")))
            {
            }
        }
    }
}
