<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetDeploymentsAsync(RequestContext)">
<example>
This sample shows how to call GetDeploymentsAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = await client.GetDeploymentsAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("owner").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DeploymentList</c>:
<code>{
  object: string, # Optional.
  data: [
    {
      object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
      status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Required.
      created_at: number, # Required.
      updated_at: number, # Required.
      id: string, # Required.
      model: string, # Required.
      owner: string, # Optional.
      scale_settings: {
      }, # Required.
    }
  ], # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetDeployments(RequestContext)">
<example>
This sample shows how to call GetDeployments and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = client.GetDeployments();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("owner").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DeploymentList</c>:
<code>{
  object: string, # Optional.
  data: [
    {
      object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
      status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Required.
      created_at: number, # Required.
      updated_at: number, # Required.
      id: string, # Required.
      model: string, # Required.
      owner: string, # Optional.
      scale_settings: {
      }, # Required.
    }
  ], # Optional.
}
</code>

</remarks>
    </member>
    <member name="CreateDeploymentAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call CreateDeploymentAsync with required request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

var data = new {
    model = "<model>",
    scale_settings = new {},
};

Response response = await client.CreateDeploymentAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("owner").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Deployment</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Required.
  created_at: number, # Required.
  updated_at: number, # Required.
  id: string, # Required.
  model: string, # Required.
  owner: string, # Optional.
  scale_settings: {
  }, # Required.
}
</code>

Response Body:

Schema for <c>Deployment</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Required.
  created_at: number, # Required.
  updated_at: number, # Required.
  id: string, # Required.
  model: string, # Required.
  owner: string, # Optional.
  scale_settings: {
  }, # Required.
}
</code>

</remarks>
    </member>
    <member name="CreateDeployment(RequestContent,RequestContext)">
<example>
This sample shows how to call CreateDeployment with required request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

var data = new {
    model = "<model>",
    scale_settings = new {},
};

Response response = client.CreateDeployment(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("owner").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Deployment</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Required.
  created_at: number, # Required.
  updated_at: number, # Required.
  id: string, # Required.
  model: string, # Required.
  owner: string, # Optional.
  scale_settings: {
  }, # Required.
}
</code>

Response Body:

Schema for <c>Deployment</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Required.
  created_at: number, # Required.
  updated_at: number, # Required.
  id: string, # Required.
  model: string, # Required.
  owner: string, # Optional.
  scale_settings: {
  }, # Required.
}
</code>

</remarks>
    </member>
    <member name="GetDeploymentAsync(String,RequestContext)">
<example>
This sample shows how to call GetDeploymentAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = await client.GetDeploymentAsync("<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("owner").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Deployment</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Required.
  created_at: number, # Required.
  updated_at: number, # Required.
  id: string, # Required.
  model: string, # Required.
  owner: string, # Optional.
  scale_settings: {
  }, # Required.
}
</code>

</remarks>
    </member>
    <member name="GetDeployment(String,RequestContext)">
<example>
This sample shows how to call GetDeployment with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = client.GetDeployment("<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("owner").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Deployment</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Required.
  created_at: number, # Required.
  updated_at: number, # Required.
  id: string, # Required.
  model: string, # Required.
  owner: string, # Optional.
  scale_settings: {
  }, # Required.
}
</code>

</remarks>
    </member>
    <member name="UpdateDeploymentAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateDeploymentAsync with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

var data = new {
    model = "<model>",
    scale_settings = new {},
};

Response response = await client.UpdateDeploymentAsync("<deploymentId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("owner").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Deployment</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Required.
  created_at: number, # Required.
  updated_at: number, # Required.
  id: string, # Required.
  model: string, # Required.
  owner: string, # Optional.
  scale_settings: {
  }, # Required.
}
</code>

Response Body:

Schema for <c>Deployment</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Required.
  created_at: number, # Required.
  updated_at: number, # Required.
  id: string, # Required.
  model: string, # Required.
  owner: string, # Optional.
  scale_settings: {
  }, # Required.
}
</code>

</remarks>
    </member>
    <member name="UpdateDeployment(String,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateDeployment with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

var data = new {
    model = "<model>",
    scale_settings = new {},
};

Response response = client.UpdateDeployment("<deploymentId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("owner").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Deployment</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Required.
  created_at: number, # Required.
  updated_at: number, # Required.
  id: string, # Required.
  model: string, # Required.
  owner: string, # Optional.
  scale_settings: {
  }, # Required.
}
</code>

Response Body:

Schema for <c>Deployment</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Required.
  created_at: number, # Required.
  updated_at: number, # Required.
  id: string, # Required.
  model: string, # Required.
  owner: string, # Optional.
  scale_settings: {
  }, # Required.
}
</code>

</remarks>
    </member>
    <member name="DeleteDeploymentAsync(String,RequestContext)">
<example>
This sample shows how to call DeleteDeploymentAsync with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = await client.DeleteDeploymentAsync("<deploymentId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteDeployment(String,RequestContext)">
<example>
This sample shows how to call DeleteDeployment with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = client.DeleteDeployment("<deploymentId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="GetFilesAsync(RequestContext)">
<example>
This sample shows how to call GetFilesAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = await client.GetFilesAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("filename").ToString());
]]></code>
</example>
<remarks>
Gets a list of all files owned by the Azure OpenAI resource.
These include user uploaded content like files with purpose &quot;fine-tune&quot; for training or
validation of fine-tunes models
as well as files that are generated by the
service such as &quot;fine-tune-results&quot; which contains various metrics for the
corresponding fine-tune job.

Below is the JSON schema for the response payload.

Response Body:

Schema for <c>FileList</c>:
<code>{
  object: string, # Optional.
  data: [
    {
      object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
      status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
      created_at: number, # Optional.
      updated_at: number, # Optional.
      id: string, # Required.
      bytes: number, # Optional.
      purpose: &quot;fine-tune&quot; | &quot;fine-tune-results&quot;, # Required.
      filename: string, # Required.
    }
  ], # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetFiles(RequestContext)">
<example>
This sample shows how to call GetFiles and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = client.GetFiles();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("filename").ToString());
]]></code>
</example>
<remarks>
Gets a list of all files owned by the Azure OpenAI resource.
These include user uploaded content like files with purpose &quot;fine-tune&quot; for training or
validation of fine-tunes models
as well as files that are generated by the
service such as &quot;fine-tune-results&quot; which contains various metrics for the
corresponding fine-tune job.

Below is the JSON schema for the response payload.

Response Body:

Schema for <c>FileList</c>:
<code>{
  object: string, # Optional.
  data: [
    {
      object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
      status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
      created_at: number, # Optional.
      updated_at: number, # Optional.
      id: string, # Required.
      bytes: number, # Optional.
      purpose: &quot;fine-tune&quot; | &quot;fine-tune-results&quot;, # Required.
      filename: string, # Required.
    }
  ], # Optional.
}
</code>

</remarks>
    </member>
    <member name="UploadFileAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call UploadFileAsync with required request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

var data = new {
    purpose = "fine-tune",
    filename = "<filename>",
};

Response response = await client.UploadFileAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>File</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
  created_at: number, # Optional.
  updated_at: number, # Optional.
  id: string, # Required.
  bytes: number, # Optional.
  purpose: &quot;fine-tune&quot; | &quot;fine-tune-results&quot;, # Required.
  filename: string, # Required.
}
</code>

Response Body:

Schema for <c>File</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
  created_at: number, # Optional.
  updated_at: number, # Optional.
  id: string, # Required.
  bytes: number, # Optional.
  purpose: &quot;fine-tune&quot; | &quot;fine-tune-results&quot;, # Required.
  filename: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="UploadFile(RequestContent,RequestContext)">
<example>
This sample shows how to call UploadFile with required request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

var data = new {
    purpose = "fine-tune",
    filename = "<filename>",
};

Response response = client.UploadFile(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>File</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
  created_at: number, # Optional.
  updated_at: number, # Optional.
  id: string, # Required.
  bytes: number, # Optional.
  purpose: &quot;fine-tune&quot; | &quot;fine-tune-results&quot;, # Required.
  filename: string, # Required.
}
</code>

Response Body:

Schema for <c>File</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
  created_at: number, # Optional.
  updated_at: number, # Optional.
  id: string, # Required.
  bytes: number, # Optional.
  purpose: &quot;fine-tune&quot; | &quot;fine-tune-results&quot;, # Required.
  filename: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="GetFileAsync(String,RequestContext)">
<example>
This sample shows how to call GetFileAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = await client.GetFileAsync("<fileId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>File</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
  created_at: number, # Optional.
  updated_at: number, # Optional.
  id: string, # Required.
  bytes: number, # Optional.
  purpose: &quot;fine-tune&quot; | &quot;fine-tune-results&quot;, # Required.
  filename: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="GetFile(String,RequestContext)">
<example>
This sample shows how to call GetFile with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = client.GetFile("<fileId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>File</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
  created_at: number, # Optional.
  updated_at: number, # Optional.
  id: string, # Required.
  bytes: number, # Optional.
  purpose: &quot;fine-tune&quot; | &quot;fine-tune-results&quot;, # Required.
  filename: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="DeleteFileAsync(String,RequestContext)">
<example>
This sample shows how to call DeleteFileAsync with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = await client.DeleteFileAsync("<fileId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteFile(String,RequestContext)">
<example>
This sample shows how to call DeleteFile with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = client.DeleteFile("<fileId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="GetFileContentAsync(String,RequestContext)">
<example>
This sample shows how to call GetFileContentAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = await client.GetFileContentAsync("<fileId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("file").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>FileContent</c>:
<code>{
  purpose: &quot;fine-tune&quot; | &quot;fine-tune-results&quot;, # Required.
  file: BinaryData, # Required.
}
</code>

</remarks>
    </member>
    <member name="GetFileContent(String,RequestContext)">
<example>
This sample shows how to call GetFileContent with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = client.GetFileContent("<fileId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("file").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>FileContent</c>:
<code>{
  purpose: &quot;fine-tune&quot; | &quot;fine-tune-results&quot;, # Required.
  file: BinaryData, # Required.
}
</code>

</remarks>
    </member>
    <member name="ImportFileAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call ImportFileAsync with required request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

var data = new {
    purpose = "fine-tune",
    filename = "<filename>",
    content_url = "<content_url>",
};

Response response = await client.ImportFileAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>FileImport</c>:
<code>{
  purpose: &quot;fine-tune&quot; | &quot;fine-tune-results&quot;, # Required.
  filename: string, # Required.
  content_url: string, # Required.
}
</code>

Response Body:

Schema for <c>File</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
  created_at: number, # Optional.
  updated_at: number, # Optional.
  id: string, # Required.
  bytes: number, # Optional.
  purpose: &quot;fine-tune&quot; | &quot;fine-tune-results&quot;, # Required.
  filename: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ImportFile(RequestContent,RequestContext)">
<example>
This sample shows how to call ImportFile with required request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

var data = new {
    purpose = "fine-tune",
    filename = "<filename>",
    content_url = "<content_url>",
};

Response response = client.ImportFile(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>FileImport</c>:
<code>{
  purpose: &quot;fine-tune&quot; | &quot;fine-tune-results&quot;, # Required.
  filename: string, # Required.
  content_url: string, # Required.
}
</code>

Response Body:

Schema for <c>File</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
  created_at: number, # Optional.
  updated_at: number, # Optional.
  id: string, # Required.
  bytes: number, # Optional.
  purpose: &quot;fine-tune&quot; | &quot;fine-tune-results&quot;, # Required.
  filename: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="GetFineTunesAsync(RequestContext)">
<example>
This sample shows how to call GetFineTunesAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = await client.GetFineTunesAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("fine_tuned_model").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("training_files")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("training_files")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("training_files")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("training_files")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("training_files")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("training_files")[0].GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("training_files")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("training_files")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("validation_files")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("validation_files")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("validation_files")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("validation_files")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("validation_files")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("validation_files")[0].GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("validation_files")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("validation_files")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("result_files")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("result_files")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("result_files")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("result_files")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("result_files")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("result_files")[0].GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("result_files")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("result_files")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("events")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("events")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("events")[0].GetProperty("level").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("events")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("organisation_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("user_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("hyperparams").GetProperty("batch_size").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("hyperparams").GetProperty("learning_rate_multiplier").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("hyperparams").GetProperty("n_epochs").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("hyperparams").GetProperty("prompt_loss_weight").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("hyperparams").GetProperty("compute_classification_metrics").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("hyperparams").GetProperty("classification_n_classes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("hyperparams").GetProperty("classification_positive_class").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("hyperparams").GetProperty("classification_betas")[0].ToString());
]]></code>
</example>
<remarks>
Gets a list of all fine-tune jobs owned by the Azure OpenAI resource.
The details that are returned for each fine-tune job contain besides its
identifier the base model, training and validation files, hyper parameters,
time stamps, status and events. Events are created when the job status
changes, e.g. running or complete, and when results are uploaded.

Below is the JSON schema for the response payload.

Response Body:

Schema for <c>FineTuneList</c>:
<code>{
  object: string, # Optional.
  data: [
    {
      object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
      status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
      created_at: number, # Optional.
      updated_at: number, # Optional.
      id: string, # Required.
      model: string, # Required.
      fine_tuned_model: string, # Optional.
      training_files: [File], # Required.
      validation_files: [File], # Optional.
      result_files: [File], # Optional.
      events: [Event], # Optional.
      organisation_id: string, # Optional.
      user_id: string, # Optional.
      hyperparams: {
        batch_size: number, # Optional.
        learning_rate_multiplier: number, # Optional.
        n_epochs: number, # Optional.
        prompt_loss_weight: number, # Optional.
        compute_classification_metrics: boolean, # Optional.
        classification_n_classes: number, # Optional.
        classification_positive_class: string, # Optional.
        classification_betas: [number], # Optional.
      }, # Optional.
    }
  ], # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetFineTunes(RequestContext)">
<example>
This sample shows how to call GetFineTunes and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = client.GetFineTunes();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("fine_tuned_model").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("training_files")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("training_files")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("training_files")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("training_files")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("training_files")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("training_files")[0].GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("training_files")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("training_files")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("validation_files")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("validation_files")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("validation_files")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("validation_files")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("validation_files")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("validation_files")[0].GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("validation_files")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("validation_files")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("result_files")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("result_files")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("result_files")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("result_files")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("result_files")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("result_files")[0].GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("result_files")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("result_files")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("events")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("events")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("events")[0].GetProperty("level").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("events")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("organisation_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("user_id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("hyperparams").GetProperty("batch_size").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("hyperparams").GetProperty("learning_rate_multiplier").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("hyperparams").GetProperty("n_epochs").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("hyperparams").GetProperty("prompt_loss_weight").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("hyperparams").GetProperty("compute_classification_metrics").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("hyperparams").GetProperty("classification_n_classes").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("hyperparams").GetProperty("classification_positive_class").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("hyperparams").GetProperty("classification_betas")[0].ToString());
]]></code>
</example>
<remarks>
Gets a list of all fine-tune jobs owned by the Azure OpenAI resource.
The details that are returned for each fine-tune job contain besides its
identifier the base model, training and validation files, hyper parameters,
time stamps, status and events. Events are created when the job status
changes, e.g. running or complete, and when results are uploaded.

Below is the JSON schema for the response payload.

Response Body:

Schema for <c>FineTuneList</c>:
<code>{
  object: string, # Optional.
  data: [
    {
      object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
      status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
      created_at: number, # Optional.
      updated_at: number, # Optional.
      id: string, # Required.
      model: string, # Required.
      fine_tuned_model: string, # Optional.
      training_files: [File], # Required.
      validation_files: [File], # Optional.
      result_files: [File], # Optional.
      events: [Event], # Optional.
      organisation_id: string, # Optional.
      user_id: string, # Optional.
      hyperparams: {
        batch_size: number, # Optional.
        learning_rate_multiplier: number, # Optional.
        n_epochs: number, # Optional.
        prompt_loss_weight: number, # Optional.
        compute_classification_metrics: boolean, # Optional.
        classification_n_classes: number, # Optional.
        classification_positive_class: string, # Optional.
        classification_betas: [number], # Optional.
      }, # Optional.
    }
  ], # Optional.
}
</code>

</remarks>
    </member>
    <member name="CreateFineTuneAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call CreateFineTuneAsync with required request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

var data = new {
    model = "<model>",
    training_file = "<training_file>",
};

Response response = await client.CreateFineTuneAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("filename").ToString());
]]></code>
This sample shows how to call CreateFineTuneAsync with all request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

var data = new {
    model = "<model>",
    training_file = "<training_file>",
    validation_file = "<validation_file>",
    hyperparams = new {
        batch_size = 1234,
        learning_rate_multiplier = 123.45f,
        n_epochs = 1234,
        prompt_loss_weight = 123.45f,
        compute_classification_metrics = true,
        classification_n_classes = 1234,
        classification_positive_class = "<classification_positive_class>",
        classification_betas = new[] {
            123.45f
        },
    },
};

Response response = await client.CreateFineTuneAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("fine_tuned_model").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("events")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("events")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("events")[0].GetProperty("level").ToString());
Console.WriteLine(result.GetProperty("events")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("organisation_id").ToString());
Console.WriteLine(result.GetProperty("user_id").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("batch_size").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("learning_rate_multiplier").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("n_epochs").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("prompt_loss_weight").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("compute_classification_metrics").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("classification_n_classes").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("classification_positive_class").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("classification_betas")[0].ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>FineTuneCreation</c>:
<code>{
  model: string, # Required.
  training_file: string, # Required.
  validation_file: string, # Optional.
  hyperparams: {
    batch_size: number, # Optional.
    learning_rate_multiplier: number, # Optional.
    n_epochs: number, # Optional.
    prompt_loss_weight: number, # Optional.
    compute_classification_metrics: boolean, # Optional.
    classification_n_classes: number, # Optional.
    classification_positive_class: string, # Optional.
    classification_betas: [number], # Optional.
  }, # Optional.
}
</code>

Response Body:

Schema for <c>FineTune</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
  created_at: number, # Optional.
  updated_at: number, # Optional.
  id: string, # Required.
  model: string, # Required.
  fine_tuned_model: string, # Optional.
  training_files: [
    {
      object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
      status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
      created_at: number, # Optional.
      updated_at: number, # Optional.
      id: string, # Required.
      bytes: number, # Optional.
      purpose: &quot;fine-tune&quot; | &quot;fine-tune-results&quot;, # Required.
      filename: string, # Required.
    }
  ], # Required.
  validation_files: [File], # Optional.
  result_files: [File], # Optional.
  events: [Event], # Optional.
  organisation_id: string, # Optional.
  user_id: string, # Optional.
  hyperparams: {
    batch_size: number, # Optional.
    learning_rate_multiplier: number, # Optional.
    n_epochs: number, # Optional.
    prompt_loss_weight: number, # Optional.
    compute_classification_metrics: boolean, # Optional.
    classification_n_classes: number, # Optional.
    classification_positive_class: string, # Optional.
    classification_betas: [number], # Optional.
  }, # Optional.
}
</code>

</remarks>
    </member>
    <member name="CreateFineTune(RequestContent,RequestContext)">
<example>
This sample shows how to call CreateFineTune with required request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

var data = new {
    model = "<model>",
    training_file = "<training_file>",
};

Response response = client.CreateFineTune(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("filename").ToString());
]]></code>
This sample shows how to call CreateFineTune with all request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

var data = new {
    model = "<model>",
    training_file = "<training_file>",
    validation_file = "<validation_file>",
    hyperparams = new {
        batch_size = 1234,
        learning_rate_multiplier = 123.45f,
        n_epochs = 1234,
        prompt_loss_weight = 123.45f,
        compute_classification_metrics = true,
        classification_n_classes = 1234,
        classification_positive_class = "<classification_positive_class>",
        classification_betas = new[] {
            123.45f
        },
    },
};

Response response = client.CreateFineTune(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("fine_tuned_model").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("events")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("events")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("events")[0].GetProperty("level").ToString());
Console.WriteLine(result.GetProperty("events")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("organisation_id").ToString());
Console.WriteLine(result.GetProperty("user_id").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("batch_size").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("learning_rate_multiplier").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("n_epochs").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("prompt_loss_weight").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("compute_classification_metrics").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("classification_n_classes").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("classification_positive_class").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("classification_betas")[0].ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>FineTuneCreation</c>:
<code>{
  model: string, # Required.
  training_file: string, # Required.
  validation_file: string, # Optional.
  hyperparams: {
    batch_size: number, # Optional.
    learning_rate_multiplier: number, # Optional.
    n_epochs: number, # Optional.
    prompt_loss_weight: number, # Optional.
    compute_classification_metrics: boolean, # Optional.
    classification_n_classes: number, # Optional.
    classification_positive_class: string, # Optional.
    classification_betas: [number], # Optional.
  }, # Optional.
}
</code>

Response Body:

Schema for <c>FineTune</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
  created_at: number, # Optional.
  updated_at: number, # Optional.
  id: string, # Required.
  model: string, # Required.
  fine_tuned_model: string, # Optional.
  training_files: [
    {
      object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
      status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
      created_at: number, # Optional.
      updated_at: number, # Optional.
      id: string, # Required.
      bytes: number, # Optional.
      purpose: &quot;fine-tune&quot; | &quot;fine-tune-results&quot;, # Required.
      filename: string, # Required.
    }
  ], # Required.
  validation_files: [File], # Optional.
  result_files: [File], # Optional.
  events: [Event], # Optional.
  organisation_id: string, # Optional.
  user_id: string, # Optional.
  hyperparams: {
    batch_size: number, # Optional.
    learning_rate_multiplier: number, # Optional.
    n_epochs: number, # Optional.
    prompt_loss_weight: number, # Optional.
    compute_classification_metrics: boolean, # Optional.
    classification_n_classes: number, # Optional.
    classification_positive_class: string, # Optional.
    classification_betas: [number], # Optional.
  }, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetFineTuneAsync(String,RequestContext)">
<example>
This sample shows how to call GetFineTuneAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = await client.GetFineTuneAsync("<fineTuneId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("fine_tuned_model").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("events")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("events")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("events")[0].GetProperty("level").ToString());
Console.WriteLine(result.GetProperty("events")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("organisation_id").ToString());
Console.WriteLine(result.GetProperty("user_id").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("batch_size").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("learning_rate_multiplier").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("n_epochs").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("prompt_loss_weight").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("compute_classification_metrics").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("classification_n_classes").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("classification_positive_class").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("classification_betas")[0].ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>FineTune</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
  created_at: number, # Optional.
  updated_at: number, # Optional.
  id: string, # Required.
  model: string, # Required.
  fine_tuned_model: string, # Optional.
  training_files: [
    {
      object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
      status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
      created_at: number, # Optional.
      updated_at: number, # Optional.
      id: string, # Required.
      bytes: number, # Optional.
      purpose: &quot;fine-tune&quot; | &quot;fine-tune-results&quot;, # Required.
      filename: string, # Required.
    }
  ], # Required.
  validation_files: [File], # Optional.
  result_files: [File], # Optional.
  events: [Event], # Optional.
  organisation_id: string, # Optional.
  user_id: string, # Optional.
  hyperparams: {
    batch_size: number, # Optional.
    learning_rate_multiplier: number, # Optional.
    n_epochs: number, # Optional.
    prompt_loss_weight: number, # Optional.
    compute_classification_metrics: boolean, # Optional.
    classification_n_classes: number, # Optional.
    classification_positive_class: string, # Optional.
    classification_betas: [number], # Optional.
  }, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetFineTune(String,RequestContext)">
<example>
This sample shows how to call GetFineTune with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = client.GetFineTune("<fineTuneId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("fine_tuned_model").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("events")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("events")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("events")[0].GetProperty("level").ToString());
Console.WriteLine(result.GetProperty("events")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("organisation_id").ToString());
Console.WriteLine(result.GetProperty("user_id").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("batch_size").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("learning_rate_multiplier").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("n_epochs").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("prompt_loss_weight").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("compute_classification_metrics").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("classification_n_classes").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("classification_positive_class").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("classification_betas")[0].ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>FineTune</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
  created_at: number, # Optional.
  updated_at: number, # Optional.
  id: string, # Required.
  model: string, # Required.
  fine_tuned_model: string, # Optional.
  training_files: [
    {
      object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
      status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
      created_at: number, # Optional.
      updated_at: number, # Optional.
      id: string, # Required.
      bytes: number, # Optional.
      purpose: &quot;fine-tune&quot; | &quot;fine-tune-results&quot;, # Required.
      filename: string, # Required.
    }
  ], # Required.
  validation_files: [File], # Optional.
  result_files: [File], # Optional.
  events: [Event], # Optional.
  organisation_id: string, # Optional.
  user_id: string, # Optional.
  hyperparams: {
    batch_size: number, # Optional.
    learning_rate_multiplier: number, # Optional.
    n_epochs: number, # Optional.
    prompt_loss_weight: number, # Optional.
    compute_classification_metrics: boolean, # Optional.
    classification_n_classes: number, # Optional.
    classification_positive_class: string, # Optional.
    classification_betas: [number], # Optional.
  }, # Optional.
}
</code>

</remarks>
    </member>
    <member name="DeleteFineTuneAsync(String,RequestContext)">
<example>
This sample shows how to call DeleteFineTuneAsync with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = await client.DeleteFineTuneAsync("<fineTuneId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteFineTune(String,RequestContext)">
<example>
This sample shows how to call DeleteFineTune with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = client.DeleteFineTune("<fineTuneId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="GetFineTuneEventsAsync(String,Boolean,RequestContext)">
<example>
This sample shows how to call GetFineTuneEventsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = await client.GetFineTuneEventsAsync("<fineTuneId>", true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("level").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("message").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>EventList</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  data: [
    {
      object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
      created_at: number, # Optional.
      level: &quot;info&quot; | &quot;warning&quot; | &quot;error&quot;, # Optional.
      message: string, # Optional.
    }
  ], # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetFineTuneEvents(String,Boolean,RequestContext)">
<example>
This sample shows how to call GetFineTuneEvents with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = client.GetFineTuneEvents("<fineTuneId>", true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("level").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("message").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>EventList</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  data: [
    {
      object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
      created_at: number, # Optional.
      level: &quot;info&quot; | &quot;warning&quot; | &quot;error&quot;, # Optional.
      message: string, # Optional.
    }
  ], # Optional.
}
</code>

</remarks>
    </member>
    <member name="CancelFineTuneAsync(String,RequestContext)">
<example>
This sample shows how to call CancelFineTuneAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = await client.CancelFineTuneAsync("<fineTuneId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("fine_tuned_model").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("events")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("events")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("events")[0].GetProperty("level").ToString());
Console.WriteLine(result.GetProperty("events")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("organisation_id").ToString());
Console.WriteLine(result.GetProperty("user_id").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("batch_size").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("learning_rate_multiplier").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("n_epochs").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("prompt_loss_weight").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("compute_classification_metrics").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("classification_n_classes").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("classification_positive_class").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("classification_betas")[0].ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>FineTune</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
  created_at: number, # Optional.
  updated_at: number, # Optional.
  id: string, # Required.
  model: string, # Required.
  fine_tuned_model: string, # Optional.
  training_files: [
    {
      object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
      status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
      created_at: number, # Optional.
      updated_at: number, # Optional.
      id: string, # Required.
      bytes: number, # Optional.
      purpose: &quot;fine-tune&quot; | &quot;fine-tune-results&quot;, # Required.
      filename: string, # Required.
    }
  ], # Required.
  validation_files: [File], # Optional.
  result_files: [File], # Optional.
  events: [Event], # Optional.
  organisation_id: string, # Optional.
  user_id: string, # Optional.
  hyperparams: {
    batch_size: number, # Optional.
    learning_rate_multiplier: number, # Optional.
    n_epochs: number, # Optional.
    prompt_loss_weight: number, # Optional.
    compute_classification_metrics: boolean, # Optional.
    classification_n_classes: number, # Optional.
    classification_positive_class: string, # Optional.
    classification_betas: [number], # Optional.
  }, # Optional.
}
</code>

</remarks>
    </member>
    <member name="CancelFineTune(String,RequestContext)">
<example>
This sample shows how to call CancelFineTune with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = client.CancelFineTune("<fineTuneId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("fine_tuned_model").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("training_files")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("validation_files")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("bytes").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("purpose").ToString());
Console.WriteLine(result.GetProperty("result_files")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("events")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("events")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("events")[0].GetProperty("level").ToString());
Console.WriteLine(result.GetProperty("events")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("organisation_id").ToString());
Console.WriteLine(result.GetProperty("user_id").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("batch_size").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("learning_rate_multiplier").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("n_epochs").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("prompt_loss_weight").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("compute_classification_metrics").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("classification_n_classes").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("classification_positive_class").ToString());
Console.WriteLine(result.GetProperty("hyperparams").GetProperty("classification_betas")[0].ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>FineTune</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
  created_at: number, # Optional.
  updated_at: number, # Optional.
  id: string, # Required.
  model: string, # Required.
  fine_tuned_model: string, # Optional.
  training_files: [
    {
      object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
      status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
      created_at: number, # Optional.
      updated_at: number, # Optional.
      id: string, # Required.
      bytes: number, # Optional.
      purpose: &quot;fine-tune&quot; | &quot;fine-tune-results&quot;, # Required.
      filename: string, # Required.
    }
  ], # Required.
  validation_files: [File], # Optional.
  result_files: [File], # Optional.
  events: [Event], # Optional.
  organisation_id: string, # Optional.
  user_id: string, # Optional.
  hyperparams: {
    batch_size: number, # Optional.
    learning_rate_multiplier: number, # Optional.
    n_epochs: number, # Optional.
    prompt_loss_weight: number, # Optional.
    compute_classification_metrics: boolean, # Optional.
    classification_n_classes: number, # Optional.
    classification_positive_class: string, # Optional.
    classification_betas: [number], # Optional.
  }, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetModelsAsync(RequestContext)">
<example>
This sample shows how to call GetModelsAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = await client.GetModelsAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("fine_tune").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("capabilities").GetProperty("fine_tune").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("capabilities").GetProperty("inference").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("capabilities").GetProperty("completion").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("capabilities").GetProperty("embeddings").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("capabilities").GetProperty("scale_types")[0].ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("deprecation").GetProperty("fine_tune_end_date").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("deprecation").GetProperty("inference").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>ModelList</c>:
<code>{
  object: string, # Optional.
  data: [
    {
      object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
      status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
      created_at: number, # Optional.
      updated_at: number, # Optional.
      id: string, # Required.
      model: string, # Optional.
      fine_tune: string, # Optional.
      capabilities: {
        fine_tune: boolean, # Optional.
        inference: boolean, # Optional.
        completion: boolean, # Optional.
        embeddings: boolean, # Optional.
        scale_types: [&quot;manual&quot; | &quot;standard&quot;], # Optional.
      }, # Optional.
      deprecation: {
        fine_tune_end_date: number, # Optional.
        inference: number, # Optional.
      }, # Optional.
    }
  ], # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetModels(RequestContext)">
<example>
This sample shows how to call GetModels and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = client.GetModels();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("fine_tune").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("capabilities").GetProperty("fine_tune").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("capabilities").GetProperty("inference").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("capabilities").GetProperty("completion").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("capabilities").GetProperty("embeddings").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("capabilities").GetProperty("scale_types")[0].ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("deprecation").GetProperty("fine_tune_end_date").ToString());
Console.WriteLine(result.GetProperty("data")[0].GetProperty("deprecation").GetProperty("inference").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>ModelList</c>:
<code>{
  object: string, # Optional.
  data: [
    {
      object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
      status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
      created_at: number, # Optional.
      updated_at: number, # Optional.
      id: string, # Required.
      model: string, # Optional.
      fine_tune: string, # Optional.
      capabilities: {
        fine_tune: boolean, # Optional.
        inference: boolean, # Optional.
        completion: boolean, # Optional.
        embeddings: boolean, # Optional.
        scale_types: [&quot;manual&quot; | &quot;standard&quot;], # Optional.
      }, # Optional.
      deprecation: {
        fine_tune_end_date: number, # Optional.
        inference: number, # Optional.
      }, # Optional.
    }
  ], # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetModelAsync(String,RequestContext)">
<example>
This sample shows how to call GetModelAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = await client.GetModelAsync("<modelId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("fine_tune").ToString());
Console.WriteLine(result.GetProperty("capabilities").GetProperty("fine_tune").ToString());
Console.WriteLine(result.GetProperty("capabilities").GetProperty("inference").ToString());
Console.WriteLine(result.GetProperty("capabilities").GetProperty("completion").ToString());
Console.WriteLine(result.GetProperty("capabilities").GetProperty("embeddings").ToString());
Console.WriteLine(result.GetProperty("capabilities").GetProperty("scale_types")[0].ToString());
Console.WriteLine(result.GetProperty("deprecation").GetProperty("fine_tune_end_date").ToString());
Console.WriteLine(result.GetProperty("deprecation").GetProperty("inference").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
  created_at: number, # Optional.
  updated_at: number, # Optional.
  id: string, # Required.
  model: string, # Optional.
  fine_tune: string, # Optional.
  capabilities: {
    fine_tune: boolean, # Optional.
    inference: boolean, # Optional.
    completion: boolean, # Optional.
    embeddings: boolean, # Optional.
    scale_types: [&quot;manual&quot; | &quot;standard&quot;], # Optional.
  }, # Optional.
  deprecation: {
    fine_tune_end_date: number, # Optional.
    inference: number, # Optional.
  }, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetModel(String,RequestContext)">
<example>
This sample shows how to call GetModel with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new OpenAIClient(endpoint, credential);

Response response = client.GetModel("<modelId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("object").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("created_at").ToString());
Console.WriteLine(result.GetProperty("updated_at").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("model").ToString());
Console.WriteLine(result.GetProperty("fine_tune").ToString());
Console.WriteLine(result.GetProperty("capabilities").GetProperty("fine_tune").ToString());
Console.WriteLine(result.GetProperty("capabilities").GetProperty("inference").ToString());
Console.WriteLine(result.GetProperty("capabilities").GetProperty("completion").ToString());
Console.WriteLine(result.GetProperty("capabilities").GetProperty("embeddings").ToString());
Console.WriteLine(result.GetProperty("capabilities").GetProperty("scale_types")[0].ToString());
Console.WriteLine(result.GetProperty("deprecation").GetProperty("fine_tune_end_date").ToString());
Console.WriteLine(result.GetProperty("deprecation").GetProperty("inference").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  object: &quot;list&quot; | &quot;fine-tune&quot; | &quot;file&quot; | &quot;fine-tune-event&quot; | &quot;model&quot; | &quot;deployment&quot;, # Optional.
  status: &quot;notRunning&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;canceled&quot; | &quot;failed&quot; | &quot;deleted&quot;, # Optional.
  created_at: number, # Optional.
  updated_at: number, # Optional.
  id: string, # Required.
  model: string, # Optional.
  fine_tune: string, # Optional.
  capabilities: {
    fine_tune: boolean, # Optional.
    inference: boolean, # Optional.
    completion: boolean, # Optional.
    embeddings: boolean, # Optional.
    scale_types: [&quot;manual&quot; | &quot;standard&quot;], # Optional.
  }, # Optional.
  deprecation: {
    fine_tune_end_date: number, # Optional.
    inference: number, # Optional.
  }, # Optional.
}
</code>

</remarks>
    </member>
  </members>
</doc>