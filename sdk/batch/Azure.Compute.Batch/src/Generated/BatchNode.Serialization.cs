// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Compute.Batch
{
    public partial class BatchNode
    {
        internal static BatchNode DeserializeBatchNode(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> id = default;
            Optional<string> url = default;
            Optional<BatchNodeState> state = default;
            Optional<SchedulingState> schedulingState = default;
            Optional<DateTimeOffset> stateTransitionTime = default;
            Optional<DateTimeOffset> lastBootTime = default;
            Optional<DateTimeOffset> allocationTime = default;
            Optional<string> ipAddress = default;
            Optional<string> affinityId = default;
            Optional<string> vmSize = default;
            Optional<int> totalTasksRun = default;
            Optional<int> runningTasksCount = default;
            Optional<int> runningTaskSlotsCount = default;
            Optional<int> totalTasksSucceeded = default;
            Optional<IReadOnlyList<TaskInformation>> recentTasks = default;
            Optional<StartTask> startTask = default;
            Optional<StartTaskInformation> startTaskInfo = default;
            Optional<IReadOnlyList<CertificateReference>> certificateReferences = default;
            Optional<IReadOnlyList<BatchNodeError>> errors = default;
            Optional<bool> isDedicated = default;
            Optional<BatchNodeEndpointConfiguration> endpointConfiguration = default;
            Optional<NodeAgentInformation> nodeAgentInfo = default;
            Optional<VirtualMachineInfo> virtualMachineInfo = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("url"u8))
                {
                    url = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    state = new BatchNodeState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("schedulingState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    schedulingState = new SchedulingState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("stateTransitionTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    stateTransitionTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastBootTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastBootTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("allocationTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    allocationTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("ipAddress"u8))
                {
                    ipAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("affinityId"u8))
                {
                    affinityId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vmSize"u8))
                {
                    vmSize = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("totalTasksRun"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalTasksRun = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("runningTasksCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    runningTasksCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("runningTaskSlotsCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    runningTaskSlotsCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("totalTasksSucceeded"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalTasksSucceeded = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("recentTasks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<TaskInformation> array = new List<TaskInformation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TaskInformation.DeserializeTaskInformation(item));
                    }
                    recentTasks = array;
                    continue;
                }
                if (property.NameEquals("startTask"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startTask = StartTask.DeserializeStartTask(property.Value);
                    continue;
                }
                if (property.NameEquals("startTaskInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startTaskInfo = StartTaskInformation.DeserializeStartTaskInformation(property.Value);
                    continue;
                }
                if (property.NameEquals("certificateReferences"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CertificateReference> array = new List<CertificateReference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CertificateReference.DeserializeCertificateReference(item));
                    }
                    certificateReferences = array;
                    continue;
                }
                if (property.NameEquals("errors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<BatchNodeError> array = new List<BatchNodeError>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(BatchNodeError.DeserializeBatchNodeError(item));
                    }
                    errors = array;
                    continue;
                }
                if (property.NameEquals("isDedicated"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isDedicated = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("endpointConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endpointConfiguration = BatchNodeEndpointConfiguration.DeserializeBatchNodeEndpointConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("nodeAgentInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nodeAgentInfo = NodeAgentInformation.DeserializeNodeAgentInformation(property.Value);
                    continue;
                }
                if (property.NameEquals("virtualMachineInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    virtualMachineInfo = VirtualMachineInfo.DeserializeVirtualMachineInfo(property.Value);
                    continue;
                }
            }
            return new BatchNode(id.Value, url.Value, Optional.ToNullable(state), Optional.ToNullable(schedulingState), Optional.ToNullable(stateTransitionTime), Optional.ToNullable(lastBootTime), Optional.ToNullable(allocationTime), ipAddress.Value, affinityId.Value, vmSize.Value, Optional.ToNullable(totalTasksRun), Optional.ToNullable(runningTasksCount), Optional.ToNullable(runningTaskSlotsCount), Optional.ToNullable(totalTasksSucceeded), Optional.ToList(recentTasks), startTask.Value, startTaskInfo.Value, Optional.ToList(certificateReferences), Optional.ToList(errors), Optional.ToNullable(isDedicated), endpointConfiguration.Value, nodeAgentInfo.Value, virtualMachineInfo.Value);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static BatchNode FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeBatchNode(document.RootElement);
        }
    }
}
