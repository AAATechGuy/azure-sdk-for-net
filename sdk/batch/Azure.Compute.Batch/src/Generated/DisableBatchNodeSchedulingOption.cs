// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Compute.Batch
{
    /// <summary> DisableBatchNodeSchedulingOption enums. </summary>
    public readonly partial struct DisableBatchNodeSchedulingOption : IEquatable<DisableBatchNodeSchedulingOption>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DisableBatchNodeSchedulingOption"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DisableBatchNodeSchedulingOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RequeueValue = "requeue";
        private const string TerminateValue = "terminate";
        private const string TaskCompletionValue = "taskcompletion";

        /// <summary> Terminate running Task processes and requeue the Tasks. The Tasks may run again on other Compute Nodes, or when Task scheduling is re-enabled on this Compute Node. Enter offline state as soon as Tasks have been terminated. </summary>
        public static DisableBatchNodeSchedulingOption Requeue { get; } = new DisableBatchNodeSchedulingOption(RequeueValue);
        /// <summary> Terminate running Tasks. The Tasks will be completed with failureInfo indicating that they were terminated, and will not run again. Enter offline state as soon as Tasks have been terminated. </summary>
        public static DisableBatchNodeSchedulingOption Terminate { get; } = new DisableBatchNodeSchedulingOption(TerminateValue);
        /// <summary> Allow currently running Tasks to complete. Schedule no new Tasks while waiting. Enter offline state when all Tasks have completed. </summary>
        public static DisableBatchNodeSchedulingOption TaskCompletion { get; } = new DisableBatchNodeSchedulingOption(TaskCompletionValue);
        /// <summary> Determines if two <see cref="DisableBatchNodeSchedulingOption"/> values are the same. </summary>
        public static bool operator ==(DisableBatchNodeSchedulingOption left, DisableBatchNodeSchedulingOption right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DisableBatchNodeSchedulingOption"/> values are not the same. </summary>
        public static bool operator !=(DisableBatchNodeSchedulingOption left, DisableBatchNodeSchedulingOption right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DisableBatchNodeSchedulingOption"/>. </summary>
        public static implicit operator DisableBatchNodeSchedulingOption(string value) => new DisableBatchNodeSchedulingOption(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DisableBatchNodeSchedulingOption other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DisableBatchNodeSchedulingOption other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
