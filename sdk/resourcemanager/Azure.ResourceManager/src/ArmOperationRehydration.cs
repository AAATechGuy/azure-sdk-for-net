// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager
{
    /// <inheritdoc/>
    public abstract class ArmOperationRehydration
    {
        /// <summary> Initializes a new instance of the <see cref="ArmOperationRehydration"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The id of the ArmOperation. </param>
        public ArmOperationRehydration(ArmClient client, string id)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(client, nameof(client));

            Client = client;
            Id = id;
        }

        /// <summary>
        /// Gets the <see cref="ArmClient"/> this resource client was created from.
        /// </summary>
        protected internal virtual ArmClient Client { get; }

        /// <summary>
        /// Gets the pipeline.
        /// </summary>
        protected internal virtual HttpPipeline Pipeline => Client.Pipeline;

        /// <summary>
        /// Gets the diagnostic options.
        /// </summary>
        protected internal virtual DiagnosticsOptions Diagnostics => Client.Diagnostics;

        /// <summary>
        /// Gets the operation id.
        /// </summary>
        protected internal virtual string Id { get; private set; }

        // <summary> Rehydrate an LRO. </summary>
        /// <param name="waitUntil"> "F:Azure.WaitUntil.Completed" if the method should wait to return until the long-running operation has completed on the service; "F:Azure.WaitUntil.Started" if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public abstract Task<ArmOperation> RehydrateAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default);

        // <summary> Rehydrate an LRO. </summary>
        /// <param name="waitUntil"> "F:Azure.WaitUntil.Completed" if the method should wait to return until the long-running operation has completed on the service; "F:Azure.WaitUntil.Started" if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public abstract ArmOperation Rehydrate(WaitUntil waitUntil, CancellationToken cancellationToken = default);
    }
}
