// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Reflection;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;

namespace Azure.ResourceManager
{
    internal class GenericOperationSource<T> : IOperationSource<T> where T: class
    {
        T IOperationSource<T>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            using var document = JsonDocument.Parse(response.ContentStream);
            var method = typeof(T).GetMethod($"Deserialize{typeof(T).Name}", BindingFlags.NonPublic | BindingFlags.Static);
            if (method == null)
                throw new InvalidOperationException($"The type {typeof(T).FullName} does not contain the Deserialize{typeof(T).Name} method. Please use a Data class.");
            var data = method.Invoke(null, new object[] { document }) as T;
            return data;
        }
        async ValueTask<T> IOperationSource<T>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            // using var document = JsonDocument.Parse(response.ContentStream);
            // var method = typeof(T).GetMethod($"Deserialize{typeof(T).Name}", BindingFlags.NonPublic | BindingFlags.Static);
            // if (method == null)
            //     throw new InvalidOperationException($"The type {typeof(T).FullName} does not contain the Deserialize{typeof(T).Name} method. Please use a Data class.");
            // var data = method.Invoke(null, new object[] { document }) as T;
            using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
            var method = typeof(T).GetMethod($"Deserialize{typeof(T).Name}", BindingFlags.NonPublic | BindingFlags.Static);
            if (method == null)
                throw new InvalidOperationException($"The type {typeof(T).FullName} does not contain the Deserialize{typeof(T).Name} method. Please use a Data class.");
            var data = method.Invoke(null, new object[] { document }) as T;
            return data;
        }
    }
}
