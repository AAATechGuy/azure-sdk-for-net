// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Core.Serialization;

namespace Azure.ResourceManager
{
    /// <inheritdoc/>
    public class ArmOperation<T> : Operation<T>
    {
        private readonly OperationInternal<T> _operation;

        /// <summary> Initializes a new instance of ArmOperation. </summary>
        public ArmOperation(ArmClient client, string id)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));
            var obj = Activator.CreateInstance(typeof(T), BindingFlags.NonPublic | BindingFlags.Instance, null, null, null);

            if (typeof(T).GetInterface(nameof(IModelSerializable<object>)) is not null)
            {
                IOperationSource<T> source = new GenericOperationSource<T>();
                var nextLinkOperation = NextLinkOperationImplementation.Create(source, client.Pipeline, id);
                // TODO: Do we need more specific OptionsNamespace, ProviderNamespace and OperationTypeName and possibly from id?
                var clientDiagnostics = new ClientDiagnostics("Azure.ResourceManager", "Microsoft.Resources", client.Diagnostics);
                _operation = new OperationInternal<T>(nextLinkOperation, clientDiagnostics, null, operationTypeName: null);
            }
            else if (typeof(T).GetInterface(nameof(IResource)) is not null)
            {
                IOperationSource<T> source = new GenericResourceOperationSource<T>(client);
                var nextLinkOperation = NextLinkOperationImplementation.Create(source, client.Pipeline, id);
                // TODO: Do we need more specific OptionsNamespace, ProviderNamespace and OperationTypeName and possibly from id?
                var clientDiagnostics = new ClientDiagnostics("Azure.ResourceManager", "Microsoft.Resources", client.Diagnostics);
                _operation = new OperationInternal<T>(nextLinkOperation, clientDiagnostics, null, operationTypeName: null);
            }
            else
            {
                throw new InvalidOperationException($"Type {typeof(T)} should be Resource or ReousrceData");
            }
        }

        /// <summary> Initializes a new instance of ArmOperation for mocking. </summary>
        protected ArmOperation()
        {
        }

        internal ArmOperation(OperationInternal<T> operation)
        {
            _operation = operation;
        }

        internal ArmOperation(Response<T> response, string operationId)
        {
            _operation = OperationInternal<T>.Succeeded(response.GetRawResponse(), response.Value, operationId);
        }

        internal ArmOperation(IOperationSource<T> source, ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Request request, Response response, OperationFinalStateVia finalStateVia, string resourceTypeName, bool skipApiVersionOverride = false, string apiVersionOverrideValue = null)
        {
            var nextLinkOperation = NextLinkOperationImplementation.Create(source, pipeline, request.Method, request.Uri.ToUri(), response, finalStateVia, skipApiVersionOverride, apiVersionOverrideValue);
            _operation = new OperationInternal<T>(nextLinkOperation, clientDiagnostics, response, resourceTypeName);
        }

        /// <inheritdoc />
        public override string Id => _operation.GetOperationId();

        /// <inheritdoc />
        public override T Value => _operation.Value;

        /// <inheritdoc />
        public override bool HasValue => _operation.HasValue;

        /// <inheritdoc />
        public override bool HasCompleted => _operation.HasCompleted;

        /// <inheritdoc />
        public override Response GetRawResponse() => _operation.RawResponse;

        /// <inheritdoc />
        public override Response UpdateStatus(CancellationToken cancellationToken = default) => _operation.UpdateStatus(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response> UpdateStatusAsync(CancellationToken cancellationToken = default) => _operation.UpdateStatusAsync(cancellationToken);

        /// <inheritdoc />
        public override Response<T> WaitForCompletion(CancellationToken cancellationToken = default) => _operation.WaitForCompletion(cancellationToken);

        /// <inheritdoc />
        public override Response<T> WaitForCompletion(TimeSpan pollingInterval, CancellationToken cancellationToken = default) => _operation.WaitForCompletion(pollingInterval, cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response<T>> WaitForCompletionAsync(CancellationToken cancellationToken = default) => _operation.WaitForCompletionAsync(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response<T>> WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken = default) => _operation.WaitForCompletionAsync(pollingInterval, cancellationToken);
    }
}
