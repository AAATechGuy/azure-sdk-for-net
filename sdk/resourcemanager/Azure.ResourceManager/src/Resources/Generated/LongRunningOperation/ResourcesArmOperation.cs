// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.Resources
{
#pragma warning disable SA1649 // File name should match first type name
    internal class ResourcesArmOperation : ArmOperation
#pragma warning restore SA1649 // File name should match first type name
    {
        private readonly OperationInternal _operation;

        /// <summary> Initializes a new instance of ResourcesArmOperation for mocking. </summary>
        protected ResourcesArmOperation()
        {
        }

        internal ResourcesArmOperation(Response response)
        {
            var serializeOptions = new JsonSerializerOptions { Converters = { new NextLinkOperationImplementation.StreamConverter() } };
            var lroDetails = new Dictionary<string, string>()
            {
                ["InitialResponse"] = BinaryData.FromObjectAsJson<Response>(response, serializeOptions).ToString()
            };
            var lroData = BinaryData.FromObjectAsJson(lroDetails);
            Id = Convert.ToBase64String(lroData.ToArray());
            _operation = OperationInternal.Succeeded(response);
        }

        internal ResourcesArmOperation(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Request request, Response response, OperationFinalStateVia finalStateVia)
        {
            var nextLinkOperation = NextLinkOperationImplementation.Create(pipeline, request.Method, request.Uri.ToUri(), response, finalStateVia);
            _operation = new OperationInternal(clientDiagnostics, nextLinkOperation, response, "ResourcesArmOperation", fallbackStrategy: new ExponentialDelayStrategy());
        }

        internal ResourcesArmOperation(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string id, string interimApiVersion = null)
        {
            var lroDetails = BinaryData.FromBytes(Convert.FromBase64String(id)).ToObjectFromJson<Dictionary<string, string>>();
            lroDetails.TryGetValue("NextRequestUri", out string nextRequestUri);
            if (nextRequestUri == null)
            {
                IDictionary<string, object> responseObj = BinaryData.FromString(lroDetails["InitialResponse"]).ToObjectFromJson<IDictionary<string, object>>();
                Response response = new ResourcesResponse(((JsonElement)responseObj["Status"]).GetInt32(), ((JsonElement)responseObj["ReasonPhrase"]).GetString(), new MemoryStream(), ((JsonElement)responseObj["ClientRequestId"]).GetString());
                _operation = OperationInternal.Succeeded(response);
                return;
            }

            var nextLinkOperation = NextLinkOperationImplementation.Create(pipeline, id, interimApiVersion);
            _operation = new OperationInternal(clientDiagnostics, nextLinkOperation, null, "ResourcesArmOperation", fallbackStrategy: new ExponentialDelayStrategy());
        }

        /// <inheritdoc />
        public override string Id => _operation.GetOperationId();

        internal class ResourcesResponse: Response
        {
            public ResourcesResponse()
            {
            }

            internal ResourcesResponse(int status, string reasonPhase, Stream contentStream, string clientRequestId)//, ResponseHeaders headers, bool isError)
            {
                Status = status;
                ReasonPhrase = reasonPhase;
                ContentStream = contentStream;
                ClientRequestId = clientRequestId;
                // contentStream.Flush();
                //Headers = headers;
                //IsError = isError;
            }

            public override int Status { get; }

            public override string ReasonPhrase { get; }

            public override Stream ContentStream
            {
                get;
                set;
            }
            public override string ClientRequestId { get; set; }
            //public override ResponseHeaders Headers { get; }
            //public new bool IsError { get; }

            public override void Dispose()
            {
                throw new NotImplementedException();
            }

            protected override bool ContainsHeader(string name)
            {
                throw new NotImplementedException();
            }

            protected override IEnumerable<HttpHeader> EnumerateHeaders()
            {
                throw new NotImplementedException();
            }

            protected override bool TryGetHeader(string name, out string value)
            {
                throw new NotImplementedException();
            }

            protected override bool TryGetHeaderValues(string name, out IEnumerable<string> values)
            {
                throw new NotImplementedException();
            }
        }

        /// <inheritdoc />
        public override bool HasCompleted => _operation.HasCompleted;

        /// <inheritdoc />
        public override Response GetRawResponse() => _operation.RawResponse;

        /// <inheritdoc />
        public override Response UpdateStatus(CancellationToken cancellationToken = default) => _operation.UpdateStatus(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response> UpdateStatusAsync(CancellationToken cancellationToken = default) => _operation.UpdateStatusAsync(cancellationToken);

        /// <inheritdoc />
        public override Response WaitForCompletionResponse(CancellationToken cancellationToken = default) => _operation.WaitForCompletionResponse(cancellationToken);

        /// <inheritdoc />
        public override Response WaitForCompletionResponse(TimeSpan pollingInterval, CancellationToken cancellationToken = default) => _operation.WaitForCompletionResponse(pollingInterval, cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response> WaitForCompletionResponseAsync(CancellationToken cancellationToken = default) => _operation.WaitForCompletionResponseAsync(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response> WaitForCompletionResponseAsync(TimeSpan pollingInterval, CancellationToken cancellationToken = default) => _operation.WaitForCompletionResponseAsync(pollingInterval, cancellationToken);
    }
}
